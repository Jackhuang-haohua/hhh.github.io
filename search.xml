<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>《你好，吃了吗》</title>
    <url>/jackhuang-haohua.github.io/2019/01/09/2020-01-%E7%AC%AC%E4%B8%80%E7%AF%87/</url>
    <content><![CDATA[<p><strong><center>总算是搭好了一个小站，总得写点啥来纪念，接下来我也不知道要干啥，就先给大家拜个早年吧！</center></strong><br><img src="https://s2.ax1x.com/2020/01/11/lIPsij.jpg" alt="lIPsij.jpg"></p>
<a id="more"></a>
<h4 id="《你好，吃了吗》"><a href="#《你好，吃了吗》" class="headerlink" title="《你好，吃了吗》"></a><center>《你好，吃了吗》</center></h4><center>1967年，三毛在马德里遇见了荷西</center>
<center>1969年，克莱恩在加州大学发送了“LO”</center>
<center>1979年，有一位老人在南海边画了一个圈</center>
<center>1Q84年，天吾与青豆被裹在了豆荚里</center>
<center>1993年，程蝶衣与段小楼蓦然梦醒</center>
<center>2020年，我在这儿写下了第一篇博客</center>
<center>如果编程语言是中文，会不会是“打印("你好, 吃了吗\换行");”</center>]]></content>
      <categories>
        <category>随笔</category>
      </categories>
  </entry>
  <entry>
    <title>认识gulp</title>
    <url>/jackhuang-haohua.github.io/2019/08/25/2020-02-gulp/</url>
    <content><![CDATA[<h2 id="一、了解gulp"><a href="#一、了解gulp" class="headerlink" title="一、了解gulp"></a>一、了解gulp</h2><blockquote>
<p>gulp是一个开源JavaScript工具包，用作前端Web开发中的流构建系统，基于Node.js和npm的任务运行器，用于自动化Web开发中涉及的耗时和重复性任务，如缩小，连接，缓存清除，单元测试，linting，优化等。</p>
</blockquote>
<ul>
<li>前端自动化打包工具<ul>
<li>运行需要依赖一个 node 环境</li>
<li>自动化: 自动, 不需要手动做事, 但是需要你手动去编辑好一个步骤</li>
<li>打包: 就是把零散的东西给你合在一起, 对代码进行压缩/混淆/合并</li>
<li>工具: 帮我们完成这个事情的东西</li>
</ul>
</li>
<li>什么是流:<ul>
<li>当你使用代码读取磁盘上的内容的时候</li>
<li>不是立即把磁盘上的内容全部给你看，而是处理成二进制形式</li>
<li>譬如“你好世界” -&gt; 存储在电脑上的时候 -&gt; 010101011010</li>
<li>当这个“二进制形式的数据”被包装过以后，就是一个可以直接使用各种方法API的二进制环境</li>
<li>我们关这个东西叫做“二进制流”</li>
</ul>
</li>
</ul>
<p>在一个前端项目里，往往会有：</p>
<ul>
<li>pages文件夹  -&gt; 存放html页面</li>
<li>css文件夹  -&gt; 存放css文件</li>
<li>js文件夹  -&gt; 存放js文件</li>
<li>mages文件夹  -&gt; 存放图片文件</li>
<li>fonts文件夹  -&gt; 存放字体图标文件</li>
<li>videos文件夹  -&gt; 存放视频文件</li>
</ul>
<p>使用gulp，相当于将这些文件一个接一个的压缩打包，最后整理在一起；<br>因命名习惯等的不同，文件夹都会有区别，所有使用gulp还需要自行配置，每一个项目对应一个gulp配置。</p>
<h2 id="二、gulp安装"><a href="#二、gulp安装" class="headerlink" title="二、gulp安装"></a>二、gulp安装</h2><p><font size=4>安装gulp：</font></p>
<ul>
<li>打开命令行</li>
<li>window 输入<code>npm install --global gulp</code>，回车</li>
<li>mac    输入<code>sudo npm install --global gulp</code>，回车</li>
</ul>
<p><font size=4>检测gulp：</font></p>
<ul>
<li>打开命令行</li>
<li>输入<code>gulp --version</code>或者<code>gulp -v</code>，回车</li>
<li>出现版本号如<code>CLI version: 2.2.0    Local version: Unknown</code>，表示已成功安装</li>
</ul>
<p><font size=4>卸载gulp：</font></p>
<ul>
<li>打开命令行</li>
<li>输入<code>npm uninstall --global gulp</code>，回车</li>
</ul>
]]></content>
      <categories>
        <category>gulp</category>
      </categories>
  </entry>
  <entry>
    <title>使用JavaScript循序渐进地写出轮播图</title>
    <url>/jackhuang-haohua.github.io/2019/01/11/2020-01-%E7%AC%AC%E4%BA%8C%E7%AF%87-%E8%BD%AE%E6%92%AD%E5%9B%BE/</url>
    <content><![CDATA[<h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><blockquote>
<p>几乎所有的网站都会用到轮播图，虽然现在使用框架生成轮播图十分简单，但基本原理还是要懂哒！</p>
</blockquote>
<h2 id="二、直接切换的轮播图"><a href="#二、直接切换的轮播图" class="headerlink" title="二、直接切换的轮播图"></a>二、直接切换的轮播图</h2><p><font size=4><strong>特点：</strong></font></p>
<ul>
<li>使用DOM操作节点</li>
<li>直接改变图片路径</li>
<li>使用定时器<code>setInterval()</code>，每隔一段时间改变图片的引用路径<code>src=&quot;images/pic1.jpg&quot;</code>，当图片播到最后一张时，再换成第一张即可；<br><font size=4><strong>示例代码：</strong></font></li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- css部分 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.box</span> &#123;</span></span><br><span class="line">            width: 500px;</span><br><span class="line">            height: 280px;</span><br><span class="line">            overflow: hidden;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.box</span> <span class="selector-tag">img</span> &#123;</span></span><br><span class="line">            width: 500px;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- html部分 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">"img"</span> <span class="attr">src</span>=<span class="string">"images/pic1.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- JavaScript部分 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> index = <span class="number">0</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="comment">// setInterval(函数名,时间)</span></span></span><br><span class="line"><span class="actionscript">        <span class="function"><span class="keyword">function</span> <span class="title">fun</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line">            index++;</span><br><span class="line"><span class="actionscript">            <span class="comment">// 因为图片只有5张，所以当index&gt; 5的时候，应该切换到第一张，那么index = 1</span></span></span><br><span class="line">            if (index &gt; 5) &#123;</span><br><span class="line">                index = 1;</span><br><span class="line">            &#125;</span><br><span class="line"><span class="actionscript">            img.src = <span class="string">'images/pic'</span> + index + <span class="string">'.jpg'</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> timer = setInterval(fun, <span class="number">1000</span>);</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p><font size=3><strong>效果图：</strong></font><br><img src="https://s2.ax1x.com/2020/01/12/lT61KO.gif" alt="lT61KO.gif"></p>
<h2 id="三、改变left值的轮播图"><a href="#三、改变left值的轮播图" class="headerlink" title="三、改变left值的轮播图"></a>三、改变left值的轮播图</h2><p><font size=4><strong>特点：</strong></font></p>
<ul>
<li>把图片都装在一个大盒子里，通过定时改变大盒子（ul）的<code>margin-left</code>来实现切换</li>
<li>给大盒子（ul）设置css样式<code>transition</code>，来增加切换过渡</li>
<li>同样的，当图片播到最后一张时，再换成第一张即可；</li>
<li>在上面改变路径的方法中，因为图片的名字为1-5，所以index&gt;5时就另其等于1；但是在接下来的方法中，margin-left=4*500px，即index=4时，就已经是最后一张图了，所以index&gt;=5时另其等于1；</li>
<li>如下图，绿色框是可视区域，红色框是装着图片的li，黄色框是装着li的ul</li>
</ul>
<p><img src="https://s2.ax1x.com/2020/01/12/lT2C8I.png" alt="lT2C8I.png"><br><font size=4><strong>示例代码：</strong></font></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- css部分 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        * &#123;</span><br><span class="line">            margin: 0;</span><br><span class="line">            padding: 0;</span><br><span class="line">            list-style: none;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.box</span> &#123;</span></span><br><span class="line">            width: 500px;</span><br><span class="line">            height: 280px;</span><br><span class="line">            position: relative;</span><br><span class="line">            overflow: hidden;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.box</span> <span class="selector-tag">ul</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="comment">/* 因为是5张图，所以大盒子的宽度为500px*5 */</span></span></span><br><span class="line">            width: 2500px;</span><br><span class="line">            position: absolute;</span><br><span class="line"><span class="css">            <span class="selector-tag">transition</span>: 0<span class="selector-class">.5s</span>;</span></span><br><span class="line">            margin-left: 0px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.box</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> &#123;</span></span><br><span class="line">            float: left;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.box</span> <span class="selector-tag">ul</span> <span class="selector-tag">img</span> &#123;</span></span><br><span class="line">            width: 500px;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- html部分 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"ul"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">"img"</span> <span class="attr">src</span>=<span class="string">"images/pic1.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">"img"</span> <span class="attr">src</span>=<span class="string">"images/pic2.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">"img"</span> <span class="attr">src</span>=<span class="string">"images/pic3.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">"img"</span> <span class="attr">src</span>=<span class="string">"images/pic4.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">"img"</span> <span class="attr">src</span>=<span class="string">"images/pic5.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- JavaScript部分 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> index = <span class="number">0</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> ul = <span class="built_in">document</span>.getElementById(<span class="string">'ul'</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="function"><span class="keyword">function</span> <span class="title">fun</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line">            index++;</span><br><span class="line"><span class="actionscript">            <span class="comment">// 因为图片只有5张，所以当index &gt;= 5的时候，应该切换到第一张，那么index = 1</span></span></span><br><span class="line">            if (index &gt;= 5) &#123;</span><br><span class="line">                index = 0;</span><br><span class="line">            &#125;</span><br><span class="line"><span class="actionscript">            ul.style.marginLeft = index * <span class="number">-500</span> + <span class="string">'px'</span></span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> timer = setInterval(fun, <span class="number">1000</span>);</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
<p><font size=3><strong>效果图：</strong></font><br><img src="https://s2.ax1x.com/2020/01/13/l7PNut.gif" alt="l7PNut.gif"><br>看起来还行，但是我们随便打开一个有轮播图网站，就会发现图片都是一直向右或者向左播放，该怎么办呢？</p>
<h3 id="轮播图的基本原理"><a href="#轮播图的基本原理" class="headerlink" title="轮播图的基本原理"></a>轮播图的基本原理</h3><ul>
<li>相比上面的结构，复制了第一张图放到最后</li>
<li>当从最后一张转到第一张时，大盒子（ul）的css样式<code>transition</code>设置为0s</li>
</ul>
<p><img src="https://s2.ax1x.com/2020/01/13/lTjbR0.png" alt="lTjbR0.png"></p>
<p><font size=4><strong>示例代码：</strong></font></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- css部分 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        * &#123;</span><br><span class="line">            margin: 0;</span><br><span class="line">            padding: 0;</span><br><span class="line">            list-style: none;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.box</span> &#123;</span></span><br><span class="line">            width: 500px;</span><br><span class="line">            height: 280px;</span><br><span class="line">            position: relative;</span><br><span class="line">            overflow: hidden;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.box</span> <span class="selector-tag">ul</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="comment">/* 因为是5张图，所以大盒子的宽度为500px*6 */</span></span></span><br><span class="line">            width: 3000px;</span><br><span class="line">            position: absolute;</span><br><span class="line">            margin-left: 0px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.box</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> &#123;</span></span><br><span class="line">            float: left;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.box</span> <span class="selector-tag">ul</span> <span class="selector-tag">img</span> &#123;</span></span><br><span class="line">            width: 500px;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- html部分 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"bor"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"ul"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">"img"</span> <span class="attr">src</span>=<span class="string">"images/pic1.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">"img"</span> <span class="attr">src</span>=<span class="string">"images/pic2.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">"img"</span> <span class="attr">src</span>=<span class="string">"images/pic3.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">"img"</span> <span class="attr">src</span>=<span class="string">"images/pic4.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">"img"</span> <span class="attr">src</span>=<span class="string">"images/pic5.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">"img"</span> <span class="attr">src</span>=<span class="string">"images/pic1.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- JavaScript部分 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> index = <span class="number">0</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> ul = <span class="built_in">document</span>.getElementById(<span class="string">'ul'</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="function"><span class="keyword">function</span> <span class="title">fun</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="comment">// 添加过渡时间</span></span></span><br><span class="line"><span class="actionscript">            ul.style.transition = <span class="number">0.5</span> + <span class="string">'s'</span>;</span></span><br><span class="line">            index++;</span><br><span class="line"><span class="actionscript">            <span class="comment">// 因为图片有6张，所以当index &gt;= 6的时候，应该切换到第一张，那么index = 1</span></span></span><br><span class="line">            if (index &gt;= 6) &#123;</span><br><span class="line">                index = 0;</span><br><span class="line"><span class="actionscript">                <span class="comment">// 清除过渡时间</span></span></span><br><span class="line"><span class="actionscript">                ul.style.transition = <span class="number">0</span> + <span class="string">'s'</span>;</span></span><br><span class="line">            &#125;</span><br><span class="line"><span class="actionscript">            ul.style.marginLeft = index * <span class="number">-500</span> + <span class="string">'px'</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> timer = setInterval(fun, <span class="number">1000</span>);</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
<p><font size=3><strong>效果图：</strong></font><br><img src="https://s2.ax1x.com/2020/01/13/l7Ps3j.gif" alt="l7Ps3j.gif"><br>效果是有了(⊙o⊙)，但还有一个缺点：从最后一张到第一张时（两张图长一样），定时器调用了两次，所以停顿的时间也是两倍，还不够流畅；</p>
<h2 id="四、使用动画函数的轮播图"><a href="#四、使用动画函数的轮播图" class="headerlink" title="四、使用动画函数的轮播图"></a>四、使用动画函数的轮播图</h2><p>接下来，我们不使用改变<code>margin-left</code>，设置<code>transition</code>的方法了，而是使用动画函数来让大盒子动起来，在此之前，我们先来了解一下“动画函数”；</p>
<h3 id="JS中的动画函数"><a href="#JS中的动画函数" class="headerlink" title="JS中的动画函数"></a>JS中的动画函数</h3><p><img src="https://s2.ax1x.com/2020/01/13/l7Z3ZR.png" alt="l7Z3ZR.png"><br>看到这些图，有没有很熟悉？没错，在css的动画animation中出现过，</p>
<blockquote>
<p>css动画一般用来实现比较简单的“一次性转换”，例如导航栏菜单的侧面引入，模太框的弹出等。但要实现高级效果时，例如弹跳，加速，减速等比较复杂的动画，则需要使用Javascript动画。现在的JS动画框架非常多，例如<a href="https://github.com/julianshapiro/velocity" target="_blank">Velocity</a>,<a href="https://github.com/mrdoob/three.js/" target="_blank">Three.js</a>,<a href="https://github.com/juliangarnier/anime" target="_blank">Anime.js</a>等，</p>
</blockquote>
<p>感兴趣的可以去<a href="https://www.zhangxinxu.com/study/201612/how-to-use-tween-js.html" target="_blank">张鑫旭大佬的博客</a>看看</p>
<h4 id="匀速运动函数"><a href="#匀速运动函数" class="headerlink" title="匀速运动函数"></a>匀速运动函数</h4><p>我们可以思考一下，如何使用JavaScript让物体动起来，并且是匀速运动呢？<br>css中有<code>transition</code>属性，相当于给了物体一个速度函数（就是上图的曲线）；而在Js中，我可以使用定时器<code>setInterval</code>，实现动画的原理类似于关键帧，<br>大家应该都听说过“24格电影”，即电影每一秒的画面是由24张图片组成，又因为人眼的视觉残留，就形成了连续的画面，<br>所以，我们需要把一大段距离分成24块，每1/24秒移动一块，这样就形成了动画效果，<br>当然，这个值不一定是“24”，就像在电影中，帧数低可以做成定格，帧数高可以是慢镜头。</p>
<p><font size=4><strong>匀速运动函数特点：</strong></font></p>
<ul>
<li>step为“步子”，即每15毫秒，盒子向右移动5px，直到600px为止</li>
<li>current为“当前”，即盒子的当前位置，每15毫秒增加5px</li>
<li>事件一开始马上清除定时器，如果不清除，相当于每点击一次，就调用一次定时器，盒子移动速度会越来越快</li>
</ul>
<p><img src="https://s2.ax1x.com/2020/01/13/l7JaND.png" alt="l7JaND.png"><br><font size=4><strong>示例代码：</strong></font></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- css部分 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        * &#123;</span><br><span class="line">            margin: 0;</span><br><span class="line">            padding: 0;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-id">#box</span> &#123;</span></span><br><span class="line">            width: 100px;</span><br><span class="line">            height: 100px;</span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>: <span class="selector-id">#58bc58</span>;</span></span><br><span class="line">            position: absolute;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- html部分 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn"</span>&gt;</span>移动<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- JavaScript部分 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">'btn'</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> box = <span class="built_in">document</span>.getElementById(<span class="string">'box'</span>);</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> timer = <span class="literal">null</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">        btn.onclick = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"></span><br><span class="line">            /*事件一开始马上清除定时器，</span><br><span class="line">            如果不清除，相当于每点击一次，就调用一次定时器，盒子移动速度就会越来越快的效果*/</span><br><span class="line">            clearInterval(timer);</span><br><span class="line"><span class="actionscript">            timer = setInterval(<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">                <span class="comment">// step（步子），即每一步要移动的距离</span></span></span><br><span class="line"><span class="actionscript">                <span class="keyword">var</span> step = <span class="number">5</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">                <span class="comment">// 定义一个当前位置 current</span></span></span><br><span class="line"><span class="actionscript">                <span class="keyword">var</span> current = box.offsetLeft;</span></span><br><span class="line">                /*</span><br><span class="line">                    当盒子还没到达目的地（600px），执行定时器</span><br><span class="line">                    达到目的地后，清除定时器让盒子停下来</span><br><span class="line">                */</span><br><span class="line">                if (current &lt; 600) &#123;</span><br><span class="line"><span class="actionscript">                    <span class="comment">// 每次执行定时器，让盒子从当前位置（current）移动一步（step）的距离</span></span></span><br><span class="line">                    current = current + step;</span><br><span class="line"><span class="actionscript">                    <span class="comment">// 将距离赋值给box</span></span></span><br><span class="line"><span class="actionscript">                    box.style.left = current + <span class="string">"px"</span>;</span></span><br><span class="line"><span class="actionscript">                &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line">                    clearInterval(timer);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, 15);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
<p><font size=3><strong>效果图：</strong></font><br><img src="https://s2.ax1x.com/2020/01/13/l782sP.gif" alt="l782sP.gif"></p>
<p>既然是一个函数，为了使用方便就需要封装起来，我们把这个函数优化后封装起来，</p>
<p><font size=4><strong>完整的匀速运动函数：</strong></font></p>
<ul>
<li>其他特征与前面函数的相同</li>
<li>target为“目标”，即最后的目的地，类似于盒子的<code>offsetLeft</code>，以左边框为基准线</li>
<li>正负的判断：<br>假如我们现在已经到100px的位置了，而目标距离变成50px，我们就需要把step设置为负数，即往回走</li>
<li>最后的距离：<br>我们需要在最后进行一个判断，当“现在的距离”离“目标距离”还差一步多一丢丢，我们就走出这一步，再把“现在的距离”直接设置为“目标距离”，<br>比如目标是100px，我们现在到88px了，而一步只能走11px，我们就再走一步达到99px，最后1px咱不走了，直接开挂瞬移过去</li>
</ul>
<p><img src="https://s2.ax1x.com/2020/01/13/l7HzA1.png" alt="l7HzA1.png"><br><font size=4><strong>示例代码：</strong></font></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    /* css部分 */</span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        * &#123;</span><br><span class="line">            margin: 0;</span><br><span class="line">            padding: 0;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-id">#box</span> &#123;</span></span><br><span class="line">            width: 100px;</span><br><span class="line">            height: 100px;</span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>: <span class="selector-id">#58bc58</span>;</span></span><br><span class="line">            position: absolute;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- html 部分 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn1"</span>&gt;</span>移动至600<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn2"</span>&gt;</span>移动至900<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- js 部分 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> btn1 = <span class="built_in">document</span>.getElementById(<span class="string">'btn1'</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> btn2 = <span class="built_in">document</span>.getElementById(<span class="string">'btn2'</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> box = <span class="built_in">document</span>.getElementById(<span class="string">'box'</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="function"><span class="keyword">function</span> <span class="title">animate</span><span class="params">(element, target, num)</span> </span>&#123;</span></span><br><span class="line">            clearInterval(element.timer);</span><br><span class="line"><span class="actionscript">            element.timer = setInterval(<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">var</span> current = element.offsetLeft;</span></span><br><span class="line"><span class="actionscript">                <span class="comment">// 判断每次走的距离，当目标距离大于当前位置，step为正，否则为负</span></span></span><br><span class="line"><span class="actionscript">                <span class="keyword">var</span> step = target &gt; current ? num : -num;</span></span><br><span class="line"><span class="actionscript">                <span class="comment">// 此时的距离-目标距离的差的绝对值</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> distance = <span class="built_in">Math</span>.abs(target - current);</span></span><br><span class="line"><span class="actionscript">                <span class="comment">// 如果差大于或者等于一步的距离step的时候，就继续走</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">if</span> (distance &gt;= <span class="built_in">Math</span>.abs(step)) &#123;</span></span><br><span class="line">                    current = current + step;</span><br><span class="line"><span class="actionscript">                    element.style.left = current + <span class="string">"px"</span>;</span></span><br><span class="line"><span class="actionscript">                &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="actionscript">                    <span class="comment">// 如果差小于一步的距离step的时候，就停止，并且将最后的距离设置为target的距离</span></span></span><br><span class="line">                    clearInterval(element.timer);</span><br><span class="line"><span class="actionscript">                    element.style.left = target + <span class="string">"px"</span>;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, 15);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"><span class="actionscript">        btn1.onclick = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line">            animate(box, 300, 9);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">        btn2.onclick = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line">            animate(box, 600, 5);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
<p><font size=3><strong>效果图：</strong></font></p>
<p><img src="https://s2.ax1x.com/2020/01/13/l7OmNR.gif" alt="l7OmNR.gif"><br><code>animate(element, target, num)</code>函数封装完成了，其中有三个变量：</p>
<ul>
<li><code>element</code>是需要运动的元素</li>
<li><code>target</code>是目的地</li>
<li><code>num</code>是step（步子）</li>
</ul>
<p>从案例中可以发现，“移动至300”时的step=9，比后面的“移动至600”的step=5大，所以速度也更快；接下来我们就用这个函数来试试吧！</p>
<p><font size=4><strong>示例代码：</strong></font></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    /* css部分 */</span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        * &#123;</span><br><span class="line">            margin: 0;</span><br><span class="line">            padding: 0;</span><br><span class="line">            list-style: none;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.box</span> &#123;</span></span><br><span class="line">            width: 500px;</span><br><span class="line">            height: 280px;</span><br><span class="line">            position: relative;</span><br><span class="line">            overflow: hidden;</span><br><span class="line"></span><br><span class="line">            margin: 200px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.box</span> <span class="selector-tag">ul</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="comment">/* 因为是5张图，所以大盒子的宽度为500px*6 */</span></span></span><br><span class="line">            width: 3000px;</span><br><span class="line">            position: absolute;</span><br><span class="line">            margin-left: 0px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.box</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> &#123;</span></span><br><span class="line">            float: left;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.box</span> <span class="selector-tag">ul</span> <span class="selector-tag">img</span> &#123;</span></span><br><span class="line">            width: 500px;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- html部分 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"ul"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">"img"</span> <span class="attr">src</span>=<span class="string">"images/pic1.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">"img"</span> <span class="attr">src</span>=<span class="string">"images/pic2.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">"img"</span> <span class="attr">src</span>=<span class="string">"images/pic3.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">"img"</span> <span class="attr">src</span>=<span class="string">"images/pic4.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">"img"</span> <span class="attr">src</span>=<span class="string">"images/pic5.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">"img"</span> <span class="attr">src</span>=<span class="string">"images/pic1.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- JavaScript部分 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> ul = <span class="built_in">document</span>.getElementById(<span class="string">"ul"</span>)</span></span><br><span class="line">        animate(ul, -2500, 6)</span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="function"><span class="keyword">function</span> <span class="title">animate</span><span class="params">(element, target, num)</span> </span>&#123;</span></span><br><span class="line">            clearInterval(element.timer);</span><br><span class="line"><span class="actionscript">            element.timer = setInterval(<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">var</span> current = element.offsetLeft;</span></span><br><span class="line"><span class="actionscript">                <span class="comment">// 判断每次走的距离，当目标距离大于当前位置，step为正，否则为负</span></span></span><br><span class="line"><span class="actionscript">                <span class="keyword">var</span> step = target &gt; current ? num : -num;</span></span><br><span class="line"><span class="actionscript">                <span class="comment">// 此时的距离-目标距离的差的绝对值</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> distance = <span class="built_in">Math</span>.abs(target - current);</span></span><br><span class="line"><span class="actionscript">                <span class="comment">// 如果差大于或者等于一步的距离step的时候，就继续走</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">if</span> (distance &gt;= <span class="built_in">Math</span>.abs(step)) &#123;</span></span><br><span class="line">                    current = current + step;</span><br><span class="line"><span class="actionscript">                    element.style.left = current + <span class="string">"px"</span>;</span></span><br><span class="line"><span class="actionscript">                &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="actionscript">                    <span class="comment">// 如果差小于一步的距离step的时候，说明播到最后一张图了，这时候把left值重置</span></span></span><br><span class="line"><span class="actionscript">                    element.style.left = <span class="number">0</span> + <span class="string">"px"</span>;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, 15);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
<p><font size=3><strong>效果图：</strong></font></p>
<p><img src="https://s2.ax1x.com/2020/01/13/lH6cid.gif" alt="lH6cid.gif"><br>哇哦，如丝般顺滑，并且我们只用了两行代码！！（把动画函数放到常用函数js文件里的话）。<br>有一点需要注意，动画函数应用这类轮播图上时，最后一行改成了<code>element.style.left = 0 + &quot;px&quot;</code>（后面就不需要了，因为图片不会是匀速运动），即播到最后一张图时重置left值，此时因为<code>ul:transition</code>一直为0，所以图片不会有倒放的动画；<br>另外，因为step=6，所以实际上ul的终点为-2496px而不是-2500px，但你们人类是无法察觉到这15毫秒4px的区别哒！</p>
<p><img src="https://s2.ax1x.com/2020/01/13/lH2qWd.jpg" alt="lH2qWd.jpg"><br>但是网站上的轮播图，不会一直播放，而是会有停顿，一般还会有左右切换按钮，和下面一排切换小圆点，接下来我们把这两个功能也实现了。注意最后一行要改回来。</p>
<p><font size=4><strong>完整的匀速运动函数：</strong></font></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">animate</span>(<span class="params">element, target, num</span>) </span>&#123;</span><br><span class="line">    clearInterval(element.timer);</span><br><span class="line"></span><br><span class="line">    element.timer = setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> leader = element.offsetLeft;</span><br><span class="line">        <span class="keyword">var</span> step = target &gt; leader ? num : -num;</span><br><span class="line">        <span class="keyword">var</span> distance = <span class="built_in">Math</span>.abs(target - leader);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (distance &gt;= <span class="built_in">Math</span>.abs(step)) &#123;</span><br><span class="line">            leader = leader + step;</span><br><span class="line">            element.style.left = leader + <span class="string">"px"</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            clearInterval(element.timer);</span><br><span class="line">            element.style.left = target + <span class="string">"px"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, <span class="number">15</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h2 id="五、左右切换的轮播图"><a href="#五、左右切换的轮播图" class="headerlink" title="五、左右切换的轮播图"></a>五、左右切换的轮播图</h2><p><font size=4><strong>特点：</strong></font></p>
<ul>
<li>点击箭头切换图片</li>
<li><code>js/utils.js</code>里面装的是<code>animate()</code>函数</li>
<li>这里<code>animate()</code>函数仅用来使ul移动，类似于之前<code>margin-left</code>的作用</li>
<li><code>&amp;lt;</code>（&lt;）和<code>&amp;gt;</code>（&gt;）是HTML Character Entities（HTML字符实体），之前在<a href="https://stackoverflow.com/questions/5068951/what-do-lt-and-gt-stand-for" target="_blank">stackOverflow</a>看到后就把样式一起记下来了，后来查找<a href="https://www.w3schools.com/HTML/html_entities.asp" target="_blank" rel="noopener">w3scchools</a>，是这么解释的：</li>
</ul>
<blockquote>
<p>Some characters are reserved in HTML.<br>If you use the less than (&lt;) or greater than (&gt;) signs in your text, the browser might mix them with tags.<br>Character entities are used to display reserved characters in HTML.</p>
</blockquote>
<p>类似的还有：</p>
<table>
<thead>
<tr>
<th>符号</th>
<th>描述</th>
<th align="right">字符名称</th>
<th align="center">字符序号</th>
</tr>
</thead>
<tbody><tr>
<td>‘空格’</td>
<td>non-breaking space</td>
<td align="right">&amp;nbsp;</td>
<td align="center">&amp;#160;</td>
</tr>
<tr>
<td>&lt;</td>
<td>less than</td>
<td align="right">&amp;lt;</td>
<td align="center">&amp;#60;</td>
</tr>
<tr>
<td>&gt;</td>
<td>greater than</td>
<td align="right">&amp;gt;</td>
<td align="center">&amp;#62;</td>
</tr>
<tr>
<td>&amp;</td>
<td>ampersand</td>
<td align="right">&amp;amp;</td>
<td align="center">&amp;#38;</td>
</tr>
<tr>
<td>“</td>
<td>double quotation mark</td>
<td align="right">&amp;quot;</td>
<td align="center">&amp;#34;</td>
</tr>
<tr>
<td>‘</td>
<td>single quotation mark (apostrophe)</td>
<td align="right">&amp;apos;</td>
<td align="center">&amp;#39;</td>
</tr>
<tr>
<td>¥</td>
<td>yen</td>
<td align="right">&amp;yen;</td>
<td align="center">&amp;#165;</td>
</tr>
<tr>
<td>©</td>
<td>copyright</td>
<td align="right">&amp;copy;</td>
<td align="center">&amp;#169;</td>
</tr>
<tr>
<td>®</td>
<td>registered trademark</td>
<td align="right">&amp;reg;</td>
<td align="center">&amp;#174;</td>
</tr>
</tbody></table>
<p><font size=4><strong>示例代码：</strong></font></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 样式部分 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        * &#123;</span><br><span class="line">            margin: 0;</span><br><span class="line">            padding: 0;</span><br><span class="line">            list-style: none;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-id">#box</span> &#123;</span></span><br><span class="line">            width: 500px;</span><br><span class="line">            height: 280px;</span><br><span class="line">            position: relative;</span><br><span class="line">            overflow: hidden;</span><br><span class="line">            margin: 200px auto;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-id">#box</span> <span class="selector-tag">ul</span> &#123;</span></span><br><span class="line">            width: 3000px;</span><br><span class="line">            position: absolute;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-id">#box</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> &#123;</span></span><br><span class="line">            float: left;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-id">#box</span> <span class="selector-tag">ul</span> <span class="selector-tag">img</span> &#123;</span></span><br><span class="line">            display: block;</span><br><span class="line">            width: 500px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-id">#box</span> <span class="selector-id">#arrow</span> &#123;</span></span><br><span class="line">            display: none;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-id">#box</span> <span class="selector-id">#arrow</span> <span class="selector-id">#leftTap</span>,</span></span><br><span class="line"><span class="css">        <span class="selector-id">#box</span> <span class="selector-id">#arrow</span> <span class="selector-id">#rightTap</span> &#123;</span></span><br><span class="line">            width: 30px;</span><br><span class="line">            height: 60px;</span><br><span class="line">            position: absolute;</span><br><span class="line">            top: 50%;</span><br><span class="line">            transform: translateY(-50%);</span><br><span class="line">            text-decoration: none;</span><br><span class="line"><span class="css">            <span class="selector-tag">color</span>: <span class="selector-id">#fff</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>: <span class="selector-tag">rgba</span>(255, 255, 2550, 0<span class="selector-class">.3</span>);</span></span><br><span class="line"><span class="css">            <span class="comment">/* 设置左右箭头，在其它地方看到的 */</span></span></span><br><span class="line">            text-align: center;</span><br><span class="line">            font: 700 24px/60px "宋体";</span><br><span class="line">            cursor: pointer;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-id">#box</span> <span class="selector-id">#arrow</span> <span class="selector-id">#leftTap</span> &#123;</span></span><br><span class="line">            left: 0;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-id">#box</span> <span class="selector-id">#arrow</span> <span class="selector-id">#rightTap</span> &#123;</span></span><br><span class="line">            right: 0;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- html 部分--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"ul"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">"img"</span> <span class="attr">src</span>=<span class="string">"images/pic1.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">"img"</span> <span class="attr">src</span>=<span class="string">"images/pic2.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">"img"</span> <span class="attr">src</span>=<span class="string">"images/pic3.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">"img"</span> <span class="attr">src</span>=<span class="string">"images/pic4.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">"img"</span> <span class="attr">src</span>=<span class="string">"images/pic5.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">"img"</span> <span class="attr">src</span>=<span class="string">"images/pic1.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"arrow"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">"leftTap"</span>&gt;</span><span class="symbol">&amp;lt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">"rightTap"</span>&gt;</span><span class="symbol">&amp;gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- js 部分 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/utils.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 获取元素</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> box = <span class="built_in">document</span>.getElementById(<span class="string">'box'</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> ul = <span class="built_in">document</span>.getElementById(<span class="string">'ul'</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> li = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'li'</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> arrow = <span class="built_in">document</span>.getElementById(<span class="string">'arrow'</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> leftArr = <span class="built_in">document</span>.getElementById(<span class="string">"leftTap"</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> rightArr = <span class="built_in">document</span>.getElementById(<span class="string">"rightTap"</span>);</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 获取图片的宽度</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> picWidth = box.offsetWidth;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="comment">// 给box绑定鼠标事件，经过时显示箭头，移开时隐藏箭头</span></span></span><br><span class="line"><span class="actionscript">        box.onmouseover = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">            arrow.style.display = <span class="string">"block"</span>;</span></span><br><span class="line">        &#125;;</span><br><span class="line"><span class="actionscript">        box.onmouseout = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">            arrow.style.display = <span class="string">"none"</span>;</span></span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> index = <span class="number">0</span>;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 点击右箭头时，</span></span></span><br><span class="line"><span class="actionscript">        rightTap.onclick = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="comment">// 当向右移动到最后一张时，换成第一张</span></span></span><br><span class="line">            if (index == li.length - 1) &#123;</span><br><span class="line">                index = 0;</span><br><span class="line">                ul.style.left = 0;</span><br><span class="line">            &#125;</span><br><span class="line">            index++;</span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> target = -index * picWidth;</span></span><br><span class="line">            animate(ul, target, 30);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="actionscript">        leftTap.onclick = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="comment">// 当向左移动到第一张时，换成最后一张张</span></span></span><br><span class="line">            if (index == 0) &#123;</span><br><span class="line">                index = li.length - 1;</span><br><span class="line"><span class="actionscript">                ul.style.left = -index * picWidth + <span class="string">"px"</span>;</span></span><br><span class="line">            &#125;</span><br><span class="line">            index--;</span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> target = -index * picWidth;</span></span><br><span class="line">            animate(ul, target, 30);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
<p><font size=3><strong>效果图：</strong></font></p>
<p><img src="https://s2.ax1x.com/2020/01/13/lHLVCq.gif" alt="lHLVCq.gif"></p>
<p>这样一个可以左右流畅切换的轮播图就完成了，我们直接在最后加上三行代码：<br><code>timer = setInterval(function () {
            rightTap.onclick();
        }, 1000);</code><br>另其隔一段时间点击一次按钮，就实现自动切换了，把<code>rightTap</code>换成<code>leftTap</code>即可以向左切换；<br>下面的图箭头还在，只是隐藏了：<br><font size=3><strong>效果图：</strong></font></p>
<p><img src="https://s2.ax1x.com/2020/01/13/lHX4Cn.gif" alt="lHX4Cn.gif"></p>
<h2 id="六、小圆点切换的轮播图"><a href="#六、小圆点切换的轮播图" class="headerlink" title="六、小圆点切换的轮播图"></a>六、小圆点切换的轮播图</h2><p><font size=4><strong>特点：</strong></font></p>
<ul>
<li>循环遍历小圆点并取得其索引值，大盒子根据这个索引值来移动</li>
<li>点击小圆点时，利用排他思想改变样式</li>
</ul>
<p><font size=4><strong>示例代码：</strong></font></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        * &#123;</span><br><span class="line">            margin: 0;</span><br><span class="line">            padding: 0;</span><br><span class="line">            list-style: none;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-id">#box</span> &#123;</span></span><br><span class="line">            width: 500px;</span><br><span class="line">            height: 280px;</span><br><span class="line">            position: relative;</span><br><span class="line">            overflow: hidden;</span><br><span class="line">            margin: 200px auto;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-id">#box</span> <span class="selector-id">#ul</span> &#123;</span></span><br><span class="line">            width: 3000px;</span><br><span class="line">            position: absolute;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-id">#box</span> <span class="selector-id">#ul</span> <span class="selector-tag">li</span> &#123;</span></span><br><span class="line">            float: left;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-id">#box</span> <span class="selector-id">#ul</span> <span class="selector-tag">img</span> &#123;</span></span><br><span class="line">            display: block;</span><br><span class="line">            width: 500px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="comment">/* 小圆点的样式 */</span></span></span><br><span class="line"><span class="css">        <span class="selector-id">#box</span> <span class="selector-id">#ul2</span> &#123;</span></span><br><span class="line">            width: 100px;</span><br><span class="line"><span class="css">            <span class="comment">/* 另装点小点的大盒子居中 */</span></span></span><br><span class="line">            position: absolute;</span><br><span class="line">            bottom: 14px;</span><br><span class="line">            left: 50%;</span><br><span class="line">            margin-left: -50px;</span><br><span class="line"><span class="css">            <span class="comment">/* 另小圆点横向排列并居中 */</span></span></span><br><span class="line">            display: grid;</span><br><span class="line">            grid-template-columns: repeat(5, 20%);</span><br><span class="line">            place-items: center;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-id">#box</span> <span class="selector-id">#ul2</span> <span class="selector-tag">li</span> &#123;</span></span><br><span class="line">            width: 10px;</span><br><span class="line">            height: 10px;</span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>: <span class="selector-id">#fff</span>;</span></span><br><span class="line">            border-radius: 50%;</span><br><span class="line">            cursor: pointer;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-id">#box</span> <span class="selector-id">#ul2</span> <span class="selector-tag">li</span><span class="selector-class">.active</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>: <span class="selector-id">#58bc58</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- html 部分 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"ul"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">"img"</span> <span class="attr">src</span>=<span class="string">"images/pic1.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">"img"</span> <span class="attr">src</span>=<span class="string">"images/pic2.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">"img"</span> <span class="attr">src</span>=<span class="string">"images/pic3.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">"img"</span> <span class="attr">src</span>=<span class="string">"images/pic4.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">"img"</span> <span class="attr">src</span>=<span class="string">"images/pic5.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">"img"</span> <span class="attr">src</span>=<span class="string">"images/pic1.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"ul2"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"active"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- js 部分 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/utils.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> box = <span class="built_in">document</span>.getElementById(<span class="string">'box'</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> ul = <span class="built_in">document</span>.getElementById(<span class="string">'ul'</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> ul2 = <span class="built_in">document</span>.getElementById(<span class="string">'ul2'</span>);</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// lis为下面的小圆点</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> lis = ul2.children;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> picWidth = box.offsetWidth;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 循环遍历小圆点并取得其索引值</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; lis.length; i++) &#123;</span></span><br><span class="line">            lis[i].index = i;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">            <span class="comment">// 当点击小圆点时，利用排他思想增加样式</span></span></span><br><span class="line"><span class="actionscript">            lis[i].onclick = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; lis.length; i++) &#123;</span></span><br><span class="line"><span class="actionscript">                    <span class="comment">// 所有小圆点样式清空</span></span></span><br><span class="line"><span class="actionscript">                    lis[i].className = <span class="string">""</span>;</span></span><br><span class="line">                &#125;</span><br><span class="line"><span class="actionscript">                <span class="comment">// 点击的小圆点单独加上样式</span></span></span><br><span class="line"><span class="actionscript">                <span class="keyword">this</span>.className = <span class="string">"active"</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">                <span class="comment">// 大盒子根据索引值来移动</span></span></span><br><span class="line"><span class="actionscript">                <span class="keyword">var</span> target = -<span class="keyword">this</span>.index * picWidth;</span></span><br><span class="line">                animate(ul, target, 40);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p><font size=3><strong>效果图：</strong></font></p>
<p><img src="https://s2.ax1x.com/2020/01/13/lbP1CF.gif" alt="lbP1CF.gif"></p>
<h2 id="七、完整版轮播图"><a href="#七、完整版轮播图" class="headerlink" title="七、完整版轮播图"></a>七、完整版轮播图</h2><h4 id="特点："><a href="#特点：" class="headerlink" title="特点："></a>特点：</h4><ul>
<li><p>综合小圆点轮播和左右切换轮播图，基本上就是把代码整合在一起，但是还有几个bug需要解决</p>
</li>
<li><p>bug1：当轮播了一圈回到第一张时，点击第一个小圆点，会反方向轮播一圈。<br>原因：轮播了一圈回到第一张时，点开控制台查看<code>ul:margin-left</code>，会发现还是-2500px而不是0px，显示的其实是最后一张图（第一张图的克隆），此时点击第一个小圆点，会从最后一张（第一张的克隆）回到第一张；<br>对应下面示例代码的145-148行，删掉之后就会出现bug：</p>
</li>
<li><p>bug2：当点击小圆点跳转后，轮播会出现错误，<br>原因：当点击小圆点后，小圆点的index改变了，图片的index却还是点击前的值。小圆点和图片的index应该是一致的，所以我们需要在点击后小圆点后记录index值；<br>对应下面示例代码的155行，删掉之后就会出现bug：</p>
</li>
<li><p>bug3：当轮播了一圈后，第一个小圆点不会变色，<br>原因：图片有6张，小圆点只有5个。所以当播到最后一张图（第一张的克隆）时，直接让第一个小圆点点亮；<br>对应下面示例代码的179行，删掉之后就会出现bug：</p>
</li>
<li><p><code>(function(){})();</code>为自执行函数，主要用于隔离作用域</p>
<blockquote>
<ul>
<li>它可以帮你封装大量的工作而不会在背后遗留任何全局变量。</li>
<li>你定义的所有变量都会成员立即执行函数的局部变量，所以你不用担心这些临时变量会污染全局空间</li>
<li>可以使用这种技术可以模仿一个私有作用域，用匿名函数作为一个“容器”，“容器”内部可以访问外部的变量，而外部环境不能访问“容器”内部的变量</li>
<li>可以添加更多的加强模块，移除它们，单独测试它们，允许用户去禁用它们等等</li>
</ul>
</blockquote>
</li>
</ul>
<p><font size=4><strong>示例代码：</strong></font></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 样式部分 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        * &#123;</span><br><span class="line">            margin: 0;</span><br><span class="line">            padding: 0;</span><br><span class="line">            list-style: none;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-id">#box</span> &#123;</span></span><br><span class="line">            width: 500px;</span><br><span class="line">            height: 280px;</span><br><span class="line">            position: relative;</span><br><span class="line">            overflow: hidden;</span><br><span class="line">            margin: 200px auto;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-id">#box</span> <span class="selector-id">#ul</span> &#123;</span></span><br><span class="line">            width: 3000px;</span><br><span class="line">            position: absolute;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-id">#box</span> <span class="selector-id">#ul</span> <span class="selector-tag">li</span> &#123;</span></span><br><span class="line">            float: left;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-id">#box</span> <span class="selector-id">#ul</span> <span class="selector-tag">img</span> &#123;</span></span><br><span class="line">            display: block;</span><br><span class="line">            width: 500px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="comment">/* 左右箭头样式 */</span></span></span><br><span class="line"><span class="css">        <span class="selector-id">#box</span> <span class="selector-id">#arrow</span> &#123;</span></span><br><span class="line">            display: none;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-id">#box</span> <span class="selector-id">#arrow</span> <span class="selector-id">#leftTap</span>,</span></span><br><span class="line"><span class="css">        <span class="selector-id">#box</span> <span class="selector-id">#arrow</span> <span class="selector-id">#rightTap</span> &#123;</span></span><br><span class="line">            width: 30px;</span><br><span class="line">            height: 60px;</span><br><span class="line">            position: absolute;</span><br><span class="line">            top: 50%;</span><br><span class="line">            transform: translateY(-50%);</span><br><span class="line">            text-decoration: none;</span><br><span class="line"><span class="css">            <span class="selector-tag">color</span>: <span class="selector-id">#fff</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>: <span class="selector-tag">rgba</span>(255, 255, 2550, 0<span class="selector-class">.3</span>);</span></span><br><span class="line"><span class="css">            <span class="comment">/* 设置左右箭头，在其它地方看到的 */</span></span></span><br><span class="line">            text-align: center;</span><br><span class="line">            font: 700 24px/60px "宋体";</span><br><span class="line">            cursor: pointer;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-id">#box</span> <span class="selector-id">#arrow</span> <span class="selector-id">#leftTap</span> &#123;</span></span><br><span class="line">            left: 0;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-id">#box</span> <span class="selector-id">#arrow</span> <span class="selector-id">#rightTap</span> &#123;</span></span><br><span class="line">            right: 0;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="comment">/* 小圆点的样式 */</span></span></span><br><span class="line"><span class="css">        <span class="selector-id">#box</span> <span class="selector-id">#ul2</span> &#123;</span></span><br><span class="line">            width: 100px;</span><br><span class="line"><span class="css">            <span class="comment">/* 另装点小点的大盒子居中 */</span></span></span><br><span class="line">            position: absolute;</span><br><span class="line">            bottom: 14px;</span><br><span class="line">            left: 50%;</span><br><span class="line">            margin-left: -50px;</span><br><span class="line"><span class="css">            <span class="comment">/* 令小圆点横向排列并居中 */</span></span></span><br><span class="line">            display: grid;</span><br><span class="line">            grid-template-columns: repeat(5, 20%);</span><br><span class="line">            place-items: center;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-id">#box</span> <span class="selector-id">#ul2</span> <span class="selector-tag">li</span> &#123;</span></span><br><span class="line">            width: 10px;</span><br><span class="line">            height: 10px;</span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>: <span class="selector-id">#fff</span>;</span></span><br><span class="line">            border-radius: 50%;</span><br><span class="line">            cursor: pointer;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-id">#box</span> <span class="selector-id">#ul2</span> <span class="selector-tag">li</span><span class="selector-class">.active</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>: <span class="selector-id">#58bc58</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--html 部分--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"ul"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">"img"</span> <span class="attr">src</span>=<span class="string">"images/pic1.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">"img"</span> <span class="attr">src</span>=<span class="string">"images/pic2.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">"img"</span> <span class="attr">src</span>=<span class="string">"images/pic3.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">"img"</span> <span class="attr">src</span>=<span class="string">"images/pic4.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">"img"</span> <span class="attr">src</span>=<span class="string">"images/pic5.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">"img"</span> <span class="attr">src</span>=<span class="string">"images/pic1.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 左右箭头 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"arrow"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">"leftTap"</span>&gt;</span><span class="symbol">&amp;lt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">"rightTap"</span>&gt;</span><span class="symbol">&amp;gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 小圆点 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"ul2"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"active"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/utils.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">        (<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> box = <span class="built_in">document</span>.getElementById(<span class="string">'box'</span>);</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(box);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> ul = <span class="built_in">document</span>.getElementById(<span class="string">'ul'</span>)</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> imgLis = ul.children;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> arrow = <span class="built_in">document</span>.getElementById(<span class="string">'arrow'</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> leftTap = <span class="built_in">document</span>.getElementById(<span class="string">"leftTap"</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> rightTap = <span class="built_in">document</span>.getElementById(<span class="string">"rightTap"</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> ul2 = <span class="built_in">document</span>.getElementById(<span class="string">'ul2'</span>);</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> lis = ul2.children;</span></span><br><span class="line"><span class="actionscript">            <span class="comment">// 获取图片的宽度</span></span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> imgWidth = box.offsetWidth;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> timer = <span class="literal">null</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">            <span class="comment">// 点击小圆点改变对应图片，通过小圆点的index值改变</span></span></span><br><span class="line"><span class="actionscript">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; lis.length; i++) &#123;</span></span><br><span class="line">                lis[i].index = i;</span><br><span class="line"><span class="actionscript">                lis[i].onclick = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">                    <span class="comment">// 小圆点</span></span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; lis.length; i++) &#123;</span></span><br><span class="line"><span class="actionscript">                        lis[i].className = <span class="string">""</span>;</span></span><br><span class="line">                    &#125;</span><br><span class="line"><span class="actionscript">                    <span class="keyword">this</span>.className = <span class="string">"active"</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">                    <span class="comment">// 下面这段是解决bug1</span></span></span><br><span class="line"><span class="actionscript">                    <span class="comment">// 当轮播了一圈回到第一张时，点击第一个小圆点，会出现反方向轮播一圈的bug</span></span></span><br><span class="line">                    if (index == imgLis.length - 1) &#123;</span><br><span class="line">                        index = 0;</span><br><span class="line">                        ul.style.left = 0;</span><br><span class="line">                    &#125;</span><br><span class="line"><span class="actionscript">                    <span class="comment">// 图片移动</span></span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">var</span> target = -<span class="keyword">this</span>.index * imgWidth;</span></span><br><span class="line">                    animate(ul, target, 40);</span><br><span class="line"></span><br><span class="line"><span class="actionscript">                    <span class="comment">// bug2</span></span></span><br><span class="line"><span class="actionscript">                    <span class="comment">// 记录点击的小圆点的index值</span></span></span><br><span class="line"><span class="actionscript">                    index = <span class="keyword">this</span>.index;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">            <span class="comment">// 左右焦点轮播图</span></span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> index = <span class="number">0</span>; <span class="comment">// 跑出去的张数</span></span></span><br><span class="line"><span class="actionscript">            rightTap.onclick = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">                <span class="comment">// 当播到最后一张图时，换成第一张</span></span></span><br><span class="line">                if (index == imgLis.length - 1) &#123;</span><br><span class="line">                    index = 0;</span><br><span class="line">                    ul.style.left = 0;</span><br><span class="line">                &#125;</span><br><span class="line"><span class="actionscript">                <span class="comment">// 点击一次右箭头</span></span></span><br><span class="line">                index++;</span><br><span class="line"><span class="actionscript">                <span class="keyword">var</span> target = -index * imgWidth;</span></span><br><span class="line">                animate(ul, target, 40);</span><br><span class="line"></span><br><span class="line"><span class="actionscript">                <span class="comment">// 利用图片的index值改变小圆点</span></span></span><br><span class="line"><span class="actionscript">                <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; lis.length; i++) &#123;</span></span><br><span class="line"><span class="actionscript">                    lis[i].className = <span class="string">""</span>;</span></span><br><span class="line">                &#125;</span><br><span class="line"><span class="actionscript">                <span class="comment">// bug3</span></span></span><br><span class="line"><span class="actionscript">                <span class="comment">// 当index == 最后一张图片的下标的时候，直接让第一个小圆点亮</span></span></span><br><span class="line">                if (index == imgLis.length - 1) &#123;</span><br><span class="line"><span class="actionscript">                    lis[<span class="number">0</span>].className = <span class="string">"active"</span>;</span></span><br><span class="line"><span class="actionscript">                &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="actionscript">                    <span class="comment">// 否则其他的下标对应的小圆点高亮</span></span></span><br><span class="line"><span class="actionscript">                    lis[index].className = <span class="string">"active"</span>;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"><span class="actionscript">            leftTap.onclick = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">                <span class="comment">// 当向左移动到第一张时，换成最后一张</span></span></span><br><span class="line">                if (index == 0) &#123;</span><br><span class="line">                    index = imgLis.length - 1;</span><br><span class="line"><span class="actionscript">                    ul.style.left = -index * imgWidth + <span class="string">"px"</span>;</span></span><br><span class="line">                &#125;</span><br><span class="line"><span class="actionscript">                <span class="comment">// 点击一次左箭头</span></span></span><br><span class="line">                index--;</span><br><span class="line"><span class="actionscript">                <span class="keyword">var</span> target = -index * imgWidth;</span></span><br><span class="line">                animate(ul, target, 40);</span><br><span class="line"></span><br><span class="line"><span class="actionscript">                <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; lis.length; i++) &#123;</span></span><br><span class="line"><span class="actionscript">                    lis[i].className = <span class="string">""</span>;</span></span><br><span class="line">                &#125;</span><br><span class="line"><span class="actionscript">                lis[index].className = <span class="string">"active"</span>;</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">            <span class="comment">// 启动定时器，隔一段时间点击向右箭头</span></span></span><br><span class="line"><span class="actionscript">            timer = setInterval(<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line">                rightTap.onclick();</span><br><span class="line">            &#125;, 1500);</span><br><span class="line"></span><br><span class="line"><span class="actionscript">            <span class="comment">// 给box绑定鼠标事件，经过时显示箭头，并清除定时器</span></span></span><br><span class="line"><span class="actionscript">            box.onmouseover = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">                arrow.style.display = <span class="string">"block"</span>;</span></span><br><span class="line">                clearInterval(timer);</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">            <span class="comment">// 给box绑定鼠标事件，移出时隐藏箭头，重新开始定时器</span></span></span><br><span class="line"><span class="actionscript">            box.onmouseout = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">                arrow.style.display = <span class="string">"none"</span>;</span></span><br><span class="line"><span class="actionscript">                timer = setInterval(<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line">                    rightTap.onclick();</span><br><span class="line">                &#125;, 1500);</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">        &#125;)()</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p><font size=3><strong>效果图：</strong></font><br><img src="https://s2.ax1x.com/2020/01/14/lbIJqs.gif" alt="lbIJqs.gif"></p>
<h4 id="复杂的动画函数"><a href="#复杂的动画函数" class="headerlink" title="复杂的动画函数"></a>复杂的动画函数</h4><p>前面介绍了一个简单的匀速直线运动动画，接下来我们换一个高级一点的<br><code>moveAnimation(obj, json, fn)</code><br><font size=4><strong>特点：</strong></font></p>
<ul>
<li>判断step的正负，为正的时候，向上取整。为负的时候，向下取整。保证到达终点不会有偏差</li>
<li>通过假设法<code>var flag</code>判断是否应该停止定时器</li>
<li>通过<code>for in</code>遍历对象的属性，可以同时改变多个属性</li>
<li>添加了回调函数，可以依次执行改变属性的动作</li>
<li>兼容<code>z-index</code>和<code>opacity</code>属性，具体可以参考 <a href="https://blog.doyoe.com/2014/01/21/css/%E4%BD%A0%E9%9C%80%E8%A6%81%E4%BA%86%E8%A7%A3%E7%9A%84z-index%E4%B8%96%E7%95%8C/" target="_blank">doyoe的博客</a><blockquote>
<ul>
<li>当opacity值小于1时，该元素会创建新的局部层叠上下文，也就是说它可以和定位元素进行层叠层别比较</li>
<li>当opacity值小于1时，该元素拥有层叠级别且相当于z-index:0或auto，但不能定义 z-index ，除非本身是定位元素</li>
</ul>
</blockquote>
</li>
</ul>
<p><font size=4><strong>示例代码：</strong></font></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// （基本）完美的运动函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">moveAnimation</span>(<span class="params">obj, json, fn</span>) </span>&#123;</span><br><span class="line">    clearInterval(obj.timer);</span><br><span class="line">    obj.timer = setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> flag = <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">//判断是否停止定时器的条件，每隔30ms判断一次定时器是否应该停止</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> attr <span class="keyword">in</span> json) &#123;</span><br><span class="line">            <span class="keyword">var</span> current = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> (attr == <span class="string">"opacity"</span>) &#123;</span><br><span class="line">                current = <span class="built_in">parseInt</span>(getStyle(obj, attr) * <span class="number">100</span>) || <span class="number">0</span>; <span class="comment">// 处理IE中opacity的兼容性</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                current = <span class="built_in">parseInt</span>(getStyle(obj, attr));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">var</span> step = (json[attr] - current) / <span class="number">10</span>;</span><br><span class="line">            step = step &gt; <span class="number">0</span> ? <span class="built_in">Math</span>.ceil(step) : <span class="built_in">Math</span>.floor(step);</span><br><span class="line">            <span class="keyword">if</span> (attr == <span class="string">"opacity"</span>) &#123; <span class="comment">// 处理opacity的兼容性</span></span><br><span class="line">                <span class="keyword">if</span> (<span class="string">"opacity"</span> <span class="keyword">in</span> obj.style) &#123;</span><br><span class="line">                    obj.style[attr] = (current + step) / <span class="number">100</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    obj.style.filter = <span class="string">"alpha(opacity="</span> + (current + step) + <span class="string">")"</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (attr == <span class="string">"zIndex"</span>) &#123;</span><br><span class="line">                obj.style[attr] = json[attr]; <span class="comment">// 处理z-index的兼容性</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                obj.style[attr] = current + step + <span class="string">"px"</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (current != json[attr]) &#123;</span><br><span class="line">                flag = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">            clearInterval(obj.timer);</span><br><span class="line">            <span class="keyword">if</span> (fn) &#123;</span><br><span class="line">                fn(); <span class="comment">// 定时器停止后执行回调函数，可以让一个动画结束后再执行下一个</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, <span class="number">30</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getStyle</span>(<span class="params">obj, attr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (obj.currentStyle) &#123;</span><br><span class="line">        <span class="keyword">return</span> obj.currentStyle[attr];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">window</span>.getComputedStyle(obj, <span class="literal">null</span>)[attr];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><font size=4><strong>使用例子：</strong></font></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        * &#123;</span><br><span class="line">            margin: 0;</span><br><span class="line">            padding: 0;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-id">#btn</span> &#123;</span></span><br><span class="line">            cursor: pointer;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-id">#box</span> &#123;</span></span><br><span class="line">            width: 100px;</span><br><span class="line">            height: 100px;</span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>: <span class="selector-id">#58bc58</span>;</span></span><br><span class="line">            position: absolute;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn"</span>&gt;</span>点击<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/utils.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">'btn'</span>)</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> box = <span class="built_in">document</span>.getElementById(<span class="string">'box'</span>)</span></span><br><span class="line">            </span><br><span class="line"><span class="actionscript">            btn.onclick = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line">                moveAnimation(box, &#123;</span><br><span class="line">                    top: 200,</span><br><span class="line">                    left: 200,</span><br><span class="line"><span class="actionscript">                &#125;, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line">                    moveAnimation(box, &#123;</span><br><span class="line">                        width: 300,</span><br><span class="line">                        height: 150,</span><br><span class="line"><span class="actionscript">                    &#125;, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line">                        moveAnimation(box, &#123;</span><br><span class="line">                            borderRadius: 50,</span><br><span class="line">                        &#125;)</span><br><span class="line">                    &#125;)</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
<p><font size=3><strong>效果图：</strong></font><br><img src="https://s2.ax1x.com/2020/01/14/lq93tO.gif" alt="lq93tO.gif"></p>
<h2 id="八、手风琴轮播图"><a href="#八、手风琴轮播图" class="headerlink" title="八、手风琴轮播图"></a>八、手风琴轮播图</h2><p>虽然不会自动播放，但是看起来也很像轮播图…效果如下：</p>
<ul>
<li>布局和前面的一样，但是图片改为了背景，因为这次移动的不是ul，而是li了。</li>
<li>首先给ul相对定位，里面的li添加绝对定位，于是所有的li堆叠到一起了，就变成了下图：</li>
</ul>
<p><img src="https://s2.ax1x.com/2020/01/14/lqNbkt.png" alt="lqNbkt.png"></p>
<ul>
<li>接着通过<code>left</code>让图片分开，如下图</li>
</ul>
<p><img src="https://s2.ax1x.com/2020/01/14/lqU04P.png" alt="lqU04P.png"></p>
<ul>
<li>要实现这样的效果<br><img src="https://s2.ax1x.com/2020/01/14/lq0zod.png" alt="lq0zod.png"><br>如上图，绿色的是大盒子的<code>margin-left</code>黄色的是li的<code>margin-left</code>，我们可以观察到：<br>设定一个left最小值40px（任意取），最大值310px（任意取）；设定<code>lis[i].index = i</code>，则第一张图index为0，第二张图index为1，以此类推；</li>
<li><strong>当我们把鼠标移到第三张图片上时：</strong><br>第一张图：left0 = 0px   &nbsp;&nbsp;= index * 40<br>第二张图：left1 = 40px  &nbsp;= index * 40<br>第三张图：left2 = 80px  &nbsp;= index * 40<br>第四张图：left3 = 430px = index * 40 + 310<br>第五张图：left4 = 470px = index * 40 +310<br>我们可以观察到以上规律，即：我们鼠标移动到<code>lis[i]</code>上，<code>lis[i]</code>本身及前面的图片left值为“index*40”，<code>lis[i]</code>后面的图片left值为“index * 40 + 310”。<br>有了这个规律，我们就可以写出示例，</li>
</ul>
<p><font size=4><strong>示例代码：</strong></font></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- css部分 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        * &#123;</span><br><span class="line">            margin: 0;</span><br><span class="line">            padding: 0;</span><br><span class="line">            list-style: none;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-id">#box</span> &#123;</span></span><br><span class="line">            width: 500px;</span><br><span class="line">            height: 280px;</span><br><span class="line">            overflow: hidden;</span><br><span class="line">            margin: 200px auto;</span><br><span class="line">            position: relative;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-id">#box</span> <span class="selector-tag">li</span> &#123;</span></span><br><span class="line">            width: 500px;</span><br><span class="line">            height: 280px;</span><br><span class="line">            position: absolute;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-id">#box</span> <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child(4)</span> &#123;</span></span><br><span class="line">            background-color: red;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--html部分--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- JavaScript部分 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/utils.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> box = <span class="built_in">document</span>.getElementById(<span class="string">'box'</span>);</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> lis = box.getElementsByTagName(<span class="string">'li'</span>);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; lis.length; i++) &#123;</span></span><br><span class="line">            lis[i].index = i;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">            <span class="comment">// 动态给li添加背景图片</span></span></span><br><span class="line"><span class="javascript">            lis[i].style.background = <span class="string">`url(images/pic<span class="subst">$&#123;i+<span class="number">1</span>&#125;</span>.jpg) no-repeat`</span>;</span></span><br><span class="line"><span class="javascript">            lis[i].style.backgroundSize = <span class="string">`cover`</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">            <span class="comment">// 设置绝对定位后，li会堆叠在一起，设置left让他们分开</span></span></span><br><span class="line"><span class="actionscript">            lis[i].style.left = <span class="number">100</span> * i + <span class="string">"px"</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">            <span class="comment">// 注册鼠标经过事件， 让当前的显示宽度为350， 其余的为40</span></span></span><br><span class="line"><span class="actionscript">            lis[i].onmouseover = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; lis.length; i++) &#123;</span></span><br><span class="line"><span class="actionscript">                    <span class="comment">// 目标li左边的li，left值为30*i</span></span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">if</span> (i &lt;= <span class="keyword">this</span>.index) &#123;</span></span><br><span class="line">                        moveAnimation(lis[i], &#123;</span><br><span class="line">                            left: 40 * i</span><br><span class="line">                        &#125;);</span><br><span class="line"><span class="actionscript">                        <span class="comment">// 目标li右边的li，left值为30*i+任意值</span></span></span><br><span class="line"><span class="actionscript">                    &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line">                        moveAnimation(lis[i], &#123;</span><br><span class="line">                            left: 40 * i + 310</span><br><span class="line">                        &#125;);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">            <span class="comment">// 鼠标离开后，恢复到"设置left让他们分开"的状态</span></span></span><br><span class="line"><span class="actionscript">            lis[i].onmouseout = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; lis.length; i++) &#123;</span></span><br><span class="line">                    moveAnimation(lis[i], &#123;</span><br><span class="line">                        left: 100 * i</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
<p><font size=3><strong>效果图：</strong></font></p>
<p><img src="https://s2.ax1x.com/2020/01/14/lqsqtH.gif" alt="lqsqtH.gif"></p>
<h2 id="九、卡片式轮播图"><a href="#九、卡片式轮播图" class="headerlink" title="九、卡片式轮播图"></a>九、卡片式轮播图</h2><p>卡片式轮播图，原理与本文第五章的“左右切换轮播图”基本相同。但我也只是了解原理，没有深入研究优化，兼容等小bug啥的可能还有(⊙o⊙)…所以本章的代码也是最简单的那种…还有就是，这类轮播图一般会使中间的图片放大，以达到聚焦的效果，下次更新一定加上吧…</p>
<p><font size=4><strong>特点：</strong></font></p>
<ul>
<li>首先是结构，绿色框是可视区域，红色框是ul，ul里放着li；与之前不同的是,除了复制第一张到最后，还需要把最后两张复制到最前面，如下图</li>
</ul>
<p><img src="https://s2.ax1x.com/2020/01/14/lq7h36.png" alt="lq7h36.png"></p>
<ul>
<li>其他的基本一致，当播放到第二个绿色框时，重置ul的left值到第一个绿色框（即前面的：播放到最后一张时，偷偷换回第一张）</li>
</ul>
<p><font size=4><strong>示例代码：</strong></font></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- css部分 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        * &#123;</span><br><span class="line">            margin: 0;</span><br><span class="line">            padding: 0;</span><br><span class="line">            list-style: none;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-id">#box</span> &#123;</span></span><br><span class="line">            width: 1000px;</span><br><span class="line">            height: 280px;</span><br><span class="line">            position: relative;</span><br><span class="line">            overflow: hidden;</span><br><span class="line">            margin: 200px auto;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-id">#box</span> <span class="selector-tag">ul</span> &#123;</span></span><br><span class="line">            width: 4000px;</span><br><span class="line">            position: absolute;</span><br><span class="line">            left: -250px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-id">#box</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> &#123;</span></span><br><span class="line">            float: left;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-id">#box</span> <span class="selector-tag">ul</span> <span class="selector-tag">img</span> &#123;</span></span><br><span class="line">            display: block;</span><br><span class="line">            width: 500px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-id">#box</span> <span class="selector-id">#arrow</span> &#123;</span></span><br><span class="line">            display: none;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-id">#box</span> <span class="selector-id">#arrow</span> <span class="selector-id">#leftTap</span>,</span></span><br><span class="line"><span class="css">        <span class="selector-id">#box</span> <span class="selector-id">#arrow</span> <span class="selector-id">#rightTap</span> &#123;</span></span><br><span class="line">            width: 30px;</span><br><span class="line">            height: 60px;</span><br><span class="line">            position: absolute;</span><br><span class="line">            top: 50%;</span><br><span class="line">            transform: translateY(-50%);</span><br><span class="line">            text-decoration: none;</span><br><span class="line"><span class="css">            <span class="selector-tag">color</span>: <span class="selector-id">#fff</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>: <span class="selector-tag">rgba</span>(255, 255, 2550, 0<span class="selector-class">.3</span>);</span></span><br><span class="line"><span class="css">            <span class="comment">/* 设置左右箭头，在其它地方看到的 */</span></span></span><br><span class="line">            text-align: center;</span><br><span class="line">            font: 700 24px/60px "宋体";</span><br><span class="line">            cursor: pointer;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-id">#box</span> <span class="selector-id">#arrow</span> <span class="selector-id">#leftTap</span> &#123;</span></span><br><span class="line">            left: 0;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-id">#box</span> <span class="selector-id">#arrow</span> <span class="selector-id">#rightTap</span> &#123;</span></span><br><span class="line">            right: 0;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- html 部分--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"ul"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/pic4.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/pic5.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/pic1.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/pic2.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/pic3.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/pic4.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/pic5.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/pic1.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"arrow"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">"leftTap"</span>&gt;</span><span class="symbol">&amp;lt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">"rightTap"</span>&gt;</span><span class="symbol">&amp;gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- js 部分 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/utils.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 获取元素</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> box = <span class="built_in">document</span>.getElementById(<span class="string">'box'</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> ul = <span class="built_in">document</span>.getElementById(<span class="string">'ul'</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> li = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'li'</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> arrow = <span class="built_in">document</span>.getElementById(<span class="string">'arrow'</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> leftArr = <span class="built_in">document</span>.getElementById(<span class="string">"leftTap"</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> rightArr = <span class="built_in">document</span>.getElementById(<span class="string">"rightTap"</span>);</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 图片的宽度</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> picWidth = <span class="number">500</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="comment">// 给box绑定鼠标事件，经过时显示箭头，移开时隐藏箭头</span></span></span><br><span class="line"><span class="actionscript">        box.onmouseover = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">            arrow.style.display = <span class="string">"block"</span>;</span></span><br><span class="line">        &#125;;</span><br><span class="line"><span class="actionscript">        box.onmouseout = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">            arrow.style.display = <span class="string">"none"</span>;</span></span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> index = <span class="number">0</span>;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 点击右箭头时，</span></span></span><br><span class="line"><span class="actionscript">        rightTap.onclick = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="comment">// 当向右移动到第二个绿色框时，换成第一个框</span></span></span><br><span class="line">            if (index == li.length - 3) &#123;</span><br><span class="line">                index = 0;</span><br><span class="line"><span class="actionscript">                ul.style.left = <span class="number">-250</span> + <span class="string">"px"</span>;</span></span><br><span class="line">            &#125;</span><br><span class="line">            index++;</span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> target = -index * picWidth - <span class="number">250</span>;</span></span><br><span class="line">            animate(ul, target, 20);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">        leftTap.onclick = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="comment">// 当向左移动到第一个绿色框时，换成第二个框</span></span></span><br><span class="line">            if (index == 0) &#123;</span><br><span class="line">                index = li.length - 3;</span><br><span class="line"><span class="actionscript">                ul.style.left = -index * picWidth - <span class="number">250</span> + <span class="string">"px"</span>;</span></span><br><span class="line">            &#125;</span><br><span class="line">            index--;</span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> target = -index * picWidth - <span class="number">250</span>;</span></span><br><span class="line">            animate(ul, target, 20);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">        timer = setInterval(<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line">            rightTap.onclick();</span><br><span class="line">        &#125;, 1000);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
<p><font size=3><strong>效果图：</strong></font></p>
<p><img src="https://s2.ax1x.com/2020/01/14/lqqGnO.gif" alt="lqqGnO.gif"></p>
<h2 id="十、旋转木马式轮播图"><a href="#十、旋转木马式轮播图" class="headerlink" title="十、旋转木马式轮播图"></a>十、旋转木马式轮播图</h2><p>其实我还没怎么看，看起来还挺炫的，但是哪里能用得上啊…这么大一块(⊙o⊙)<br><font size=4><strong>特点：</strong></font></p>
<ul>
<li>结构与前面的“完整轮播图相似”，主要是用到本文第七章-第二小节的“复杂运动函数”，可以同时改变位置和透明度</li>
<li>先将上面的每个参数以对象的方式存到数组datas中</li>
<li>点击右按钮的时候，将datas里的最后一项利用pop删除掉，通过return获取这个删除的数据，再将这个数据unshift到数组的最前面。重新遍历数组，执行一遍动画</li>
<li>点击左箭头的时候，将datas里的最前面一项利用shift删除掉，通过return获取这个删除的数据，再将这个数据push到数组的最后面。重新遍历数组，执行一遍动画</li>
<li><code>var flag = true;</code>这判断相当于一个节流阀，加上之后，点一次按钮，图片的动画执行完才可以再次点击。</li>
</ul>
<p><font size=4><strong>示例代码：</strong></font></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- css部分 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        * &#123;</span><br><span class="line">            margin: 0;</span><br><span class="line">            padding: 0;</span><br><span class="line">            list-style: none;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.box</span> &#123;</span></span><br><span class="line">            width: 1200px;</span><br><span class="line">            margin: 200px auto;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.box1</span> &#123;</span></span><br><span class="line">            height: 340px;</span><br><span class="line">            position: relative;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.box1</span> <span class="selector-tag">li</span> &#123;</span></span><br><span class="line">            position: absolute;</span><br><span class="line">            left: 200px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        img &#123;</span><br><span class="line">            width: 100%;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.arrow</span> &#123;</span></span><br><span class="line">            opacity: 0;</span><br><span class="line">            position: relative;</span><br><span class="line">            z-index: 99;</span><br><span class="line">            top: 50%;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.arrow</span> <span class="selector-id">#left</span>,</span></span><br><span class="line"><span class="css">        <span class="selector-class">.arrow</span> <span class="selector-id">#right</span> &#123;</span></span><br><span class="line">            width: 40px;</span><br><span class="line">            height: 60px;</span><br><span class="line">            position: absolute;</span><br><span class="line">            top: 50%;</span><br><span class="line">            margin-top: -45px;</span><br><span class="line">            background-size: cover;</span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>: <span class="selector-id">#58bc58</span>;</span></span><br><span class="line">            text-align: center;</span><br><span class="line">            font: 100 24px/60px "宋体";</span><br><span class="line">            cursor: pointer;</span><br><span class="line">            color: white;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.arrow</span> <span class="selector-id">#right</span> &#123;</span></span><br><span class="line">            right: 0;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- html部分 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span> <span class="attr">id</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box1"</span> <span class="attr">id</span>=<span class="string">"box1"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/pic1.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/pic2.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/pic3.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/pic4.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/pic5.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"arrow"</span> <span class="attr">id</span>=<span class="string">"arrow"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"left"</span>&gt;</span><span class="symbol">&amp;lt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"right"</span>&gt;</span><span class="symbol">&amp;gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- js部分 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/utils.js"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 图片的位置与透明度等信息，存放在一个数组中</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> datas = [&#123;</span></span><br><span class="line"><span class="actionscript">                <span class="string">"width"</span>: <span class="number">300</span>,</span></span><br><span class="line"><span class="actionscript">                <span class="string">"top"</span>: <span class="number">-20</span>,</span></span><br><span class="line"><span class="actionscript">                <span class="string">"left"</span>: <span class="number">150</span>,</span></span><br><span class="line"><span class="actionscript">                <span class="string">"opacity"</span>: <span class="number">20</span>,</span></span><br><span class="line"><span class="actionscript">                <span class="string">"zIndex"</span>: <span class="number">2</span></span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line"><span class="actionscript">                <span class="string">"width"</span>: <span class="number">500</span>,</span></span><br><span class="line"><span class="actionscript">                <span class="string">"top"</span>: <span class="number">30</span>,</span></span><br><span class="line"><span class="actionscript">                <span class="string">"left"</span>: <span class="number">50</span>,</span></span><br><span class="line"><span class="actionscript">                <span class="string">"opacity"</span>: <span class="number">80</span>,</span></span><br><span class="line"><span class="actionscript">                <span class="string">"zIndex"</span>: <span class="number">3</span></span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line"><span class="actionscript">                <span class="string">"width"</span>: <span class="number">600</span>,</span></span><br><span class="line"><span class="actionscript">                <span class="string">"top"</span>: <span class="number">100</span>,</span></span><br><span class="line"><span class="actionscript">                <span class="string">"left"</span>: <span class="number">300</span>,</span></span><br><span class="line"><span class="actionscript">                <span class="string">"opacity"</span>: <span class="number">100</span>,</span></span><br><span class="line"><span class="actionscript">                <span class="string">"zIndex"</span>: <span class="number">4</span></span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line"><span class="actionscript">                <span class="string">"width"</span>: <span class="number">500</span>,</span></span><br><span class="line"><span class="actionscript">                <span class="string">"top"</span>: <span class="number">30</span>,</span></span><br><span class="line"><span class="actionscript">                <span class="string">"left"</span>: <span class="number">650</span>,</span></span><br><span class="line"><span class="actionscript">                <span class="string">"opacity"</span>: <span class="number">80</span>,</span></span><br><span class="line"><span class="actionscript">                <span class="string">"zIndex"</span>: <span class="number">3</span></span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line"><span class="actionscript">                <span class="string">"width"</span>: <span class="number">300</span>,</span></span><br><span class="line"><span class="actionscript">                <span class="string">"top"</span>: <span class="number">-20</span>,</span></span><br><span class="line"><span class="actionscript">                <span class="string">"left"</span>: <span class="number">750</span>,</span></span><br><span class="line"><span class="actionscript">                <span class="string">"opacity"</span>: <span class="number">20</span>,</span></span><br><span class="line"><span class="actionscript">                <span class="string">"zIndex"</span>: <span class="number">2</span></span></span><br><span class="line">            &#125;</span><br><span class="line">        ];</span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> box1 = <span class="built_in">document</span>.getElementById(<span class="string">'box1'</span>);</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> lis = box1.getElementsByTagName(<span class="string">'li'</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> arrow = <span class="built_in">document</span>.getElementById(<span class="string">'arrow'</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> left = <span class="built_in">document</span>.getElementById(<span class="string">'left'</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> right = <span class="built_in">document</span>.getElementById(<span class="string">'right'</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="comment">// 节流阀，用来防止多次点击</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> flag = <span class="literal">true</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="comment">// 将datas里的数据 动态添加进去</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; lis.length; i++) &#123;</span></span><br><span class="line">            moveAnimation(lis[i], datas[i]);</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="comment">// 点击右箭头的时候</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 利用数组的pop 和 unshift方法对数组datas进行操作</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// pop 会删除数组的最后一项，并且返回这一项。 unshift 会在数组的最前添加</span></span></span><br><span class="line"><span class="actionscript">        right.onclick = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"></span><br><span class="line">            if (flag) &#123;</span><br><span class="line"><span class="actionscript">                <span class="comment">// 令flag = false，再次点击的时候就不会进来</span></span></span><br><span class="line"><span class="actionscript">                flag = <span class="literal">false</span>;</span></span><br><span class="line">                datas.unshift(datas.pop());</span><br><span class="line"><span class="actionscript">                <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; lis.length; i++) &#123;</span></span><br><span class="line"><span class="actionscript">                    <span class="comment">// 点击一次就执行一次动画，即改变以下的值</span></span></span><br><span class="line">                    /*</span><br><span class="line">                        &#123;</span><br><span class="line"><span class="actionscript">                            <span class="string">"width"</span>: <span class="number">300</span>,</span></span><br><span class="line"><span class="actionscript">                            <span class="string">"top"</span>: <span class="number">-20</span>,</span></span><br><span class="line"><span class="actionscript">                            <span class="string">"left"</span>: <span class="number">150</span>,</span></span><br><span class="line"><span class="actionscript">                            <span class="string">"opacity"</span>: <span class="number">20</span>,</span></span><br><span class="line"><span class="actionscript">                            <span class="string">"zIndex"</span>: <span class="number">2</span></span></span><br><span class="line">                        &#125;</span><br><span class="line">                    */</span><br><span class="line"><span class="actionscript">                    moveAnimation(lis[i], datas[i], <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">                        <span class="comment">// 当动画执行完，也就是回调函数触发的时候，再将节流阀打开，这样就可以继续点击了</span></span></span><br><span class="line"><span class="actionscript">                        flag = <span class="literal">true</span>;</span></span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="comment">// 点击左箭头</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 利用数组的 shift 和 push方法对数组datas进行操作</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// shift 会删除数组的第一项，并且返回这一项。 push 会在数组的最后添加</span></span></span><br><span class="line"><span class="actionscript">        left.onclick = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line">            if (flag) &#123;</span><br><span class="line"><span class="actionscript">                flag = <span class="literal">false</span>;</span></span><br><span class="line">                datas.push(datas.shift());</span><br><span class="line"><span class="actionscript">                <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; lis.length; i++) &#123;</span></span><br><span class="line"><span class="actionscript">                    moveAnimation(lis[i], datas[i], <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">                        flag = <span class="literal">true</span>;</span></span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="comment">// 鼠标经过的时候 箭头显示</span></span></span><br><span class="line"><span class="actionscript">        box1.onmouseover = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line">            moveAnimation(arrow, &#123;</span><br><span class="line">                opacity: 100</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="comment">// 鼠标离开的时候 箭头隐藏</span></span></span><br><span class="line"><span class="actionscript">        box1.onmouseout = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line">            moveAnimation(arrow, &#123;</span><br><span class="line">                opacity: 0</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
<p><font size=3><strong>效果图：</strong></font></p>
<p><img src="https://s2.ax1x.com/2020/01/14/lLSr7V.gif" alt="lLSr7V.gif"></p>
<h2 id="十一、总结"><a href="#十一、总结" class="headerlink" title="十一、总结"></a>十一、总结</h2><p>轮播图说难也不难，说简单也不简单，但是确实包含了很多JavaScript的基础知识，所以第一篇就写的这个了。但还是有很多点没有研究透彻，这个博客也有很多地方需要优化，有错误的地方欢迎各位指出！<br><strong><center><font size=5>最后，感谢您的阅读！</font></center></strong></p>
<p><img src="https://s2.ax1x.com/2020/01/14/lL9IJO.png" alt="lL9IJO.png"></p>
]]></content>
      <categories>
        <category>javaScript</category>
      </categories>
  </entry>
  <entry>
    <title>git和github的使用</title>
    <url>/jackhuang-haohua.github.io/2019/03/30/2020-02-git%E5%92%8Cgithub/</url>
    <content><![CDATA[<h2 id="一、什么是git和github"><a href="#一、什么是git和github" class="headerlink" title="一、什么是git和github"></a>一、什么是git和github</h2><h3 id="git"><a href="#git" class="headerlink" title="git"></a>git</h3><ul>
<li>开源的分布式版本管理器，一个用来管理我们文件夹的”软件”</li>
<li>可以将代码托管到远程</li>
<li>可以进行版本的管理</li>
</ul>
<h3 id="github"><a href="#github" class="headerlink" title="github"></a>github</h3><ul>
<li>是一个远程的代码托管平台 / 代码仓库</li>
<li>依靠 git 进行代码的上传</li>
</ul>
<h2 id="二、git的使用"><a href="#二、git的使用" class="headerlink" title="二、git的使用"></a>二、git的使用</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ul>
<li>官网下载</li>
<li>检测：git –version</li>
</ul>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><ul>
<li>随便在一个地方，鼠标右键，点击<code>git bash here</code>；</li>
<li>输入指令<code>git config --global user.name &quot;你的名字&quot;</code>，设置名字，名字必须是英文字母；</li>
<li>输入指令<code>git config --global user.email &quot;你的邮箱&quot;</code>，设置邮箱；</li>
</ul>
<h3 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h3><table>
<thead>
<tr>
<th>指令</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>git init</td>
<td>初始化文件夹，生成.git文件，告诉git这个文件夹是一个仓库</td>
</tr>
<tr>
<td>git status</td>
<td>查看暂存区</td>
</tr>
<tr>
<td>git add 文件名</td>
<td>把文件添加到暂存区</td>
</tr>
<tr>
<td>git add 文件夹名称/</td>
<td>把文件夹添加到暂存区</td>
</tr>
<tr>
<td>git add –all</td>
<td>把所有文件夹添加到暂存区</td>
</tr>
<tr>
<td>git reset HEAD – 文件名</td>
<td>拉回单独一个文件到工作区</td>
</tr>
<tr>
<td>git reset HEAD – 文件夹名称/</td>
<td>拉回单独一个文件夹到工作区</td>
</tr>
<tr>
<td>git reset HEAD – .</td>
<td>拉回暂存区所有文件到工作区</td>
</tr>
<tr>
<td>git commit -m “本次版本的说明(中英文无所谓)”</td>
<td>把暂存区所有代码形成一个历史版本</td>
</tr>
<tr>
<td>git clone</td>
<td>克隆仓库</td>
</tr>
<tr>
<td>git log</td>
<td>查看当前已经形成的历史版本</td>
</tr>
<tr>
<td>git reset –hard ‘id’</td>
<td>回退历史版本，’id’即<code>git log</code>中，commit后面一串字符</td>
</tr>
</tbody></table>
<h2 id="三、上传github"><a href="#三、上传github" class="headerlink" title="三、上传github"></a>三、上传github</h2><p>假设我们现在有一个项目文件夹shop，里面有css、html、JavaScript等文件夹；</p>
<ul>
<li>注册github账号，点右上角 + 号，New repository新建仓库，必填项就一个仓库名字；</li>
<li>如下图，点击HTTPS，复制后面的链接；</li>
</ul>
<p><img src="https://s2.ax1x.com/2020/02/27/30s9P0.png" alt="30s9P0.png"></p>
<ul>
<li>在shop文件夹里，右键<code>Git Bash Here</code>；</li>
<li>输入指令<code>git init</code>，文件夹里多了个.git隐藏文件夹；</li>
<li><code>git remote add origin HTTPS</code>，HTTPS即为第二步中的链接，这里是添加仓库地址；</li>
<li><code>git add .</code>把所有文件转到’暂存区’；</li>
<li><code>git commit -m &quot;这里是你的描述&quot;</code>，把’暂存区’文件形成历史版本；</li>
<li><code>git push -u origin master</code>，上传仓库，origin即为之前存的仓库地址；</li>
<li>之后上传只需要<code>git push</code>;</li>
</ul>
<h2 id="四、git创建分支"><a href="#四、git创建分支" class="headerlink" title="四、git创建分支"></a>四、git创建分支</h2><p>分支方便团队协作，看起来比较抽象，其实试一下就知道怎么回事了；<br>我们git管理文件夹后，默认主分支为master，在<code>Git Bash Here</code>也可以看到后面的(master)；<br><strong>下面一步步来：</strong><br><strong>dev分支：</strong></p>
<ul>
<li><code>git branch dev</code>，创建master的dev分支</li>
<li>在dev分支里写代码</li>
</ul>
<p><strong>list分支：</strong></p>
<ul>
<li><code>git branch list</code>，创建dev的list分支</li>
<li>在list分支里写内容</li>
<li><code>git add .</code>加到到暂存区</li>
<li><code>git commit -m &quot;描述&quot;</code>，创建了历史版本，此时，list拥有dev的内容，dev没有list的内容 </li>
<li>小提示：<code>git branch -D list</code>，删除list分支</li>
</ul>
<p><strong>login分支：</strong></p>
<ul>
<li><code>git checkout dev</code>，转到dev分支</li>
<li><code>git branch login</code>，创建dev的login分支</li>
<li>在login分支里写内容</li>
<li><code>git add .</code></li>
<li><code>git commit -m &quot;描述&quot;</code>，此时，list和login同为dev的分支，但彼此的内容不相同</li>
</ul>
<p><strong>合并：</strong></p>
<ul>
<li><code>git checkout dev</code>，转到dev分支</li>
<li><code>git merge login</code>、<code>git merge list</code>，把login和list合并到dev身上</li>
<li><code>git checkout master</code>，转到master主分支</li>
<li><code>git merge dev</code>，合并到master主分支</li>
<li><code>git add .</code></li>
<li><code>git push</code>，上传到仓库</li>
</ul>
<p><strong>上传本地分支</strong><br><code>git push origin list</code>可以把本地分支推送到远程分支，一般主分支不允许普通员工更改<br><strong>删除本地分支</strong><br><code>git branch -d list</code>先转到master主分支再删除<br><strong>删除远程分支</strong><br><code>git push origin :list</code>先转到master分支，再执行命令删除</p>
<p>这么一来，master分支有dev，dev分支里有list和login，切换到分支再写代码，就不会混乱了。</p>
<h2 id="五、分支的命名规则"><a href="#五、分支的命名规则" class="headerlink" title="五、分支的命名规则"></a>五、分支的命名规则</h2><ul>
<li>‘master’是主分支，不接受代码上传只接受代码合并，一般只接收dev；</li>
<li>‘development / develop / dev’是主开发分支不接受代码上传只接受代码合并，一般只接收主开发分支；</li>
<li>‘feature-xxx(feature-login / feature-list / …)’是主开发分支，从develop分支上拓展，是一个个项目功能分支；</li>
<li>‘feature-xxx-fix’bug修复分支，从主开发分支上分出来，主要进行代码的 bug 修复，修复后合并到主开发分支；</li>
<li>‘hotfix-xxx’临时分支名称, 项目运行的时候出现了必须要立刻解决的问题开辟，直接在 master 分支上开辟一个 hotfix 分支,解决完毕后直接合并到 master 分支上；</li>
</ul>
<h2 id="六、git冲突问题"><a href="#六、git冲突问题" class="headerlink" title="六、git冲突问题"></a>六、git冲突问题</h2><p>假设A和B同时clone了github上的项目，在同一个分支里编写代码；<br>编写完后，A和B都需要上传，A上传成功后，B就无法上传了；<br>因为github认为有重复项，不知道应该保存哪个；<br>此时B需要<code>git pull</code>/<code>git pull origin master</code>拉取整个仓库，再<code>git push</code>，会询问你保留哪个版本，就可以上传了。</p>
<h2 id="七、GitHub-Desktop"><a href="#七、GitHub-Desktop" class="headerlink" title="七、GitHub Desktop"></a>七、GitHub Desktop</h2><p>每次上传github都需要git操作，好像有点麻烦，其实git有可视化桌面工具 — <a href="https://desktop.github.com/" target="_blank">GitHub Desktop</a>；<br>用法很简单，File-&gt;New repository新建仓库、Branch-&gt;New branch新建分支、Branch-&gt;Merge into current branch合并分支，与上面的指令一致，就不多介绍了。</p>
<h2 id="八、github冲突问题"><a href="#八、github冲突问题" class="headerlink" title="八、github冲突问题"></a>八、github冲突问题</h2><ul>
<li>假设A和B同时clone了github上的项目，在同一个分支里编写代码；</li>
<li>编写完后，A和B都需要上传，A上传成功后，B就无法上传了；</li>
<li>因为github认为有重复项，不知道应该保存哪个；</li>
<li>此时B需要<code>git pull</code>/<code>git pull origin master</code>拉取整个仓库，再<code>git push</code>，会询问你保留哪个版本，就可以上传了。</li>
</ul>
<h2 id="九、分支案例"><a href="#九、分支案例" class="headerlink" title="九、分支案例"></a>九、分支案例</h2><p>之前的分支问题又研究了一下，记录下来；<br>假设现在项目已经写了一半了，但是还没创建自己的分支，</p>
<ul>
<li>先把现在写的复制一份，起名为”design-abc”，其中abc是分支名，可以随便起</li>
<li>新建一个空文件夹</li>
<li><code>git clone &quot;https://github.com/gzh51914/design&quot;</code> ，从公共仓库克隆，得到design文件夹</li>
<li>进入design文件夹<ul>
<li>右键Git bash here，第一行最右边有(msater)</li>
<li>输入<code>git branch abc</code>，创建了master下的abc分支</li>
<li>输入<code>git checkout abc</code>，跳转到abc分支，发现右边变成了(abc)</li>
<li>把之前”design-abc”里的文件全部复制进来</li>
<li>输入<code>git add .</code></li>
<li>输入<code>git commit -m &quot;修改abc分支&quot;</code> 或 <code>git commit -m &quot;修改abc分支&quot; --no-verify</code></li>
</ul>
</li>
<li>此时vscode中<code>yarn serve</code>，8000端口出现的是你自己写的内容</li>
<li>在git窗口中<code>git checkout master</code>，8000端口变成了公共仓库里的内容，就代表你的分支成功了</li>
<li>然后输入<code>git checkout abc</code>转到你的分支</li>
<li>输入<code>git push origin abc</code>上传分支</li>
<li>到github仓库查看，点击左上的Branch，会发现有你自己的分支，并且master分支和abc分支内容不相同</li>
</ul>
<p>此后，写代码时，先看看是不是自己的分支，Git bash here右边，或者vscode左下角，都可以查看分支；</p>
<p>当你写完一个阶段，想push到远程仓库了</p>
<ul>
<li>git pull origin abc</li>
<li>git add .</li>
<li>git commit -m “上传abc分支”</li>
<li>git push origin abc</li>
</ul>
<p>当你想取得远程仓库的内容</p>
<ul>
<li>git pull origin master 或 git pull origin abc</li>
</ul>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
  </entry>
  <entry>
    <title>npm的使用</title>
    <url>/jackhuang-haohua.github.io/2019/03/27/2020-02-npm/</url>
    <content><![CDATA[<h1 id="是什么"><a href="#是什么" class="headerlink" title="是什么"></a>是什么</h1><p>　npm、yarn等都是Node Package Manager，即包管理工具；<br>　在很久以前，程序员分享代码都是直接网站或者社区里展示；后来较热门的技术又有了专门的网站，比如jQuery，BootStrap；随着代码包越来越多，人们要去不同的地方找不同的东西，太麻烦了，于是”Isaac Z. Schlueter”写出了npm工具，把代码包放在统一的仓库，也就能统一管理；</p>
<h1 id="常见的Package-Manager即其操作"><a href="#常见的Package-Manager即其操作" class="headerlink" title="常见的Package Manager即其操作"></a>常见的Package Manager即其操作</h1><h2 id="1、npm"><a href="#1、npm" class="headerlink" title="1、npm"></a>1、npm</h2><p><strong>①npm init</strong>，使文件夹能用npm进行管理，会生成一个package.json文件：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JSON"><figure class="iseeu highlight /json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"npm"</span>,  <span class="comment">//项目名称</span></span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"0.0.1"</span>,  <span class="comment">//版本</span></span><br><span class="line">  <span class="attr">"description"</span>: <span class="string">"test and play"</span>,  <span class="comment">//描述</span></span><br><span class="line">  <span class="attr">"main"</span>: <span class="string">"index.js"</span>, <span class="comment">//入口文件</span></span><br><span class="line">  <span class="attr">"dependencies"</span>: &#123;  <span class="comment">//项目依赖  上线也要用</span></span><br><span class="line">    <span class="attr">"jquery"</span>: <span class="string">"^3.2.1"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"devDependencies"</span>: &#123; <span class="comment">//开发依赖 上线就不用</span></span><br><span class="line">    <span class="attr">"animate.css"</span>: <span class="string">"^3.5.2"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;   <span class="comment">//命令行</span></span><br><span class="line">    <span class="attr">"test"</span>: <span class="string">"命令行"</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"repository"</span>: &#123;   <span class="comment">//仓库信息</span></span><br><span class="line">    <span class="attr">"type"</span>: <span class="string">"git"</span>,</span><br><span class="line">    <span class="attr">"url"</span>: <span class="string">"git+https://github.com/alexwa9.github.io/2017-8-28.git"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"keywords"</span>: [  <span class="comment">//关键词</span></span><br><span class="line">    <span class="string">"test"</span>,'xx','oo'</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"author"</span>: <span class="string">"wan9"</span>,</span><br><span class="line">  <span class="attr">"license"</span>: <span class="string">"ISC"</span>,   <span class="comment">//认证</span></span><br><span class="line">  <span class="attr">"bugs"</span>: &#123;</span><br><span class="line">    <span class="attr">"url"</span>: <span class="string">"https://github.com/alexwa9.github.io/2017-8-28/issues"</span><span class="comment">//问题提交</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"homepage"</span>: <span class="string">"https://github.com/alexwa9.github.io/2017-8-28#readme"</span><span class="comment">//首页</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>②npm i</strong> 安装依赖</p>
<ul>
<li>项目依赖：当前项目上线后依然需要<ul>
<li>npm i 包名 –save</li>
<li>npm install 包名 -S</li>
<li>npm install 包名@x.x.x -S</li>
<li>npm uninstall 包名 –save</li>
<li>npm uninstall 包名 -S</li>
</ul>
</li>
</ul>
<ul>
<li>开发依赖：开发过程中需要，上线后就不需要了<ul>
<li>npm install 包名 –save-dev</li>
<li>npm install 包名 -D</li>
<li>npm uninstall 包名 -D</li>
</ul>
</li>
</ul>
<ul>
<li>检查依赖包<ul>
<li>npm list  列出所有已装包</li>
<li>npm outdated 版本对比(安装过得包)</li>
<li>npm info 包名 查看当前包概要信息</li>
<li>npm view 包名 versions 查看包历史版本列表</li>
</ul>
</li>
</ul>
<ul>
<li>关于版本 npm install 包名@x.x.x<ul>
<li>^x.x.x   约束主版本，后续找最新</li>
<li>~x.x.x   保持前两位不变，后续找最新</li>
<li>‘*’      安装最新版本</li>
<li>x.x.x    定死了一个版本</li>
</ul>
</li>
</ul>
<ul>
<li>选择源，就是换个下载地址<ul>
<li>npm install nrm -g  安装选择源的工具包</li>
<li>nrm ls 查看所有源</li>
<li>nrm test 测试所有源</li>
<li>nrm use 切换源名</li>
<li>npm config set registry <a href="https://registry.npm.taobao.org" target="_blank" rel="noopener">https://registry.npm.taobao.org</a> 切换为淘宝源</li>
</ul>
</li>
</ul>
<ul>
<li>有时候安装卡顿，可以这么解决<ul>
<li>ctrl + c -&gt; npm uninstall 包名  -&gt; npm cache verify 清除缓存 -&gt; 换4g网络 -&gt; npm install 包名</li>
<li>换淘宝源</li>
<li>用cnpm</li>
</ul>
</li>
</ul>
<p><strong>③自定义命令</strong><br>在package.json中：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">"scripts": &#123;</span><br><span class="line">  "test": "echo \"Error: no test specified\" &amp;&amp; exit 1",</span><br><span class="line">  "start": "nodemon ./test2.js", //输入npm start 启动 nodemon ./test2.js</span><br><span class="line">  "dev":"nodemon ./test2.js" //输入npm run dev 启动 nodemon ./test2.js</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<p><strong>④发布自己的npm包</strong><br>比如我要发布一个“求圆面积”的包，<br>首先要填好package.json的资料：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JSON"><figure class="iseeu highlight /json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"hhh1997"</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"1.0.3"</span>,</span><br><span class="line">  <span class="attr">"description"</span>: <span class="string">""</span>,</span><br><span class="line">  <span class="attr">"main"</span>: <span class="string">"index.js"</span>,</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"start"</span>: <span class="string">"nodemon index.js"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"keywords"</span>: [<span class="string">"关键词可以填"</span>],</span><br><span class="line">  <span class="attr">"author"</span>: <span class="string">""</span>,</span><br><span class="line">  <span class="attr">"license"</span>: <span class="string">"ISC"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>创建一个写逻辑的js文件：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// circle.js</span></span><br><span class="line"><span class="keyword">const</span> PI = <span class="built_in">Math</span>.PI</span><br><span class="line"><span class="keyword">const</span> area=<span class="function">(<span class="params">r</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> PI * r * r</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> circumference=<span class="function">(<span class="params">r</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span> * PI * r</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">module</span>.exports=&#123;</span><br><span class="line">    area,circumference</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>创建一个index.js入口文件：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">const</span> circumference = <span class="built_in">require</span>(<span class="string">'./circle.js'</span>).circumference</span><br><span class="line"><span class="keyword">const</span> area = <span class="built_in">require</span>(<span class="string">'./circle.js'</span>).area</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    area,</span><br><span class="line">    circumference</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>发布：nrm use npm(使用npm工具) &gt; npm login(登录npm账号) &gt; npm publish(发布) &gt; npm社区上就有了名为”hhh1997”的包。</p>
<h2 id="2、Yarn"><a href="#2、Yarn" class="headerlink" title="2、Yarn"></a>2、Yarn</h2><blockquote>
<p>“Yarn是由Facebook、Google、Exponent 和 Tilde 联合推出了一个新的 JS 包管理工具 ，正如官方文档中写的，Yarn 是为了弥补 npm 的一些缺陷而出现的。”</p>
</blockquote>
<p>①安装</p>
<ul>
<li>首先我们要安装Yarn，建议官网下载，放在本地的一个文件夹里</li>
</ul>
<p>②初始化一个新项目</p>
<ul>
<li>yarn init</li>
</ul>
<p>③添加依赖包</p>
<ul>
<li>yarn add [package]</li>
<li>yarn add [package]@[version]</li>
<li>yarn add [package]@[tag]</li>
</ul>
<p>④将依赖项添加到不同依赖项类别中；<br>分别添加到 dependencies,devDependencies、peerDependencies 和 optionalDependencies 类别中：</p>
<ul>
<li>yarn add [package] –save | -S</li>
<li>yarn add [package] –dev | -D</li>
<li>yarn add [package] –peer</li>
<li>yarn add [package] –optional</li>
</ul>
<p>⑤升级依赖包</p>
<ul>
<li>yarn upgrade [package]</li>
<li>yarn upgrade [package]@[version]</li>
<li>yarn upgrade [package]@[tag]</li>
</ul>
<p>⑥移除依赖包</p>
<ul>
<li>yarn remove [package]</li>
</ul>
<p>⑦安装项目的全部依赖</p>
<ul>
<li>yarn</li>
<li>yarn install</li>
</ul>
<p>⑧安装到全局</p>
<ul>
<li>yarn global add [package] //global的位置测试不能变</li>
<li>yarn global remove [package]</li>
</ul>
<h2 id="3、Bower"><a href="#3、Bower" class="headerlink" title="3、Bower"></a>3、Bower</h2><p>这个我也没用过，等以后用到再记下来吧</p>
<ul>
<li>bowernpm install -g bower</li>
<li>bower i 包名 -g 安装</li>
<li>bower uninstall 包名 -g 卸载初始化项目环境</li>
<li>bower init</li>
<li>bower.json 第三方包管理配置文件项目依赖</li>
<li>bower install 包名#x.x.x -S 指定版本使用</li>
</ul>
]]></content>
      <categories>
        <category>node</category>
      </categories>
  </entry>
  <entry>
    <title>node.js基础整理</title>
    <url>/jackhuang-haohua.github.io/2019/08/24/2020-02-node.js%E5%88%9D%E7%BA%A7/</url>
    <content><![CDATA[<h2 id="一、什么是node-js"><a href="#一、什么是node-js" class="headerlink" title="一、什么是node.js"></a>一、什么是node.js</h2><p>　有了node后就能用JS语法做更多的事，比如操作数据库，安装拓展，写接口，读写文件等等；<br>　js在引入html页面后，就可以在浏览器运行，但不能单独运行；当我们安装node.js环境后，我们的电脑也有了’js解析器’，在终端就能直接运行js代码。<br>　注意，node使用ECMA语法，不可使用DOM，BOM</p>
<p><strong>node的优点：</strong></p>
<ul>
<li>标准的异步编程</li>
<li>合理分配资源</li>
<li>高并发 I/O模型</li>
</ul>
<h2 id="二、安装node-js"><a href="#二、安装node-js" class="headerlink" title="二、安装node.js"></a>二、安装node.js</h2><ul>
<li>node官网下载：<a href="https://nodejs.org/en/" target="_blank">nodejs.org/en/</a></li>
<li>下载LTS(稳定版)即可，安装完成后没有图标显示，因为node是系统的一个环境；</li>
<li>检测：win+r 打开命令行，输入<code>node --version</code>，出现版本号表示安装完成；</li>
<li>卸载：控制面板-&gt;鼠标右键卸载</li>
</ul>
<h2 id="三、node环境下运行js代码"><a href="#三、node环境下运行js代码" class="headerlink" title="三、node环境下运行js代码"></a>三、node环境下运行js代码</h2><p><strong>方式一：</strong></p>
<ul>
<li>打开命令行(终端)，输入 node+回车 进入代码编辑模式</li>
<li>输入js代码就可以运行了，相当于在浏览器打开</li>
<li>按 ctrl+c 两次退出模式</li>
</ul>
<p><strong>方式二：</strong></p>
<ul>
<li>打开命令行(终端)，进入到包含.js文件的文件夹， node xxx.js 就能运行</li>
</ul>
<h2 id="四、前端常用的Linux指令"><a href="#四、前端常用的Linux指令" class="headerlink" title="四、前端常用的Linux指令"></a>四、前端常用的Linux指令</h2><p>因为node环境下，我们需要在命令行操作，所以得了解下linux指令；</p>
<table>
<thead>
<tr>
<th>指令</th>
<th>描述</th>
<th>例子</th>
</tr>
</thead>
<tbody><tr>
<td>盘符:</td>
<td>切换到某个盘</td>
<td>f:</td>
</tr>
<tr>
<td>cd 文件夹名称</td>
<td>进入子级文件夹</td>
<td>cd test</td>
</tr>
<tr>
<td>cd ..</td>
<td>返回上一级目录</td>
<td>cs ..</td>
</tr>
<tr>
<td>dir</td>
<td>查看当前目录所有内容</td>
<td>dir</td>
</tr>
<tr>
<td>md 要创建的文件夹名称</td>
<td>创建文件夹</td>
<td>md test</td>
</tr>
<tr>
<td>rd /s/q 要删除的文件夹名称</td>
<td>删除文件夹</td>
<td>rd /s/q test</td>
</tr>
<tr>
<td>xcopy 要复制的文件夹 复制后的文件夹名称</td>
<td>复制</td>
<td>xcopy test test2</td>
</tr>
<tr>
<td>type nul&gt;要创建的文件名</td>
<td>创建文件</td>
<td>type nul&gt;test.txt</td>
</tr>
<tr>
<td>echo 要写入的内容&gt;指定的文件</td>
<td>写入内容，完全覆盖</td>
<td>echo hello&gt;test.txt</td>
</tr>
<tr>
<td>echo 要写入的内容&gt;&gt;指定的文件</td>
<td>追加内容</td>
<td>echo world&gt;&gt;test.txt</td>
</tr>
<tr>
<td>type 要查看的文件</td>
<td>查看文件内容</td>
<td>type test.txt</td>
</tr>
<tr>
<td>ren 要修改的文件 新名称</td>
<td>修改文件名称</td>
<td>ren test.txt test2.txt</td>
</tr>
<tr>
<td>del 要删除的文件</td>
<td>删除文件</td>
<td>f:</td>
</tr>
<tr>
<td>copy 要复制的文件 复制后的文件名</td>
<td>复制文件</td>
<td>copy test.txt test2.txt</td>
</tr>
<tr>
<td>move 要移动的文件 移动到哪一个目录</td>
<td>移动文件</td>
<td>move test.txt e:/study</td>
</tr>
<tr>
<td>cls</td>
<td>清除当前命令行所有内容</td>
<td>cls</td>
</tr>
<tr>
<td>ipconfig</td>
<td>查看电脑IP信息</td>
<td>ipconfig</td>
</tr>
<tr>
<td>ping 网址</td>
<td>测试网速</td>
<td>ping <a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a></td>
</tr>
<tr>
<td>systeminfo</td>
<td>查看电脑配置信息</td>
<td>systeminfo</td>
</tr>
</tbody></table>
<h2 id="五、node的模块化"><a href="#五、node的模块化" class="headerlink" title="五、node的模块化"></a>五、node的模块化</h2><h3 id="1-内置模块"><a href="#1-内置模块" class="headerlink" title="1.内置模块"></a>1.内置模块</h3><p><a href="https://juejin.im/post/5e0006c251882512795675f9#1" target="_blank">掘金上这篇讲的很详细</a><br>node自带几十个模块，这里就记录几个常见的；</p>
<h4 id="fs模块"><a href="#fs模块" class="headerlink" title="fs模块"></a>fs模块</h4><p>操作系统文件：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> fs = <span class="built_in">require</span>(<span class="string">"fs"</span>) <span class="comment">//引入文件系统模块</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// // 文件读取</span></span><br><span class="line">fs.readFile(<span class="string">"./html/index.html"</span>, <span class="string">"utf-8"</span>, (err, data) =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"err"</span>, err); <span class="comment">//第一个err是字符串，第二个是错误信息，如果没有则为空</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"data"</span>, data);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">fs.rename(<span class="string">"./html/index1.html"</span>, <span class="string">"./html/index2.html"</span>, (err) =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'命名完成'</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">fs.rmdir(<span class="string">"./html/index3"</span>, (err) =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"删除文件夹完成"</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div>

<h4 id="url模块"><a href="#url模块" class="headerlink" title="url模块"></a>url模块</h4><p>操作url地址</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> url = <span class="built_in">require</span>(<span class="string">"url"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">"http://www.baidu.com:80/app/html/index.html?a=1&amp;b=2#title"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 一、手动取得参数</span></span><br><span class="line"><span class="keyword">let</span> obj = url.parse(str) <span class="comment">//解析url字符串</span></span><br><span class="line"><span class="keyword">let</span> query = obj.query <span class="comment">//取得query值，a=1&amp;b=2</span></span><br><span class="line"><span class="keyword">let</span> queryArr = query.split(<span class="string">'&amp;'</span>) <span class="comment">//切割&amp;，queryArr=[a=1、b=2]</span></span><br><span class="line"><span class="keyword">let</span> json = &#123;&#125; <span class="comment">//空对象</span></span><br><span class="line">queryArr.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">item, index</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> arr = item.split(<span class="string">'='</span>) <span class="comment">//a、1</span></span><br><span class="line">    json[arr[<span class="number">0</span>]] = arr[<span class="number">1</span>] <span class="comment">//存入对象</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(json);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 二、自动解析</span></span><br><span class="line">url.parse(str,<span class="literal">true</span>).query <span class="comment">//自动解析url.query字符串，返回对象</span></span><br><span class="line"><span class="built_in">console</span>.log(url.parse(str, <span class="literal">true</span>).query.a); <span class="comment">//取得1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 得到字符串 http://www.baidu.com:80/app/html/index.html?a=1&amp;b=2#title</span></span><br><span class="line">url.format(obj)</span><br></pre></td></tr></table></figure></div>


<h4 id="querystring模块"><a href="#querystring模块" class="headerlink" title="querystring模块"></a>querystring模块</h4><p>转换成字符串格式，比如获取非地址栏参数时：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.引入相应的原生模块、依赖</span></span><br><span class="line"><span class="keyword">let</span> http = <span class="built_in">require</span>(<span class="string">"http"</span>)</span><br><span class="line"><span class="keyword">let</span> fs = <span class="built_in">require</span>(<span class="string">"fs"</span>)</span><br><span class="line"><span class="keyword">let</span> url = <span class="built_in">require</span>(<span class="string">"url"</span>)</span><br><span class="line"><span class="keyword">let</span> querystring = <span class="built_in">require</span>(<span class="string">"querystring"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.实例化http对象（服务器对象）</span></span><br><span class="line"><span class="keyword">let</span> app = http.createServer(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//排除 /favicon.ico的请求</span></span><br><span class="line">    <span class="keyword">if</span> (req.url.indexOf(<span class="string">"/favicon.ico"</span>) === <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="comment">//需要判断要读取的是动态资源（接口api）还是静态资源</span></span><br><span class="line">        <span class="keyword">if</span> (req.url.indexOf(<span class="string">"/api"</span>) !== <span class="number">-1</span>) &#123; <span class="comment">//处理接口</span></span><br><span class="line">            <span class="comment">//处理地址栏的数据</span></span><br><span class="line">            <span class="keyword">let</span> urlObj = url.parse(req.url, <span class="literal">true</span>)</span><br><span class="line">            <span class="comment">// 输入http://localhost:3000/api/user?name=1&amp;age=2，得到&#123; name: '1', age: '2' &#125;</span></span><br><span class="line">            <span class="built_in">console</span>.log(urlObj.query)</span><br><span class="line"></span><br><span class="line">            <span class="comment">//非地址栏的数据</span></span><br><span class="line">            <span class="comment">// 从 localhost:3000/noaddress.html 跳到 localhost:3000/api/user</span></span><br><span class="line">            <span class="comment">// 解析出form表格中的input，例如&#123;username: '15073183433',password: 'haohua'&#125;</span></span><br><span class="line">            <span class="keyword">let</span> noAddressData = <span class="string">""</span> <span class="comment">//存放非地址栏的数据</span></span><br><span class="line">            req.on(<span class="string">"data"</span>, chunk =&gt; &#123; <span class="comment">//chunk代表抓取的一片数据，data事件内部会频繁的触发</span></span><br><span class="line">                noAddressData += chunk</span><br><span class="line">            &#125;)</span><br><span class="line">            req.on(<span class="string">"end"</span>, () =&gt; &#123; <span class="comment">//数据已经全部接受完毕</span></span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"非地址栏的数据："</span>, querystring.parse(noAddressData))</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">//处理静态资源 /index.html</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">let</span> path = req.url === <span class="string">"/"</span> ? <span class="string">"/index.html"</span> : req.url;</span><br><span class="line">                <span class="keyword">let</span> html = fs.readFileSync(<span class="string">"./www"</span> + path)</span><br><span class="line">                <span class="comment">//直接将html结果返回给浏览器</span></span><br><span class="line">                res.write(html)</span><br><span class="line">            &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">                <span class="keyword">let</span> html = fs.readFileSync(<span class="string">"./www/nopage.html"</span>)</span><br><span class="line">                res.write(html)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    res.end()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//监听服务器</span></span><br><span class="line">app.listen(<span class="number">3000</span>)</span><br></pre></td></tr></table></figure></div>

<h4 id="path模块"><a href="#path模块" class="headerlink" title="path模块"></a>path模块</h4><p>操作系统磁盘路径<br><strong>编码</strong><br>windows： <code>c:\\user\\admin\\a.jpg</code><br>mac:     <code>~/desktop/1901</code></p>
<p><strong>UI呈现</strong>（控制台的打印）<br>windows: <code>c:\user\admin</code><br>mac: <code>~/desktop/1901</code></p>
<p><strong>API</strong><br>磁盘路径解析 <strong>parse</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line">path.parse(<span class="string">'c:\\wamp\\xx.png'</span>) <span class="comment">// string -&gt; object</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//返回</span></span><br><span class="line">&#123;</span><br><span class="line">   root: <span class="string">'c:\\'</span>, 盘符</span><br><span class="line">   dir: <span class="string">'c:\\wamp'</span>, 目录</span><br><span class="line">   base: <span class="string">'xx.png'</span>,  文件名</span><br><span class="line">   ext: <span class="string">'.png'</span>, 扩展名</span><br><span class="line">   name: <span class="string">'xx'</span> 	文件，不含扩展名    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>片段合并<strong>join</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line">path.join(<span class="string">'磁盘路径1'</span>,<span class="string">'磁盘路径2'</span>，<span class="string">'磁盘路径n'</span>)</span><br></pre></td></tr></table></figure></div>
<blockquote>
<p>__dirname 魔术变量  返回当前文件所在的磁盘路径</p>
</blockquote>
<p>片段合并 <strong>resolve</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line">path.resolve(<span class="string">'磁盘路径1'</span>,<span class="string">'磁盘路径n'</span>)</span><br></pre></td></tr></table></figure></div>
<blockquote>
<p>合并磁盘片段,右到左找根，左到右拼接，没有找到根，以当前文件路径为根</p>
</blockquote>
<h3 id="2-自定义模块"><a href="#2-自定义模块" class="headerlink" title="2.自定义模块"></a>2.自定义模块</h3><p>其实就是把一些方法和逻辑单独拿出来，放在一个文件里，需要的时候就引入并调用</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// a.js中</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">10</span></span><br><span class="line"><span class="keyword">let</span> b = <span class="string">"123"</span></span><br><span class="line"><span class="keyword">let</span> c = <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"这是构造函数"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    show() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"这是构造函数的方法"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 分开写</span></span><br><span class="line">exports.a = a</span><br><span class="line">exports.b = b</span><br><span class="line">exports.c = c</span><br><span class="line">exports.Person = Person</span><br><span class="line"></span><br><span class="line"><span class="comment">// 合并写</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    a,</span><br><span class="line">    b,</span><br><span class="line">    c,</span><br><span class="line">    Person</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// test.js中调用</span></span><br><span class="line"><span class="keyword">let</span> mod = <span class="built_in">require</span>(<span class="string">"./mod/a"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a = mod.a <span class="comment">//a=10</span></span><br><span class="line"><span class="keyword">let</span> b = mod.b <span class="comment">//b=123</span></span><br><span class="line"><span class="keyword">let</span> c = mod.c(<span class="number">123</span>) <span class="comment">//直接调用c函数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> Person1 = <span class="keyword">new</span> mod.Person <span class="comment">//打印了constructor里的内容</span></span><br><span class="line">Person1.show()</span><br></pre></td></tr></table></figure></div>

<h3 id="3-第三方模块"><a href="#3-第三方模块" class="headerlink" title="3.第三方模块"></a>3.第三方模块</h3><p><a href="https://www.npmjs.com/" target="_blank">npm</a>上都是第三方模块；<br>关于npm的总结在<a href="" target="_blank">这篇文章</a></p>
<h2 id="后端渲染"><a href="#后端渲染" class="headerlink" title="后端渲染"></a>后端渲染</h2><p>　通常根据后端返回的json数据，然后来生成html被称为前端渲染，而后端渲染是后端把json与html结合渲染好后返回到浏览器，没前端什么事了</p>
<h3 id="模板引擎"><a href="#模板引擎" class="headerlink" title="模板引擎"></a>模板引擎</h3><p>无论前后谁来渲染页面，都会用到模板引擎，前端渲染页面实际上是<strong>操作dom</strong>，后端渲染页面是<strong>把数据和html字符拼接</strong>后丢给浏览器<br>| 引擎                  | 前端 | 后端 |<br>| ——————— | —- | —- |<br>| angularJs             | √    | ×    |<br>| vue/mustach           | √    | √    |<br>| react                 | √    | √    |<br>| angularTs/mustach     | √    | √    |<br>| jade/pug              | ×    | √    |<br>| ejs                   | ×    | √    |<br>| jquery + art-template | √    | ×    |<br>| handlerbars           | √    | ×    |</p>
<h3 id="jade"><a href="#jade" class="headerlink" title="jade"></a>jade</h3><p><strong>原理</strong>：fs抓取前端静态页面 + jade + 数据      -&gt;    返回send(data)     -&gt;     浏览器<br><strong>特点</strong>：侵入式，强依赖<br><strong>使用</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> jade = <span class="built_in">require</span>(<span class="string">'jade'</span>)</span><br><span class="line"><span class="keyword">let</span> html = jade.renderFile(<span class="string">'jade模板文件'</span>，&#123;<span class="attr">pretty</span>:<span class="literal">true</span>,<span class="attr">key</span>:value&#125;);	<span class="comment">//返回字符</span></span><br></pre></td></tr></table></figure></div>

<p><strong>jade模板文件语法</strong><br>父子要缩进<br>属性：标签(key=value,key2=value)<br>内容：标签 内容<br><a href="http://www.nooong.com/docs/jade_chinese.htm" target="_blank">其他扩展</a></p>
<h3 id="ejs"><a href="#ejs" class="headerlink" title="ejs"></a>ejs</h3><p><strong>原理</strong>：fs抓取前端静态页面 + ejs + 数据      -&gt;    返回send(data)     -&gt;     浏览器<br><strong>特点</strong>：非侵入式，温和，弱依赖<br><strong>使用</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> ejs = <span class="built_in">require</span>(<span class="string">'ejs'</span>)</span><br><span class="line">ejs.renderFile(<span class="string">'ejs模板文件'</span>,&#123;要合并到html数据&#125;,回调(err,data))</span><br></pre></td></tr></table></figure></div>
<blockquote>
<p>err：错误，null代表没有错误<br>data:    渲染后的字符|流<br>ejs模板 ：    后缀名为ejs的html文件</p>
</blockquote>
<p><strong>ejs模板文件语法</strong></p>
<ul>
<li>ejs 结构就是html</li>
<li>输出:    &lt;%= 数据名|属性名|变量名 + 表达式 %&gt;</li>
<li>语句：    &lt;% 语句 %&gt;  需要被&lt;%  %&gt;  包裹</li>
<li>非转义输出:    &lt;%- 数据名|变量名  + 表达式 %&gt;</li>
<li>载入公共：&lt;%- include(‘./hd.ejs’,{数据}) %&gt;<br><a href="https://www.npmjs.com/package/ejs" target="_blank">其他扩展</a></li>
</ul>
<h2 id="七、静态资源托管"><a href="#七、静态资源托管" class="headerlink" title="七、静态资源托管"></a>七、静态资源托管</h2><p><code>server.use(express.static(&#39;./www&#39;));</code></p>
]]></content>
      <categories>
        <category>node</category>
      </categories>
  </entry>
  <entry>
    <title>SASS--更高效的书写CSS</title>
    <url>/jackhuang-haohua.github.io/2019/02/26/2020-02-sass/</url>
    <content><![CDATA[<h2 id="一、了解SASS"><a href="#一、了解SASS" class="headerlink" title="一、了解SASS"></a>一、了解SASS</h2><p>sass是css的预编译语言，在.scss文件编写，转换成.css文件，就可以在html页面引用了。<br>可以说sass写的就是css代码，不同的是sass支持更多的语法，比如嵌套、循环、变量等。</p>
<p>tip：.sass与.scss<br>.scss：和css语法规则一致<br>.sass：没有{}和; 依靠缩进和换行区分语句</p>
<h2 id="二、sass的编译"><a href="#二、sass的编译" class="headerlink" title="二、sass的编译"></a>二、sass的编译</h2><p>vscode有<code>easy sass</code>插件，安装后.scss文件自动编译成.css文件，并放在同一个文件夹；<br>但是为了统一使用gulp打包，还是需要手动配置编译；</p>
<h3 id="1-安装sass第三方工具-依赖node环境"><a href="#1-安装sass第三方工具-依赖node环境" class="headerlink" title="1.安装sass第三方工具(依赖node环境)"></a>1.安装sass第三方工具(依赖node环境)</h3><ul>
<li>打开命令行，输入<code>npm install --global sass</code>，回车，即可安装</li>
<li>打开命令行，输入<code>sass --version</code>，回车，即可检测是否安装及版本号</li>
<li>打开命令行，输入<code>npm uninstall --global sass</code>，回车，即可卸载</li>
</ul>
<h3 id="2-编译"><a href="#2-编译" class="headerlink" title="2.编译"></a>2.编译</h3><p>创建名为sass的文件夹，新建.scss文件(随便在里面写点css样式),如下：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">sass文件夹</span><br><span class="line">│   test.scss</span><br></pre></td></tr></table></figure></div>

<h4 id="2-1-单文件编译"><a href="#2-1-单文件编译" class="headerlink" title="2.1 单文件编译"></a>2.1 单文件编译</h4><ul>
<li>打开命令行，vscode中可以右键文件夹’在终端打开’，定位到sass文件夹，例如<br><code>e:\study\sass文件夹&gt;</code></li>
<li>输入’sass 要编译的文件 编译后的文件名’，例如<br><code>e:\study\sass文件夹&gt;sass test.scss:test.css</code>，回车</li>
<li>会在同一文件夹下生成.css文件，.map文件先不用管<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">sass文件夹</span><br><span class="line">│   test.scss</span><br><span class="line">│   test.css</span><br><span class="line">│   test.css.map</span><br></pre></td></tr></table></figure></div>

</li>
</ul>
<h4 id="2-2-单文件实时编译"><a href="#2-2-单文件实时编译" class="headerlink" title="2.2 单文件实时编译"></a>2.2 单文件实时编译</h4><ul>
<li>同样的，定位到sass文件夹：<br><code>e:\study\sass文件夹&gt;</code></li>
<li>输入’sass - -watch 要编译的文件:编译后的文件名’，例如<br><code>e:\study\sass文件夹&gt;sass --watch test.scss:test.css</code>，回车</li>
<li>同样的生成.css文件，并出现以下提示；当你改变.scss的代码时，.css也会实时改变，终端窗口按Ctrl-C终止监控；<strong>注意：一个终端只能监控一个文件, 要是想监控多个文件, 则需要开启很多终端</strong><br><code>e:\study\sass文件夹&gt;sass --watch test.scss:test.css</code><br><code>Sass is watching for changes. Press Ctrl-C to stop.</code></li>
</ul>
<h4 id="2-3-单文件夹编译"><a href="#2-3-单文件夹编译" class="headerlink" title="2.3 单文件夹编译"></a>2.3 单文件夹编译</h4><ul>
<li>定位到sass文件夹的上一个文件夹，<br><code>e:\study</code></li>
<li>输入’sass - -watch 要编译的文件夹:生成的文件夹’，例如<br><code>e:\study&gt;sass --watch scss文件夹:css文件夹</code>，回车</li>
<li>会在同一目录下生成css文件夹，当你改变scss文件夹的代码时，css文件夹也会实时改变，终端窗口按Ctrl-C终止监控；<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">project  </span><br><span class="line">│───scss文件夹</span><br><span class="line">│   │   test1.scss</span><br><span class="line">│   │   test2.scss   </span><br><span class="line">└───css文件夹</span><br><span class="line">    │   test1.css</span><br><span class="line">    │   test1.css.map</span><br><span class="line">    │   test2.css</span><br><span class="line">    │   test2.css.map</span><br></pre></td></tr></table></figure></div>

</li>
</ul>
<h3 id="3-关于map文件"><a href="#3-关于map文件" class="headerlink" title="3.关于map文件"></a>3.关于map文件</h3><p>map文件映射了生成的css文件，到源文件代码的位置；<br>当我们需要更改css样式时，在浏览器控制台里，map会告诉你这个样式在对应的sass的哪一行，</p>
<h2 id="三、sass语法"><a href="#三、sass语法" class="headerlink" title="三、sass语法"></a>三、sass语法</h2><p>在sass文件里面，我们可以用各种各样的语法书写样式</p>
<h3 id="1-变量"><a href="#1-变量" class="headerlink" title="1.变量"></a>1.变量</h3><p>语法: $名字: 值;</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSS"><figure class="iseeu highlight /css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* scss代码 */</span></span><br><span class="line">$color: green;</span><br><span class="line">$fs: 30px;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: $color;</span><br><span class="line">  <span class="attribute">font-size</span>: $fs;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 编译后的css代码 */</span></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: green;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">30px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="2-注释"><a href="#2-注释" class="headerlink" title="2.注释"></a>2.注释</h3><ul>
<li><p>单行注释，前面两斜杠，不会编译到css文件里，如：<br>// 我是被注释的文本</p>
</li>
<li><p>多行注释，前后加斜杠星号，编译的时候会保留，使用gulp打包的时候不会保留<br>/*<br>  我是被注释的文本<br>  我是被注释的文本<br>  */</p>
</li>
<li><p>强力注释，比多行注释多一个!，编译的时候会保留，使用gulp打包的时候也会保留<br>/*!<br>  我是被注释的文本<br>  我是被注释的文本<br>  */</p>
</li>
</ul>
<h3 id="3-条件分支语句"><a href="#3-条件分支语句" class="headerlink" title="3.条件分支语句"></a>3.条件分支语句</h3><p>  依赖于变量使用<br>    =&gt; if 语句<br>      -&gt; 语法: @if 变量 == 值 { 样式 }<br>    =&gt; if else 语句<br>      -&gt; 语法: @if 变量 == 值 { 样式 } @else { 样式 }<br>    =&gt; if else if 语句<br>      -&gt; 语法: @if 变量 == 值 { 样式 } @else if 变量 == 值 { 样式 }</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSS"><figure class="iseeu highlight /css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* scss代码 */</span></span><br><span class="line">$type: a;</span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  @if $type==a &#123;</span><br><span class="line">    <span class="selector-tag">color</span>: <span class="selector-tag">red</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">@else</span> if $type==b &#123;</span><br><span class="line">    <span class="selector-tag">color</span>: <span class="selector-tag">green</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">@else</span> if $type==c &#123;</span><br><span class="line">    <span class="selector-tag">color</span>: <span class="selector-tag">skyblue</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 编译后的css代码 */</span></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="4-循环分支语句"><a href="#4-循环分支语句" class="headerlink" title="4.循环分支语句"></a>4.循环分支语句</h3><p>  for 循环<br>    =&gt; 依赖变量使用<br>    =&gt; 语法:<br>      1. @for 变量 from 数字 to 数字 { 代码 }<br>        -&gt; 包含开始数字, 不包含结束数字<br>        -&gt; 在循环里面使用变量<br>          =&gt; 再选择器中使用 #{变量}<br>          =&gt; 再样式里面使用 变量<br>      2. @for 变量 from 数字 through 数字 { 代码 }<br>        -&gt; 包含结束数字<br>        -&gt; 在循环里面使用变量<br>          =&gt; 再选择器中使用 #{变量}<br>          =&gt; 再样式里面使用 变量</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSS"><figure class="iseeu highlight /css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* scss代码 */</span></span><br><span class="line"><span class="keyword">@for</span> $i from <span class="number">1</span> to <span class="number">3</span> &#123;</span><br><span class="line">  li:nth-child(#&#123;$i&#125;) &#123;</span><br><span class="line">    width: 10px*$i;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@for</span> $i from <span class="number">1</span> through <span class="number">3</span> &#123;</span><br><span class="line">  li:nth-child(#&#123;$i&#125;) &#123;</span><br><span class="line">    height: 10px*$i;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 编译后的css代码 */</span></span><br><span class="line"><span class="selector-tag">li</span><span class="selector-pseudo">:nth-child(1)</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">li</span><span class="selector-pseudo">:nth-child(2)</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">li</span><span class="selector-pseudo">:nth-child(1)</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">li</span><span class="selector-pseudo">:nth-child(2)</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">li</span><span class="selector-pseudo">:nth-child(3)</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">30px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="5-选择器嵌套"><a href="#5-选择器嵌套" class="headerlink" title="5.选择器嵌套"></a>5.选择器嵌套</h3><p>和 html 一样让选择器也有一个上下级的关系</p>
<ol>
<li><p>后代选择器嵌套<br>   语法: 父级 { 子级 {} }</p>
</li>
<li><p>子代选择器嵌套<br>   语法: 父级 { &gt; 子级 {} }</p>
</li>
<li><p>连字符选择器嵌套<br>   伪类选择器和伪元素选择器嵌套<br>   当你需要的伪类和伪元素和选择器连接再一起的时候<br>   使用 &amp; 连接符操作<br>   语法: 选择器 { &amp;:hover {} }</p>
</li>
<li><p>群组选择器的嵌套<br>   语法: 群组选择器 { 子级 {} }<br>   语法: 选择器 { 群组选择器 {} }<br>   语法: 群组选择器 { 群组选择器 {} }</p>
</li>
</ol>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSS"><figure class="iseeu highlight /css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* scss代码 */</span></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line"></span><br><span class="line">  .box1,</span><br><span class="line">  <span class="selector-class">.box2</span>,</span><br><span class="line">  <span class="selector-class">.box3</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  &amp;<span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 编译后的css代码 */</span></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span> <span class="selector-class">.box1</span>,</span><br><span class="line"><span class="selector-tag">div</span> <span class="selector-class">.box2</span>,</span><br><span class="line"><span class="selector-tag">div</span> <span class="selector-class">.box3</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="6-属性嵌套"><a href="#6-属性嵌套" class="headerlink" title="6.属性嵌套"></a>6.属性嵌套</h3><p>可以嵌套的属性才能使用，就是属性中带有中划线的属性，比如margin-left、background-image</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSS"><figure class="iseeu highlight /css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* scss代码 */</span></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span> &#123;</span><br><span class="line">    left: <span class="number">5px</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-tag">border</span>: 10<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-tag">transparent</span> &#123;</span><br><span class="line">    <span class="attribute">bottom</span>: <span class="number">10px</span> solid <span class="number">#333</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 编译后的css代码 */</span></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">padding-left</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">10px</span> solid transparent;</span><br><span class="line">  <span class="attribute">border-bottom</span>: <span class="number">10px</span> solid <span class="number">#333</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="7-混合器"><a href="#7-混合器" class="headerlink" title="7.混合器"></a>7.混合器</h3><ul>
<li>sass 的混合器创建<br>=&gt; 语法: @mixin 混合器名称 {}<br>=&gt; 语法: @mixin 混合器名称(形参) {}<br>=&gt; 语法: @mixin 混合器名称(形参默认值) {}</li>
<li>sass 的混合器的使用<br>=&gt; 语法: @include 混合器名称;<br>=&gt; 语法: @include 混合器名称(实参);</li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSS"><figure class="iseeu highlight /css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* scss代码 */</span></span><br><span class="line"><span class="keyword">@mixin</span> transition($<span class="attribute">t:</span> <span class="number">1s</span>, $<span class="attribute">p:</span> all, $<span class="attribute">d:</span> <span class="number">0s</span>, $<span class="attribute">tf:</span> linear) &#123;</span><br><span class="line">  -webkit-transition: $p $t $d $tf;</span><br><span class="line">  -moz-transition: $p $t $d $tf;</span><br><span class="line">  -ms-transition: $p $t $d $tf;</span><br><span class="line">  -o-transition: $p $t $d $tf;</span><br><span class="line">  transition: $p $t $d $tf;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  @include transition(2s, height); // 传递两个参数, 剩余的使用默认值</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 编译后的css代码 */</span></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">-webkit-transition</span>: height <span class="number">2s</span> <span class="number">0s</span> linear;</span><br><span class="line">  <span class="attribute">-moz-transition</span>: height <span class="number">2s</span> <span class="number">0s</span> linear;</span><br><span class="line">  <span class="attribute">-ms-transition</span>: height <span class="number">2s</span> <span class="number">0s</span> linear;</span><br><span class="line">  <span class="attribute">-o-transition</span>: height <span class="number">2s</span> <span class="number">0s</span> linear;</span><br><span class="line">  <span class="attribute">transition</span>: height <span class="number">2s</span> <span class="number">0s</span> linear;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="8-继承"><a href="#8-继承" class="headerlink" title="8.继承"></a>8.继承</h3><p>语法: @extend 另一个选择器</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSS"><figure class="iseeu highlight /css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* scss代码 */</span></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  @extend div;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 编译后的css代码 */</span></span><br><span class="line"><span class="selector-tag">div</span>, <span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="9-导入"><a href="#9-导入" class="headerlink" title="9.导入"></a>9.导入</h3><p>语法: @import “test.scss”；之后不用在html里面引用test.css。</p>
]]></content>
      <categories>
        <category>css</category>
      </categories>
  </entry>
  <entry>
    <title>身份验证-session与token</title>
    <url>/jackhuang-haohua.github.io/2019/08/27/2020-03-token%E4%B8%8Esession/</url>
    <content><![CDATA[<p>　HTTP 是一种没有状态的协议，也就是它并不知道是谁在访问。所以，就算客户端用户名密码通过了身份验证，下回这个客户端再发送请求时候，还得再验证；</p>
<h2 id="session"><a href="#session" class="headerlink" title="session"></a>session</h2><ol>
<li>客户端用户名跟密码请求登录</li>
<li>服务端收到请求，去库验证用户名与密码</li>
<li>验证成功后，服务端种一个cookie或发一个字符到客户端，同时服务器保留一份session</li>
<li>客户端收到 响应 以后可以把收到的字符存到cookie</li>
<li>客户端每次向服务端请求资源的cookie会自动携带</li>
<li>服务端收到请求，然后去验证cookie和session，如果验证成功，就向客户端返回请求的库数据</li>
</ol>
<blockquote>
<p>ession存储位置: 服务器内存，磁盘，或者数据库里;<br>Session存储内容: id,存储时间，用户名等说明一下登录的用户是谁;<br>客户端携带 ： cookie自动带，localStorage手动带;</p>
</blockquote>
<p><strong>当登录成功，得到cookie后：</strong><br>前端种：<br>　cookie/localstorage</p>
<p>后端种:<br>　服务器给浏览器种cookie：通过cookie-parser中间件<br>　服务器给浏览器种cookie的同时在服务器上生成seesion：通过cookie-session存值</p>
<p><strong>使用cookie-session：</strong></p>
<ol>
<li>安装npm，引入<code>let cookieSession = require(&#39;cookie-session&#39;)</code></li>
<li>配置</li>
</ol>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">app.use(cookieSession(&#123;</span><br><span class="line">	name:&#39;保存到服务器的session的名字&#39;,</span><br><span class="line">  keys:[必传参数，代表加密层级],</span><br><span class="line">  maxAge:1000 &#x2F;&#x2F;保留cookie的时间</span><br><span class="line">&#125;))</span><br></pre></td></tr></table></figure></div>
<ol start="3">
<li>把cookie保存到session<code>req.session.key=value</code></li>
<li>登录时对比cookie<code>req.session.key===前端传来的参数</code>，返回true</li>
<li>删除cookie、session的方法</li>
</ol>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">delete req.session.key </span><br><span class="line">req.session.key &#x3D; undefined</span><br></pre></td></tr></table></figure></div>

<h2 id="token"><a href="#token" class="headerlink" title="token"></a>token</h2><p>在服务端不需要存储用户的登录记录，全部发给客户端有客户端自己存(cookie,local)</p>
<ol>
<li>客户端使用用户名跟密码请求登录</li>
<li>服务端收到请求，去验证用户名与密码</li>
<li>验证成功后，服务端会签发一个 Token（加了密的字符串），再把这个 Token 发送给客户端</li>
<li>客户端收到 Token 以后可以把它存储起来，比如放在 Cookie 里或者 Local Storage 里</li>
<li>客户端每次向服务端请求资源的时候需要带着服务端签发的 Token</li>
<li>服务端收到请求，然后去验证客户端请求里面带着的 Token，如果验证成功，就向客户端返回请求的数据</li>
</ol>
<p><strong>实现步骤：</strong><br><strong>①jsonwebtoken</strong>的安装引入：<code>let jwt = require(&#39;jsonwebtoken&#39;)</code></p>
<p><strong>②生成签名</strong><br><code>let token = jwt.sign(payload, secretOrPrivateKey, [options, callback])</code><br>　[payload]: json 还有username,userid<br>　[secretOrPrivateKey]: 加密规则，字符串，或者私钥path模块<br>　[options]: 可选配置项<br>　[callback]: 成功回调, 可选 返回制作后的token,也可同步返回<br>比如：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">let token &#x3D; jwt.sign(&#123;</span><br><span class="line">    username,</span><br><span class="line">    _id: result[0]._id</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div>

<p><strong>③校验token</strong><br><code>jwt.verify(token, secretOrPublicKey, [options, callback])</code><br>比如：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">jwt.verify(token).then(decode &#x3D;&gt; &#123;</span><br><span class="line">    req.query.decode &#x3D; decode</span><br><span class="line">    next()</span><br><span class="line">&#125;).catch(message &#x3D;&gt; res.send(&#123;</span><br><span class="line">    err: 1,</span><br><span class="line">    msg: &quot;token验证失效或者未登录...&quot; + message</span><br><span class="line">&#125;))</span><br></pre></td></tr></table></figure></div>
<p>　[token]: 制作后的token<br>　[secretOrPublicKey]: 解密规则，字符串，或者公钥<br>　[callback：]: 回调 err 错误信息 decode 成功后的信息<br>　[options]: expiresIn 过期时间</p>
<p><strong>④token删除</strong><br>有客户端，负责删除</p>
<h2 id="两者比较"><a href="#两者比较" class="headerlink" title="两者比较"></a>两者比较</h2><table>
<thead>
<tr>
<th></th>
<th>session</th>
<th>token</th>
</tr>
</thead>
<tbody><tr>
<td>服务端保存用户信息</td>
<td>√</td>
<td>×</td>
</tr>
<tr>
<td>避免CSRF攻击</td>
<td>×</td>
<td>√</td>
</tr>
<tr>
<td>安全性</td>
<td>一般</td>
<td>高</td>
</tr>
<tr>
<td>多服务器粘性问题</td>
<td>存在</td>
<td>不存在</td>
</tr>
</tbody></table>
<blockquote>
<p>多服务器粘性问题：<br>　当在应用中进行 session的读，写或者删除操作时，会有一个文件操作发生在操作系统的temp 文件夹下，至少在第一次时肯定会有。<br>　假设有多台服务器并且 session 在第一台服务上创建。当你再次发送请求并且这个请求落在另一台服务器上，session 信息并不存在并且会获得一个“未认证”的响应。你可以通过一个粘性 session 解决这个问题。<br>　然而，在基于 token 的认证中，这个问题很自然就被解决了。使用token不会出现粘性 session 的问题，因为在每个发送到服务器的请求中这个请求的 token 都会被拦截</p>
</blockquote>
]]></content>
      <categories>
        <category>node</category>
      </categories>
  </entry>
  <entry>
    <title>mongodb</title>
    <url>/jackhuang-haohua.github.io/2019/09/06/2020-03-mongo/</url>
    <content><![CDATA[<h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><p>非关系、缓存型型数据库，又叫nosql，常用于大规模数据集合，多重数据种类的使用场景</p>
<ol>
<li><p><a href="https://www.mongodb.com/download-center" target="_blank">下载</a>，<a href="https://www.cnblogs.com/keyi/p/10984514.html" target="_blank">安装帮助</a></p>
</li>
<li><p>配置数据文件存储位置：<br>找到安装目录 D:\web-software\mongo\data\db</p>
<blockquote>
<p>data和db目录要手动创建</p>
</blockquote>
</li>
<li><p>服务端启动:<br>找到安装目录 &gt; <code>mongod --dbpath</code>路径，比如<code>mongod --dbpath E:\study\database\mongodb\data\db</code></p>
</li>
<li><p>客户端启动:<br>找到安装目录&gt; mongo 回车</p>
</li>
<li><p>配置环境变量<br>为了在任意盘符下去都可以启动  mongod服务端|mongo客户端，把安装目录添加到环境变量</p>
</li>
</ol>
<h2 id="对比mysql"><a href="#对比mysql" class="headerlink" title="对比mysql"></a>对比mysql</h2><p><strong>mysql vs mongodb</strong></p>
<table>
<thead>
<tr>
<th>mysql</th>
<th>mongoDb</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>database(库)</td>
<td>database(库)</td>
<td></td>
</tr>
<tr>
<td>table(表)</td>
<td>collection(集合)</td>
<td></td>
</tr>
<tr>
<td>row(一条数据)</td>
<td>document(文档)</td>
<td></td>
</tr>
<tr>
<td>column(字段)</td>
<td>field(区域)</td>
<td></td>
</tr>
<tr>
<td>二维表，每次存到磁盘</td>
<td>json，存在缓存，关闭时存到磁盘</td>
<td><strong>存储方式</strong></td>
</tr>
</tbody></table>
<h2 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h2><h3 id="①mongodb数据库的相关命令："><a href="#①mongodb数据库的相关命令：" class="headerlink" title="①mongodb数据库的相关命令："></a>①mongodb数据库的相关命令：</h3><ul>
<li>常看所有的数据库：show dbs</li>
<li>切换/创建数据库：use student</li>
<li>删除数据库： db.dropDatabase()</li>
<li>创建集合：db.createCollection(‘表名’,{配置})   ===&gt; db.bbb.isCapped()</li>
<li>查看集合：db.getCollectionNames()  /  show collections</li>
<li>插入数据：db.user.insert({}) </li>
<li>更新数据：db.user.update({条件},{$set:{age:25}},false,true)</li>
<li>查询数据：<ul>
<li>db.user.find({})  </li>
<li>db.user.find({},{age:1,_id:0})</li>
<li>db.user.find({}).skip(3).limit(3)</li>
</ul>
</li>
<li>排序：db.user.find().sort({age:1})</li>
</ul>
<h3 id="②库操作"><a href="#②库操作" class="headerlink" title="②库操作"></a>②库操作</h3><ul>
<li>查: show dbs</li>
<li>增:    use 库名</li>
<li>删: db.dropDatabase()</li>
</ul>
<h3 id="③集合-表-操作"><a href="#③集合-表-操作" class="headerlink" title="③集合(表)操作"></a>③集合(表)操作</h3><ul>
<li>建：db.createCollection(‘表名’,{配置})<ul>
<li>配置：{size:文件大小,capped:true,max:条数|文档数} capped定量</li>
<li>db.表(集合).isCapped() 返回 true/false 是否是定量</li>
</ul>
</li>
<li>查：show collections / db.getCollectionNames()</li>
<li>删：db.表|集合.drop()</li>
</ul>
<h3 id="④文档-row-操作"><a href="#④文档-row-操作" class="headerlink" title="④文档(row)操作"></a>④文档(row)操作</h3><p><strong>增</strong></p>
<ul>
<li>db.集合.save({}) //添加一条，相同ID字段会进行插入更改</li>
<li>db.集合.insert({})  //添加一条，相同ID字段不会进行插入更改</li>
<li>db.insertOne({}) //添加一条</li>
<li>db.集合.save([{},{}]) //多条</li>
<li>db.集合.insert([{},{}]) //多条</li>
</ul>
<p><strong>删</strong></p>
<ul>
<li>db.集合.deleteOne({要删数据条件描述}) //一条</li>
<li>db.集合.remove({},true)  //一条</li>
<li>db.集合.remove({要删数据条件描述}) //多条</li>
<li>db.集合.remove({}) //清空表</li>
</ul>
<p><strong>改</strong></p>
<ul>
<li>db.集合.udpate({查询条件},{替换条件},插入boolean,全替换boolean)<ul>
<li>下面一行，将所有的用户名为李四的年龄全都设置为20岁</li>
<li>db.user.update({username:”李四”},{$set:{age:20}},false,true)</li>
</ul>
</li>
<li>第三个参数：如果更新的数据没有的话则插入，默认不插入</li>
<li>第四个参数：默认只更新一条数据，如果要批量更新设置true</li>
</ul>
<p><strong>查</strong></p>
<ul>
<li>所有：db.集合.find(条件)</li>
<li>条数: db.集合.find().count()</li>
<li>去重：db.集合.distinct(key).length</li>
<li>db.集合.find({条件},{指定要显示列区域})</li>
</ul>
<p><strong>查询条件</strong></p>
<blockquote>
<p>​     {age:22}                 age == 22<br>​        {age:{   $gt:22 }}    age &gt; 22<br>​        {age:{  $lt:22}}      age &lt; 22<br>​        {age:{$gte: 22}}    age&gt;=22<br>​        {age:{$lte:22}}      age&lt;=22<br>​        {age:{ $lte:122,$gte:22}}    age&lt;=122 &amp;&amp; age&gt;=22<br>​        {$or:[{age:22},{age:122}]}    22 or 122<br>​        {key:value,key2:value2}  value &amp;&amp; value2<br>​        {name:/正则/}</p>
</blockquote>
<p><strong>替换条件</strong></p>
<blockquote>
<p>{$set:{数据}}<br>{inc:{age:5}}    //在原来的基础上年龄递增5<br>指定要显示列区域<br>username:1 显示这个区域<br>username:0 不显示这个区域<br>_id 是默认显示</p>
</blockquote>
<p><strong>排序</strong></p>
<ul>
<li>db.集合.find().sort({key:1,key2:-1}) //升</li>
<li>db.集合.find().sort({key:-1})    //降</li>
</ul>
<p><strong>限定</strong></p>
<ul>
<li>db.集合.find().limit(number)  //限定</li>
<li>db.集合.find().skip(number)    //跳过</li>
<li>db.集合.findOne()//找第一个</li>
<li>db.集合.find().limit(1)  //查询第一条</li>
</ul>
<h2 id="node-mongodb客户端"><a href="#node-mongodb客户端" class="headerlink" title="node + mongodb客户端"></a>node + mongodb客户端</h2><h3 id="①安装-引入"><a href="#①安装-引入" class="headerlink" title="①安装+引入"></a>①安装+引入</h3><p><code>npm install mongodb -S</code><br><code>var mysql = require(&#39;mongodb&#39;)</code></p>
<h3 id="②实例化并连接"><a href="#②实例化并连接" class="headerlink" title="②实例化并连接"></a>②实例化并连接</h3><p><code>let mongoCt = mongodb.MongoClient</code><br><code>mongoCt.connect(&#39;协议://地址:端口&#39;,回调(err,client))</code></p>
<h3 id="③链接库和集合"><a href="#③链接库和集合" class="headerlink" title="③链接库和集合"></a>③链接库和集合</h3><p><code>let db = client.db(&#39;库名&#39;)</code><br><code>let user = db.collection(&#39;集合名&#39;)</code></p>
<h3 id="④集合操作"><a href="#④集合操作" class="headerlink" title="④集合操作"></a>④集合操作</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//user.API()  集合操作 	返回 对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//增</span></span><br><span class="line">	insertOne(对象数据,(err,res)=&gt;&#123;&#125;)  <span class="comment">//res = 对象  </span></span><br><span class="line">	insertMany(arr数据,(err,res)=&gt;&#123;&#125;) <span class="comment">//res = 对象  </span></span><br><span class="line">    <span class="comment">//res.result.n 结果  ok 状态</span></span><br><span class="line">    <span class="comment">//res.ops内容  数组</span></span><br><span class="line">    <span class="comment">//result.insertedId 插入后的id</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//删:</span></span><br><span class="line">  deleteOne(&#123;条件&#125;,(err,result)=&gt;&#123;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//改:</span></span><br><span class="line">  updateOne(&#123;条件&#125;,&#123;更新后&#125;,(err,res)=&gt;&#123;&#125;)</span><br><span class="line">  updateMany(&#123;条件&#125;,&#123;更新后&#125;,(err,res)=&gt;&#123;&#125;)</span><br><span class="line">  updateMany(&#123;条件&#125;,&#123;更新后&#125;,&#123;配置&#125;,(err,res)=&gt;&#123;&#125;)</span><br><span class="line">    <span class="comment">//配置: upsert:true 插入	projection:true 全局替换</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//查:</span></span><br><span class="line">  user.find(&#123;条件&#125;,&#123;<span class="attr">skip</span>:<span class="number">1</span>,<span class="attr">limit</span>:<span class="number">1</span>,<span class="attr">projection</span>:&#123;<span class="attr">key</span>:<span class="number">1</span>&#125;&#125;,(err,result)=&gt;&#123;result=对象&#125;)</span><br><span class="line">  user.find(&#123;条件&#125;,&#123;<span class="attr">projection</span>:&#123;<span class="attr">key</span>:<span class="number">0</span>&#125;&#125;).toArray(<span class="function">(<span class="params">err,result</span>)=&gt;</span>&#123;reulst==arr&#125;)</span><br><span class="line">  user.countDocuments(<span class="function">(<span class="params">err,num</span>)=&gt;</span>&#123;num返回数量&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//排</span></span><br><span class="line">  user.find(..).sort(&#123;<span class="attr">key</span>:<span class="number">-1</span>&#125;).toArray..</span><br><span class="line">  user.find(&#123;&#125;,&#123;<span class="attr">projection</span>:&#123;&#125;,<span class="attr">sort</span>:&#123;<span class="attr">key</span>:<span class="number">-1</span>&#125;&#125;).toArray..</span><br></pre></td></tr></table></figure></div>

<h3 id="⑤关闭库"><a href="#⑤关闭库" class="headerlink" title="⑤关闭库"></a>⑤关闭库</h3><p><code>client.close()</code></p>
<h3 id="⑥node-mongoose"><a href="#⑥node-mongoose" class="headerlink" title="⑥node  +  mongoose"></a>⑥node  +  mongoose</h3><p>一款mongodb客户端：<a href="https://mongoosejs.com/" target="_blank">官网</a>，<a href="http://www.mongoosejs.net/" target="_blank">中文官网</a></p>
<h3 id="⑦可视化客户端"><a href="#⑦可视化客户端" class="headerlink" title="⑦可视化客户端"></a>⑦可视化客户端</h3><ul>
<li><a href="https://robomongo.org/" target="_blank">Robo 3T</a></li>
<li><a href="https://studio3t.com/download-thank-you/?OS=win64" target="_blank">Studio3t</a></li>
</ul>
<h3 id="⑧mongo封装"><a href="#⑧mongo封装" class="headerlink" title="⑧mongo封装"></a>⑧mongo封装</h3><p>一般会将node中对mongo的操作封装起来，这个网上太多了，随便搜一下复制就有了。</p>
]]></content>
      <categories>
        <category>node</category>
      </categories>
  </entry>
  <entry>
    <title>登录注册与验证码</title>
    <url>/jackhuang-haohua.github.io/2019/06/06/2020-03-vue+node%E6%B3%A8%E5%86%8C%E4%B8%8E%E9%AA%8C%E8%AF%81/</url>
    <content><![CDATA[<h1 id="node接口"><a href="#node接口" class="headerlink" title="node接口"></a>node接口</h1><p>node验证码图片</p>
<h2 id="接口一接收登录数据并写入数据库"><a href="#接口一接收登录数据并写入数据库" class="headerlink" title="接口一接收登录数据并写入数据库"></a>接口一接收登录数据并写入数据库</h2><h3 id="src-serve-js"><a href="#src-serve-js" class="headerlink" title="src/serve.js"></a>src/serve.js</h3><p>利用express监听窗口，接住根路由</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.引入express插件</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"><span class="keyword">const</span> &#123;</span><br><span class="line">    PORT</span><br><span class="line">&#125; = <span class="built_in">require</span>(<span class="string">'./config.json'</span>);</span><br><span class="line"><span class="comment">// 引入routers/index.js文件</span></span><br><span class="line"><span class="keyword">const</span> rootRouter = <span class="built_in">require</span>(<span class="string">'./routers'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.接口根路由</span></span><br><span class="line">app.use(<span class="string">'/api'</span>, rootRouter);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.监听port端口，端口配置文件放在了外面</span></span><br><span class="line">app.listen(PORT, () =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'server is running on port %s'</span>, PORT);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></div>

<h3 id="src-routers-index-js"><a href="#src-routers-index-js" class="headerlink" title="src/routers/index.js"></a>src/routers/index.js</h3><p>引入各种中间件，接住/user，/vcode接口</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 关键代码</span></span><br><span class="line"><span class="keyword">const</span> Router = express.Router();</span><br><span class="line"></span><br><span class="line">Router.use(<span class="string">'/user'</span>, userRouter);</span><br><span class="line">Router.use(<span class="string">'/vcode'</span>, vcodeRouter);</span><br></pre></td></tr></table></figure></div>

<h3 id="src-routers-user-js"><a href="#src-routers-user-js" class="headerlink" title="src/routers/user.js"></a>src/routers/user.js</h3><p>登录接口</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">const</span> Router = express.Router();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 操作数据库的各种方法</span></span><br><span class="line"><span class="keyword">const</span> db = <span class="built_in">require</span>(<span class="string">'../db'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// /api/user/reg</span></span><br><span class="line">Router.post(<span class="string">'/reg'</span>,<span class="keyword">async</span> (req,res)=&gt;&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 拿到前端的数据</span></span><br><span class="line">    <span class="keyword">let</span> &#123;username,password,vcode&#125; = req.body;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断传入得vcode与session中的是否一致</span></span><br><span class="line">    <span class="keyword">if</span>(vcode.toLowerCase() !== req.session.vcode)&#123;</span><br><span class="line">        res.send(&#123;<span class="attr">status</span>:<span class="number">400</span>,<span class="attr">msg</span>:<span class="string">'vcode is error'</span>&#125;);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 写入数据库，create是封装好的，写入数据库的方法</span></span><br><span class="line">    <span class="keyword">let</span> data = <span class="keyword">await</span> db.create(<span class="string">'user'</span>,&#123;username,password,<span class="attr">regtime</span>:<span class="keyword">new</span> <span class="built_in">Date</span>()&#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 告诉前端我们成功了</span></span><br><span class="line">    res.send(&#123;<span class="attr">status</span>:<span class="number">200</span>,<span class="attr">msg</span>:<span class="string">'success'</span>&#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = Router;</span><br></pre></td></tr></table></figure></div>

<h2 id="接口二vcode发送验证码图片"><a href="#接口二vcode发送验证码图片" class="headerlink" title="接口二vcode发送验证码图片"></a>接口二vcode发送验证码图片</h2><p>这里有分为两个，第一个接口返回图片与验证数字，第二个接口为验证数字是否正确</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">const</span> Router = express.Router();</span><br><span class="line"><span class="comment">// 引入svg-captcha模块</span></span><br><span class="line"><span class="keyword">const</span> svgCaptcha = <span class="built_in">require</span>(<span class="string">'svg-captcha'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123;</span><br><span class="line">    formatData</span><br><span class="line">&#125; = <span class="built_in">require</span>(<span class="string">'../utils'</span>);</span><br><span class="line"></span><br><span class="line">Router</span><br><span class="line">    <span class="comment">// 请求/api/vcode/image</span></span><br><span class="line">    .get(<span class="string">'/image'</span>, (req, res) =&gt; &#123;</span><br><span class="line">        <span class="keyword">let</span> options = &#123;</span><br><span class="line">            <span class="comment">// size:6, //发送几位数的验证码</span></span><br><span class="line">            ignoreChars: <span class="string">'0o1i'</span>, <span class="comment">//验证码忽略四个字符</span></span><br><span class="line">            width: <span class="number">100</span>, <span class="comment">// width of captcha</span></span><br><span class="line">            height: <span class="number">50</span>, <span class="comment">// height of captcha</span></span><br><span class="line">            fontSize: <span class="number">60</span> <span class="comment">// captcha text size</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用插件，得到两个参数，data是验证码图片，text是验证的数字</span></span><br><span class="line">        <span class="keyword">var</span> captcha = svgCaptcha.create(options); <span class="comment">// &#123;data,text&#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Session 后端临时存储数据</span></span><br><span class="line">        <span class="comment">// 把验证码存在session,以便进行后期校验</span></span><br><span class="line">        req.session.vcode = captcha.text.toLowerCase()</span><br><span class="line"></span><br><span class="line">        <span class="comment">// res.type('svg');</span></span><br><span class="line">        res.send(captcha.data);</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 前端再次请求接口，并携带vcode，后端校验验证码是否正确</span></span><br><span class="line">    .get(<span class="string">'/check'</span>, <span class="keyword">async</span> (req, res) =&gt; &#123;</span><br><span class="line">        <span class="keyword">let</span> &#123;</span><br><span class="line">            vcode</span><br><span class="line">        &#125; = req.query;</span><br><span class="line">        <span class="keyword">if</span> (vcode == req.session.vcode) &#123;</span><br><span class="line"></span><br><span class="line">            res.send(formatData())</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            res.send(formatData(&#123;</span><br><span class="line">                status: <span class="number">401</span></span><br><span class="line">            &#125;))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = Router;</span><br></pre></td></tr></table></figure></div>

<h1 id="element库的登录页面"><a href="#element库的登录页面" class="headerlink" title="element库的登录页面"></a>element库的登录页面</h1><h2 id="vue-cli创建项目"><a href="#vue-cli创建项目" class="headerlink" title="vue-cli创建项目"></a>vue-cli创建项目</h2><h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><p><strong>先安装vue-router，然后src/router/index.js里：</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span>;</span><br><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">'vue-router'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Home <span class="keyword">from</span> <span class="string">'../pages/Home.vue'</span></span><br><span class="line"><span class="keyword">import</span> Reg <span class="keyword">from</span> <span class="string">'../pages/Reg.vue'</span></span><br><span class="line"><span class="keyword">import</span> Login <span class="keyword">from</span> <span class="string">'../pages/Login.vue'</span></span><br><span class="line"></span><br><span class="line">Vue.use(VueRouter);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">    routes:[&#123;</span><br><span class="line">        path:<span class="string">'/home'</span>,</span><br><span class="line">        component:Home</span><br><span class="line">    &#125;,&#123;</span><br><span class="line">        path:<span class="string">'/'</span>,</span><br><span class="line">        redirect:<span class="string">'/home'</span></span><br><span class="line">    &#125;,&#123;</span><br><span class="line">        path:<span class="string">'/reg'</span>,</span><br><span class="line">        component:Reg</span><br><span class="line">    &#125;,&#123;</span><br><span class="line">        path:<span class="string">'/login'</span>,</span><br><span class="line">        component:Login</span><br><span class="line">    &#125;]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div>
<p><strong>src/main.js里引入<code>import router from &#39;./router&#39;</code></strong><br><strong>src/App.vue里<code>&lt;router-view/&gt;</code>作为插槽</strong></p>
<h2 id="使用element框架布局"><a href="#使用element框架布局" class="headerlink" title="使用element框架布局"></a>使用element框架布局</h2><p>1.安装：<code>npm i element-ui</code><br>2.App.vue中</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span>;</span><br><span class="line"><span class="keyword">import</span> ElementUI <span class="keyword">from</span> <span class="string">'element-ui'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'element-ui/lib/theme-chalk/index.css'</span>;</span><br><span class="line"></span><br><span class="line">Vue.use(ElementUI);</span><br></pre></td></tr></table></figure></div>
<p>3.src/pages/Reg.vue，直接复制Element文档中的内容</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1&gt;免费注册&lt;&#x2F;h1&gt;</span><br><span class="line">    &lt;el-form</span><br><span class="line">      :model&#x3D;&quot;ruleForm&quot;</span><br><span class="line">      status-icon</span><br><span class="line">      :rules&#x3D;&quot;rules&quot;</span><br><span class="line">      ref&#x3D;&quot;ruleForm&quot;</span><br><span class="line">      label-width&#x3D;&quot;100px&quot;</span><br><span class="line">      class&#x3D;&quot;demo-ruleForm&quot;</span><br><span class="line">    &gt;</span><br><span class="line">      &lt;el-form-item label&#x3D;&quot;用户名&quot; prop&#x3D;&quot;username&quot;&gt;</span><br><span class="line">        &lt;el-input v-model&#x3D;&quot;ruleForm.username&quot;&gt;&lt;&#x2F;el-input&gt;</span><br><span class="line">      &lt;&#x2F;el-form-item&gt;</span><br><span class="line">      &lt;el-form-item label&#x3D;&quot;密码&quot; prop&#x3D;&quot;password&quot;&gt;</span><br><span class="line">        &lt;el-input type&#x3D;&quot;password&quot; v-model&#x3D;&quot;ruleForm.password&quot; autocomplete&#x3D;&quot;off&quot;&gt;&lt;&#x2F;el-input&gt;</span><br><span class="line">      &lt;&#x2F;el-form-item&gt;</span><br><span class="line">      &lt;el-form-item label&#x3D;&quot;验证码&quot; prop&#x3D;&quot;vcode&quot;&gt;</span><br><span class="line">        &lt;el-input v-model&#x3D;&quot;ruleForm.vcode&quot;&gt;&lt;&#x2F;el-input&gt;</span><br><span class="line">        &lt;div v-html&#x3D;&quot;imageVcode&quot; @click&#x3D;&quot;getVCode&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">      &lt;&#x2F;el-form-item&gt;</span><br><span class="line">      &lt;el-form-item&gt;</span><br><span class="line">        &lt;el-button type&#x3D;&quot;primary&quot; @click&#x3D;&quot;submitForm(&#39;ruleForm&#39;)&quot;&gt;提交&lt;&#x2F;el-button&gt;</span><br><span class="line">      &lt;&#x2F;el-form-item&gt;</span><br><span class="line">    &lt;&#x2F;el-form&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  &#x2F;&#x2F; 表单需要的一些数据</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">        imageVcode:&#39;&#39;,</span><br><span class="line">        ruleForm: &#123;</span><br><span class="line">        username: &quot;&quot;,</span><br><span class="line">        password: &quot;&quot;,</span><br><span class="line">        vcode: &quot;&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#x2F;&#x2F; 给要发送的 username&#x2F;password&#x2F;vcode 一些规则</span><br><span class="line">        rules: &#123;</span><br><span class="line">            username: [&#123; required: true, trigger: &quot;blur&quot; &#125;],</span><br><span class="line">            password: [</span><br><span class="line">            &#123; required: true, trigger: &quot;blur&quot; &#125;,</span><br><span class="line">            &#123; min: 6, max: 20, trigger: &quot;blur&quot; &#125;</span><br><span class="line">            ],</span><br><span class="line">            vcode: [&#123; required: true, trigger: &quot;blur&quot; &#125;]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></div>

<h2 id="发送请求"><a href="#发送请求" class="headerlink" title="发送请求"></a>发送请求</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">import axios from &#39;axios&#39;;</span><br><span class="line">import &#123;Message&#125; from &#39;element-ui&#39;;</span><br><span class="line">export default &#123;</span><br><span class="line">  created()&#123;</span><br><span class="line">     &#x2F;&#x2F; 请求验证码图片 </span><br><span class="line">     this.getVCode();</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    getVCode()&#123;</span><br><span class="line">      axios.get(&#39;http:&#x2F;&#x2F;localhost:4000&#x2F;api&#x2F;vcode&#x2F;image&#39;).then(res&#x3D;&gt;&#123;</span><br><span class="line">          this.imageVcode &#x3D; res.data;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    submitForm(formName) &#123;</span><br><span class="line">      this.$refs[formName].validate(valid &#x3D;&gt; &#123;</span><br><span class="line">        if (valid) &#123;</span><br><span class="line">            &#x2F;&#x2F; 校验成功发送请求到后端</span><br><span class="line">            let &#123;username,password,vcode&#125; &#x3D; this.ruleForm;</span><br><span class="line">            &#x2F;&#x2F; axios发送请求</span><br><span class="line">            axios.post(&#39;http:&#x2F;&#x2F;localhost:4000&#x2F;api&#x2F;user&#x2F;reg&#39;,&#123;</span><br><span class="line">                &#x2F;&#x2F; 携带三个信息</span><br><span class="line">                username,password,vcode</span><br><span class="line">            &#125;).then(res&#x3D;&gt;&#123;</span><br><span class="line">                &#x2F;&#x2F; &#x2F;user接口传过来的信息</span><br><span class="line">                if(res.data.status &#x3D;&#x3D;&#x3D; 400)&#123;</span><br><span class="line">                    &#x2F;&#x2F; 利用element-ui的Message方法，弹出框</span><br><span class="line">                    Message.error(&#39;验证码错误&#39;);</span><br><span class="line">                    return</span><br><span class="line">                &#125;</span><br><span class="line">                &#x2F;&#x2F; 成功的话跳到路由&#x2F;home</span><br><span class="line">                this.$router.push(&#39;&#x2F;home&#39;)</span><br><span class="line">            &#125;)</span><br><span class="line"></span><br><span class="line">        &#125; else &#123;</span><br><span class="line">          console.log(&quot;error submit!!&quot;);</span><br><span class="line">          return false;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></div>
<h2 id="session插件"><a href="#session插件" class="headerlink" title="session插件"></a>session插件</h2><p>类似于localsession，session是后端暂时储藏数据的地方<br>1.npm i express-session -S<br>2.app.js中配置、使用(或者做成单独的组件)</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// session.js中</span></span><br><span class="line"><span class="keyword">const</span> session = <span class="built_in">require</span>(<span class="string">'express-session'</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = session(&#123; </span><br><span class="line">    resave: <span class="literal">true</span>,</span><br><span class="line">    saveUninitialized: <span class="literal">true</span>,</span><br><span class="line">    secret: <span class="string">'laoxie'</span>, </span><br><span class="line">    <span class="comment">// session.id有效期5分钟</span></span><br><span class="line">    cookie: &#123; <span class="attr">maxAge</span>:<span class="number">1000</span>*<span class="number">60</span>*<span class="number">5</span>&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// app.js中</span></span><br><span class="line"><span class="keyword">const</span> &#123;</span><br><span class="line">  session</span><br><span class="line">&#125; = <span class="built_in">require</span>(<span class="string">'./routes/session.js'</span>);</span><br><span class="line">app.use(session)</span><br></pre></td></tr></table></figure></div>

<p><strong>RESTful规范</strong><br>编写接口需要最好遵从RESTful规范</p>
<ul>
<li>增=&gt;post</li>
<li>删=&gt;delete</li>
<li>改=&gt;put/patch=&gt;完全修改/部分修改</li>
<li>查=&gt;get</li>
</ul>
]]></content>
      <categories>
        <category>node</category>
      </categories>
  </entry>
  <entry>
    <title>VUE项目-电影类WebApp</title>
    <url>/jackhuang-haohua.github.io/2019/05/30/2020-03-vue%E5%8D%96%E5%BA%A7/</url>
    <content><![CDATA[<h1 id="项目简介"><a href="#项目简介" class="headerlink" title="项目简介"></a>项目简介</h1><p>2020-3-20更新：<br>重新整理了一下。</p>
<p>原地址：<a href="https://m.maizuo.com/v5/#/films/nowPlaying" target="_blank">卖座电影</a>；<br>就做了几个页面，有一些页面写法相同就没做了，因为主要目的是把vue过一遍；<br><img src="https://s1.ax1x.com/2020/04/25/J6VLYn.jpg" alt="J6VLYn.jpg"></p>
<ul>
<li>首页：轮播图、列表页</li>
<li>详情页：由列表页id生成详情页，照片可放大预览</li>
<li>影院列表：可以按地区筛选</li>
<li>搜索页面：按影院名模糊搜索</li>
<li>其他：vuex，路由啥的能用的都用了</li>
</ul>
<h1 id="vue-cli"><a href="#vue-cli" class="headerlink" title="vue-cli"></a>vue-cli</h1><blockquote>
<p>前端工程化开发项目是主流，我们需要搭建vue开发环境，一般会选择webpack进行项目的构建；</p>
</blockquote>
<h2 id="安装vue-cli"><a href="#安装vue-cli" class="headerlink" title="安装vue-cli"></a>安装vue-cli</h2><p><code>npm install -g @vue/cli</code>或者<code>yarn global add @vue/cli</code><br>输入<code>vue -v</code>检测是否安装成功</p>
<h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><p>一、新建项目文件夹maizuo(卖座)，在vscode中打开，在左边栏里右键=&gt;在终端打开<br>二、输入<code>vue create 文件名</code>命令表示在maizuo文件夹里创建又一个项目文件夹，也可以直接<code>vue create .</code>在当前文件夹创建，之后会有几个选项：<br>1.Generate project in current directory? (Y/n) =&gt; 在当前文件夹创建吗 =&gt; y</p>
<p>2.default (babel, eslint) =&gt; 安装默认插件 / Manually select features =&gt; 自己决定安装哪些插件 =&gt; 选择第二个</p>
<p>3.上下键+空格进行操作，回车确定，先安装标注说明的5个插件<br> ( ) Babel =&gt; 使项目可以支持es6语法<br> ( ) TypeScript<br> ( ) Progressive Web App (PWA) Support<br> ( ) Router =&gt; 路由用到的插件<br> ( ) Vuex =&gt; 状态管理<br> ( ) CSS Pre-processors =&gt; css插件<br> ( ) Linter / Formatter =&gt; 代码规范化<br> ( ) Unit Testing<br> ( ) E2E Testing</p>
<p> 4.Use history mode for router? =&gt; 是否使用路由模式 =&gt; y</p>
<p> 5.css预编译插件，选第一个；sass安装不上的话，试试<code>cnpm i node-sass</code></p>
<p> 6.ESLint模式，选默认的第一个，ESLint with error prevention only / Lint on save；</p>
<p> 7.Where do you prefer placing config for Babel, ESLint, etc.? =&gt; 配置是要单独一个文件夹还是放在package.json里？ =&gt; 选第一个</p>
<p> 8.Save this as a preset for future projects? =&gt; 保存这次的预设吗？ =&gt; y =&gt; Save preset as:预设的名字</p>
<p> 9.项目相关指令<br> npm run serve 开发环境构建，运行项目<br> ​npm run build 生产环境构建，生成可上线的dist文件夹<br> npm run lint 代码检测工具</p>
<h1 id="vue-config配置"><a href="#vue-config配置" class="headerlink" title="vue.config配置"></a>vue.config配置</h1><p> 我们需要配置一些信息</p>
<h2 id="eslint"><a href="#eslint" class="headerlink" title="eslint"></a>eslint</h2><p> 1.代码检测工具，安装后，代码不符合规范则会弹出警告窗，<br> 2.可在根路径下新建vue.config.js文件修改配置，如下：<br> <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"> <span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    open: <span class="literal">true</span>, <span class="comment">//默认开启浏览器</span></span><br><span class="line">    port: <span class="number">8000</span>, <span class="comment">//更改默认端口号为8000</span></span><br><span class="line">    overlay: &#123; <span class="comment">// eslint遮罩层</span></span><br><span class="line">      warnings: <span class="literal">false</span>,</span><br><span class="line">      errors: <span class="literal">false</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  lintOnSave: <span class="literal">false</span>, <span class="comment">//直接关闭eslint检查</span></span><br><span class="line">&#125;</span><br><span class="line"> <span class="number">3.</span>相关规则可在.eslintrc.js文件修改，但不建议修改，因为要统一规范，例如：</span><br><span class="line"><span class="string">``</span><span class="string">`.eslintrc.js</span></span><br><span class="line"><span class="string">rules: &#123;</span></span><br><span class="line"><span class="string">  'quotes':'off',   //关闭eslint引号验证</span></span><br><span class="line"><span class="string">  'key-spacing':'off', //关闭关键词前面空格的验证</span></span><br><span class="line"><span class="string">  'no-console': process.env.NODE_ENV === 'production' ? 'error' : 'off',</span></span><br><span class="line"><span class="string">  'no-debugger': process.env.NODE_ENV === 'production' ? 'error' : 'off'</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure></div><br> 4.规范文章<a href="https://www.cnblogs.com/mingjian/p/9361027.html" target="_blank">明济安的博客</a></p>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2> <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"> <span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    open: <span class="literal">true</span>, <span class="comment">//默认开启浏览器</span></span><br><span class="line">    port: <span class="number">8000</span>, <span class="comment">//更改默认端口号为8000</span></span><br><span class="line">    overlay: &#123; <span class="comment">// 遮罩层</span></span><br><span class="line">      warnings: <span class="literal">false</span>,</span><br><span class="line">      errors: <span class="literal">false</span></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">//代理配置，这里是登录页面要用到</span></span><br><span class="line">    proxy: &#123;</span><br><span class="line">      <span class="string">"/info"</span>: &#123;</span><br><span class="line">        target: <span class="string">"http://47.104.70.82:3000"</span>,</span><br><span class="line">        changeOrigin: <span class="literal">true</span>,</span><br><span class="line">        pathRewrite: &#123;</span><br><span class="line">          <span class="string">"^/info"</span>: <span class="string">""</span></span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// alias别名配置，</span></span><br><span class="line">  <span class="comment">// 配置后，src/views/xxx 可以写成 @/views/xxx</span></span><br><span class="line">  configureWebpack: &#123;</span><br><span class="line">    resolve: &#123;</span><br><span class="line">      alias: &#123;</span><br><span class="line">        <span class="string">'assets'</span>: <span class="string">'@/assets'</span>,</span><br><span class="line">        <span class="string">'con'</span>: <span class="string">'@/components'</span>,</span><br><span class="line">        <span class="string">'views'</span>: <span class="string">'@/views'</span>,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// bulid打包路径配置</span></span><br><span class="line">  publicPath: <span class="string">'/vue-demo'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h1 id="移动端注意事项"><a href="#移动端注意事项" class="headerlink" title="移动端注意事项"></a>移动端注意事项</h1><p>1.单位<br>我们在PS里量到的100px为逻辑像素，但手机的物理像素各不相同，因此要换个能适配的单位</p>
<ul>
<li>src/utils中创建rem.js，内容如下：<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.documentElement.style.fontSize =</span><br><span class="line">  <span class="built_in">document</span>.documentElement.clientWidth / <span class="number">3.75</span> + <span class="string">"px"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.onresize = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">document</span>.documentElement.style.fontSize =</span><br><span class="line">    <span class="built_in">document</span>.documentElement.clientWidth / <span class="number">3.75</span> + <span class="string">"px"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li>
<li>src/main.js中引入，<code>import &quot;@/utils/rem&quot;</code></li>
<li>此后，我们量到100px，样式中写1rem即可</li>
</ul>
<p>2.其他还没总结</p>
<h1 id="配置路由"><a href="#配置路由" class="headerlink" title="配置路由"></a>配置路由</h1><p>分为两部分来讲</p>
<h2 id="简单配置"><a href="#简单配置" class="headerlink" title="简单配置"></a>简单配置</h2><p>1.现在许多应用都是SPA应用（single page application），就是切换内容时浏览器不刷新，页面局部刷新，用户体验更好；<br>Vue中可以通过官方提供的vue-router插件来实现单页面，原理就是通过检测地址栏变化后将对应的路由组件进行切换（卸载和安装）；</p>
<p>2.SPA vs MPA<br>spa图片</p>
<p>3.简单实现<br>1)cnpm install vue-router -S 或者 yarn add vue-router -S 安装vue-router<br>2)src/views中，新建flims.vue；src/App.vue中，template&gt;div，加上<code>&lt;router-view&gt;&lt;/router-view&gt;</code><br>3)src/router/index.js中</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.引入插件</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">'vue-router'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.引入组件，与路由配对</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./../App.vue'</span></span><br><span class="line"><span class="keyword">import</span> films <span class="keyword">from</span> <span class="string">'./../views/films/films.vue'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.让Vue使用VueRouter，内部使用了install完成</span></span><br><span class="line">Vue.use(VueRouter)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4.配置路由</span></span><br><span class="line"><span class="keyword">const</span> routes = [&#123;</span><br><span class="line">    <span class="comment">// 根路由，即输入localhost:8000，会打开App.vue</span></span><br><span class="line">    path: <span class="string">'/'</span>,</span><br><span class="line">    component: App,</span><br><span class="line">    <span class="comment">// 根路由的子路由</span></span><br><span class="line">    children: [&#123;</span><br><span class="line">        path: <span class="string">'/films'</span>,</span><br><span class="line">        component: films,</span><br><span class="line">      &#125;]</span><br><span class="line">  &#125;]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5.实例化对象</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  routes</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 6.暴露路由</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure></div>

<p>4)src/main.js中</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">'./router'</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  router, <span class="comment">//注册router，各组件就能就能用$router</span></span><br><span class="line">  store, <span class="comment">//各组件就能用$store</span></span><br><span class="line">  render: <span class="function"><span class="params">h</span> =&gt;</span> h(App)</span><br><span class="line">&#125;).$mount(<span class="string">'#app'</span>)</span><br></pre></td></tr></table></figure></div>

<p>5)此时，yarn serve启动服务，输入localhost:8000，就会打开App.vue，而App.vue中的<code>&lt;router-view&gt;&lt;/router-view&gt;</code>则是films.vue的插槽</p>
<h2 id="路由完善"><a href="#路由完善" class="headerlink" title="路由完善"></a>路由完善</h2><h3 id="1-路由懒加载"><a href="#1-路由懒加载" class="headerlink" title="1.路由懒加载"></a>1.路由懒加载</h3><p>懒加载也叫延迟加载，即在需要的时候进行加载，随用随载。在单页应用中，如果没有应用懒加载，运用webpack打包后的文件将会异常的大，造成进入首页时，需要加载的内容过多，延时过长，不利于用户体验，而运用懒加载则可以将页面进行划分，需要的时候加载页面，可以有效的分担首页所承担的加载压力，减少首页加载用时。<br>非按需加载则会把所有的路由组件块的js包打在一起。当业务包很大的时候建议用路由的按需加载（懒加载）。<br>按需加载会在页面第一次请求的时候，把相关路由组件块的js添加上；</p>
<p>简单来说，但我们点进带有flims组件的部分时，这个组件才会加载，在Network可以找到film.js<br>src/router/index.js中，代码如下：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    path: <span class="string">'/films'</span>,</span><br><span class="line">    component: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>( <span class="comment">/*webpackChunkName:'film'*/</span> <span class="string">"@/views/films"</span>),</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>更多内容参见：<a href="https://www.cnblogs.com/lijuntao/p/7777581.html" target="_blank">涛叔的博客</a></p>
<h3 id="2-多级路由"><a href="#2-多级路由" class="headerlink" title="2.多级路由"></a>2.多级路由</h3><p>就是配置路由时的children，父组件中通过<code>&lt;router-view&gt;</code>来指定子组件的位置，不再详细展开。</p>
<h3 id="3-默认路由-命名路由-路由重定向"><a href="#3-默认路由-命名路由-路由重定向" class="headerlink" title="3.默认路由/命名路由/路由重定向"></a>3.默认路由/命名路由/路由重定向</h3><p>src/router/index.js中：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 默认路由：</span></span><br><span class="line"><span class="comment">// 之前设置的路由都不满足，如http://localhost:8000/#/123则会进入error.vue</span></span><br><span class="line"><span class="comment">// 即App.vue的插槽中插入error组件，</span></span><br><span class="line">&#123;</span><br><span class="line">  path: <span class="string">"*"</span>,</span><br><span class="line">  component: <span class="built_in">Error</span></span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"><span class="comment">// 命名路由</span></span><br><span class="line"><span class="comment">// 在其他组件中，&lt;router-link :to="&#123;name:'todetail',params:&#123;id:film.filmId&#125;&#125;"&gt;跳转到detail&lt;/router-link&gt;</span></span><br><span class="line"><span class="comment">// 即App.vue中插入films组件，films组件中插入detail组件</span></span><br><span class="line">&#123;</span><br><span class="line">  name: <span class="string">'todetail'</span>,</span><br><span class="line">  path: <span class="string">'/films/detail/:id'</span>,</span><br><span class="line">  component: detail</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"><span class="comment">// 路由重定向，redirect</span></span><br><span class="line"><span class="comment">// 即输入localhost:8000/#/flims，自动变成localhost:8000/#/flims/now</span></span><br><span class="line">&#123;</span><br><span class="line">  path: <span class="string">'/films'</span>,</span><br><span class="line">  component: films,</span><br><span class="line">  children: [&#123;</span><br><span class="line">    path: <span class="string">'/films/now'</span>,</span><br><span class="line">    component: now</span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    path: <span class="string">"/"</span>,</span><br><span class="line">    redirect: <span class="string">"/films/now"</span></span><br><span class="line">  &#125;],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="4-动态路由"><a href="#4-动态路由" class="headerlink" title="4.动态路由"></a>4.动态路由</h3><p>和上面的命名路由配合，列表页跳到详情页时使用</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// src/router/index.js中</span></span><br><span class="line">&#123;</span><br><span class="line">  name: <span class="string">'todetail'</span>,</span><br><span class="line">  path: <span class="string">'/films/detail/:id'</span>,</span><br><span class="line">  component: detail</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"><span class="comment">// src/views/flims.vue中</span></span><br><span class="line"><span class="comment">// 设置完后，点击这个div就会跳转到 /films/detail/12345</span></span><br><span class="line">&lt;router-link</span><br><span class="line">    <span class="class"><span class="keyword">class</span></span>=<span class="string">"films_now"</span></span><br><span class="line">    v-<span class="keyword">for</span>=<span class="string">"film in filmlist"</span></span><br><span class="line">    :key=<span class="string">"film.filmId"</span></span><br><span class="line">    :to=<span class="string">"&#123;</span></span><br><span class="line"><span class="string">      name:'todetail',</span></span><br><span class="line"><span class="string">      params:&#123;id:film.filmId&#125;</span></span><br><span class="line"><span class="string">    &#125;"</span></span><br><span class="line">    tag=<span class="string">"div"</span></span><br><span class="line">  &gt;<span class="xml"><span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// src/views/detail.vue中</span></span><br><span class="line"><span class="keyword">this</span>.$route.params.id 就能得到<span class="number">12345</span></span><br></pre></td></tr></table></figure></div>
<p>假如film.filmId为12345，我们就会跳到/films/detail/12345页面；<br>在src/views/detail.vue中，this.$route.params.id 就能得到12345，但这样获取参数有点长，我们也可以：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// src/router/index.js中，增加props</span></span><br><span class="line">&#123;</span><br><span class="line">  name: <span class="string">'todetail'</span>,</span><br><span class="line">  path: <span class="string">'/films/detail/:id'</span>,</span><br><span class="line">  component: detail,</span><br><span class="line">  props:<span class="literal">true</span></span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"><span class="comment">// src/views/flims.vue中，不变</span></span><br><span class="line">&lt;router-link</span><br><span class="line">    <span class="class"><span class="keyword">class</span></span>=<span class="string">"films_now"</span></span><br><span class="line">    v-<span class="keyword">for</span>=<span class="string">"film in filmlist"</span></span><br><span class="line">    :key=<span class="string">"film.filmId"</span></span><br><span class="line">    :to=<span class="string">"&#123;</span></span><br><span class="line"><span class="string">      name:'todetail',</span></span><br><span class="line"><span class="string">      params:&#123;id:film.filmId&#125;</span></span><br><span class="line"><span class="string">    &#125;"</span></span><br><span class="line">    tag=<span class="string">"div"</span></span><br><span class="line">  &gt;<span class="xml"><span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// src/views/detail.vue中，props接收</span></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">      props:[<span class="string">'id'</span>]</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(id) =&gt; <span class="number">12345</span></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></div>

<h3 id="5-路由跳转"><a href="#5-路由跳转" class="headerlink" title="5.路由跳转"></a>5.路由跳转</h3><p>1)声明式导航，当被激活时，会自动添加router-link-active类名</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line">&lt;router-link</span><br><span class="line">      <span class="comment">//跳转到哪</span></span><br><span class="line">      :to=<span class="string">"&#123;</span></span><br><span class="line"><span class="string">        //也可以用path来指定路径，但这样就不能使用params传参</span></span><br><span class="line"><span class="string">        name:'todetail',</span></span><br><span class="line"><span class="string">        //this.$route.params.id获取params</span></span><br><span class="line"><span class="string">        params:&#123;id:film.filmId&#125;,</span></span><br><span class="line"><span class="string">        //传queryString参数</span></span><br><span class="line"><span class="string">        query:&#123;content:123&#125;</span></span><br><span class="line"><span class="string">      &#125;"</span></span><br><span class="line">      <span class="comment">//渲染成div标签</span></span><br><span class="line">      tag=<span class="string">"div"</span></span><br><span class="line">      <span class="comment">//跳转时不被记录   </span></span><br><span class="line">      replace:<span class="literal">false</span></span><br><span class="line">    &gt;<span class="xml"><span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span></span><br></pre></td></tr></table></figure></div>
<p>2)编程式导航<br>在组件中使用，this.$router.push(“/films”)</p>
<h3 id="6-路由模式"><a href="#6-路由模式" class="headerlink" title="6.路由模式"></a>6.路由模式</h3><p>hash：导航栏里会出现#号，window.onhashchange监听路径的切换<br>history：会出现404 的情况，window.onpopstate监听路径的切换<br>详见：<a href="https://www.cnblogs.com/leyan/p/8677274.html" target="_blank">雪昀的博客</a></p>
<h3 id="7-路由守卫"><a href="#7-路由守卫" class="headerlink" title="7.路由守卫"></a>7.路由守卫</h3><p>当进入某个路由前、后，我们需要做某些操作，比如进入购物车时判断是否登录；这时候就需要钩子函数监听路由变化了</p>
<h4 id="全局路由钩子"><a href="#全局路由钩子" class="headerlink" title="全局路由钩子"></a>全局路由钩子</h4><p>src/router/index.js中，放在最外面，</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//判断每次进入/mine时，是否有token令牌</span></span><br><span class="line">router.beforeEach(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (to.path === <span class="string">"/mine"</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (localStorage.getItem(<span class="string">"token"</span>)) &#123; <span class="comment">//说明用户已经登录了</span></span><br><span class="line">      next()</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      next(<span class="string">"/login"</span>) <span class="comment">//如果用户没有登录直接跳转到登录界面进行用户登录</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    next()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div>

<h4 id="局部路由钩子"><a href="#局部路由钩子" class="headerlink" title="局部路由钩子"></a>局部路由钩子</h4><p>src/router/index.js中，放const routes里面，</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line">routes: [</span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">'/foo'</span>,</span><br><span class="line">      component: Foo,</span><br><span class="line">      <span class="comment">//当进入到foo路由之前，就会触发</span></span><br><span class="line">      beforeEnter: <span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">        next() <span class="comment">//必须要执行next之后，对应的Foo组件才可以正常显示出来</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br></pre></td></tr></table></figure></div>

<h4 id="路由组件钩子"><a href="#路由组件钩子" class="headerlink" title="路由组件钩子"></a>路由组件钩子</h4><p>放在某个组件中，</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//进入到某个组件之前的拦截，获取不到组件内部的this</span></span><br><span class="line">beforeRouteEnter (to, <span class="keyword">from</span>, next) &#123;</span><br><span class="line">  <span class="comment">// 在渲染该组件的对应路由被 confirm 前调用</span></span><br><span class="line">  <span class="comment">// 不！能！获取组件实例 `this`</span></span><br><span class="line">  <span class="comment">// 因为当守卫执行前，组件实例还没被创建</span></span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">beforeRouteUpdate (to, <span class="keyword">from</span>, next) &#123;</span><br><span class="line">  <span class="comment">// 在当前路由改变，但是该组件被复用时调用     </span></span><br><span class="line">  <span class="comment">// 举例来说，对于一个带有动态参数的路径 /foo/:id，在 /foo/1 和 /foo/2 之间跳转的时候，</span></span><br><span class="line">  <span class="comment">// 由于会渲染同样的 Foo 组件，因此组件实例会被复用。而这个钩子就会在这个情况下被调用。</span></span><br><span class="line">  <span class="comment">// 可以访问组件实例 `this`</span></span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"><span class="comment">//离开某个组件之前的拦截，获取到组件内部的this</span></span><br><span class="line">beforeRouteLeave (to, <span class="keyword">from</span>, next) &#123;</span><br><span class="line">  <span class="comment">// 导航离开该组件的对应路由时调用</span></span><br><span class="line">  <span class="comment">// 可以访问组件实例 `this`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h1 id="登录与接口"><a href="#登录与接口" class="headerlink" title="登录与接口"></a>登录与接口</h1><p>由于卖座的接口都是开发，所以没有自己模拟接口，除了登录；<br>登录功能难点：</p>
<ul>
<li>node.js模拟接口</li>
<li>接口部署到线上</li>
<li>配置反向代理</li>
<li>请求登录接口</li>
<li>axios拦截配合路由守卫</li>
<li>登录成功后种token</li>
</ul>
<h2 id="1-快速搭建接口"><a href="#1-快速搭建接口" class="headerlink" title="1.快速搭建接口"></a>1.快速搭建接口</h2><p>node.js + express接口已写好，并且上传阿里云服务器</p>
<h2 id="2-反向代理解决跨域问题"><a href="#2-反向代理解决跨域问题" class="headerlink" title="2.反向代理解决跨域问题"></a>2.反向代理解决跨域问题</h2><p>vue.config.js中，配置代理</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    <span class="comment">// 47.104.70.82:3000为自己部署的接口</span></span><br><span class="line">    proxy: &#123;</span><br><span class="line">      <span class="string">"/info"</span>: &#123;</span><br><span class="line">        target: <span class="string">"http://47.104.70.82:3000"</span>,</span><br><span class="line">        changeOrigin: <span class="literal">true</span>,</span><br><span class="line">        pathRewrite: &#123;</span><br><span class="line">          <span class="string">"^/info"</span>: <span class="string">""</span></span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h2 id="3-拦截"><a href="#3-拦截" class="headerlink" title="3.拦截"></a>3.拦截</h2><p><strong>src/router/index.js中，路由守卫的拦截登录</strong><br>即进入个人中心时判断是否有token，有代表已经登录，没有则跳到登录页面；</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//判断每次进入/mine的时候，是否有token令牌</span></span><br><span class="line">router.beforeEach(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (to.path === <span class="string">"/mine"</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (localStorage.getItem(<span class="string">"token"</span>)) &#123; <span class="comment">//说明用户已经登录了</span></span><br><span class="line">      next()</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      next(<span class="string">"/login"</span>) <span class="comment">//如果用户没有登录直接跳转到登录界面进行用户登录</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    next()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div>

<p><strong>src/views/login.vue中，登录</strong><br>来到了登录页面，发送账户密码，登录成功后设置token，去到个人中心</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">    login() &#123;</span><br><span class="line">      <span class="keyword">if</span> (!<span class="keyword">this</span>.username.trim() || !<span class="keyword">this</span>.password.trim()) &#123;</span><br><span class="line">        Dialog(&#123;</span><br><span class="line">          message: <span class="string">"用户名或者密码必须要传！"</span>,</span><br><span class="line">          closeOnClickOverlay: <span class="literal">true</span></span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      instance2</span><br><span class="line">        .post(<span class="string">"/api/login"</span>, &#123;</span><br><span class="line">          username: <span class="keyword">this</span>.username,</span><br><span class="line">          password: <span class="keyword">this</span>.password</span><br><span class="line">        &#125;)</span><br><span class="line">        .then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="comment">//将token保存到本地存储里面去</span></span><br><span class="line">          localStorage.setItem(<span class="string">"token"</span>, res.token);</span><br><span class="line">          <span class="comment">//跳转到个人中心</span></span><br><span class="line">          <span class="keyword">this</span>.$router.replace(<span class="string">"/mine"</span>);</span><br><span class="line">        &#125;)</span><br><span class="line">        .catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">          Dialog(&#123; <span class="attr">message</span>: err, <span class="attr">closeOnClickOverlay</span>: <span class="literal">true</span> &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>src/utils/http.js中，封装axios拦截器；</strong><br>这里表示请求数据时，携带token才能得到，比如一些东西登录后才能看到</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">"axios"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//针对于上线的 http://47.96.0.211:3000</span></span><br><span class="line"><span class="keyword">const</span> instance2 = axios.create(&#123;</span><br><span class="line">  baseURL: <span class="string">'/info'</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发起请求之前，判断是否有token。如果有则携带在请求头中</span></span><br><span class="line">instance2.interceptors.request.use(</span><br><span class="line">  config =&gt; &#123;</span><br><span class="line">    <span class="comment">// console.log("config", config)</span></span><br><span class="line">    <span class="keyword">if</span> (localStorage.getItem(<span class="string">"token"</span>)) &#123;</span><br><span class="line">      config.headers.token = localStorage.getItem(<span class="string">"token"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> config</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 响应之后的拦截操作，返回结果</span></span><br><span class="line">instance2.interceptors.response.use(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// console.log("res", res)</span></span><br><span class="line">  <span class="keyword">if</span> (res.data.err === <span class="number">0</span>) &#123; <span class="comment">//说明后端给我们前端返回的结果是正常的</span></span><br><span class="line">    <span class="keyword">return</span> res.data</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(res.data.msg)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">  instance,</span><br><span class="line">  instance2</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>例如：在组件中使用instance2请求，成功则得到res，失败则得到Promise.reject</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line">instance2.get(<span class="string">"/api/goods/home"</span>)</span><br><span class="line">  .then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"得到res"</span>,res)</span><br><span class="line">&#125;).catch(<span class="function"><span class="params">err</span>=&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"err"</span>,err)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div>

<h1 id="首页页面"><a href="#首页页面" class="headerlink" title="首页页面"></a>首页页面</h1><p>主要难点：swiper自定义指令，底部导航栏组件封装，动态id，图片放大插件<br>次要难点：路由配置，点击变橘色</p>
<h2 id="封装swiper"><a href="#封装swiper" class="headerlink" title="封装swiper"></a>封装swiper</h2><h3 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h3><p>src/components/Swiper.vue中，写一个全局组件</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;swiper-container&quot; :class&#x3D;&quot;cName&quot;&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;swiper-wrapper&quot;&gt;</span><br><span class="line">      &lt;slot&gt;&lt;&#x2F;slot&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">&#x2F;&#x2F;引入swiper</span><br><span class="line">import &quot;swiper&#x2F;css&#x2F;swiper.min.css&quot;;</span><br><span class="line">export default &#123;</span><br><span class="line">  &#x2F;&#x2F; cName为自定义的，轮播图类名</span><br><span class="line">  props: [&quot;cName&quot;]</span><br><span class="line">&#125;;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure></div>

<h3 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h3><p>src/utils/directives.js中，v-swiper全局指令，实例化swiper插件</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">"vue"</span></span><br><span class="line"><span class="keyword">import</span> Swiper <span class="keyword">from</span> <span class="string">"swiper"</span></span><br><span class="line">Vue.directive(<span class="string">"swiper"</span>, &#123;</span><br><span class="line">  inserted(el, binding, vnode) &#123;</span><br><span class="line">    <span class="comment">//代表最后一个元素插入完毕了，再进进行一次实例化操作就可以了</span></span><br><span class="line">    <span class="keyword">let</span> free = binding.value.free ? binding.value.free : <span class="string">''</span></span><br><span class="line">    <span class="keyword">let</span> autoplay = binding.value.autoplay ? binding.value.autoplay : <span class="string">''</span></span><br><span class="line">    <span class="keyword">if</span> (binding.value.current === binding.value.length - <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">new</span> Swiper(<span class="string">"."</span> + binding.value.swipe, &#123; <span class="comment">//默认swiper执行3次，因为插入了3个swiper-slide的真实dom</span></span><br><span class="line">        ...free,</span><br><span class="line">        autoplay,</span><br><span class="line">        loop: <span class="literal">true</span>,</span><br><span class="line">        pagination: &#123;</span><br><span class="line">          el: <span class="string">".swiper-pagination"</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div>

<h3 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h3><p>src/views/flims.vue，在组件中使用v-swiper，引用组件=&gt;请求数据=&gt;使用指令并传参</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  &#x2F;&#x2F;1.引入</span><br><span class="line">  import Swiper from &quot;@&#x2F;components&#x2F;Swiper.vue&quot;;</span><br><span class="line">  import &#123; instance, instance2 &#125; from &quot;@&#x2F;utils&#x2F;http&quot;;</span><br><span class="line">  export default &#123;</span><br><span class="line">    components: &#123;</span><br><span class="line">      Swiper &#x2F;&#x2F;注册组件Swiper</span><br><span class="line">    &#125;,</span><br><span class="line">    &#x2F;&#x2F;2.请求数据</span><br><span class="line">    created() &#123;</span><br><span class="line">      instance</span><br><span class="line">        .get(&quot;&#x2F;gateway?type&#x3D;2&amp;cityId&#x3D;310100&amp;k&#x3D;3419992&quot;, &#123;</span><br><span class="line">          headers: &#123;</span><br><span class="line">            &quot;X-Host&quot;: &quot;mall.cfg.common-banner&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        .then(res &#x3D;&gt; &#123;</span><br><span class="line">          &#x2F;&#x2F; console.log(res);</span><br><span class="line">          this.banners &#x3D; res.data.data;</span><br><span class="line">          &#x2F;&#x2F; 必须要等到页面中出现了swiper-slide结构后，我们才能进行实例化的操作</span><br><span class="line">          &#x2F;&#x2F; 现在这一步由v-swiper解决了</span><br><span class="line">          this.$nextTick(() &#x3D;&gt; &#123;</span><br><span class="line">            &#x2F;&#x2F; new Swip(&quot;.swiper-container&quot;, &#123;</span><br><span class="line">            &#x2F;&#x2F;   loop: true</span><br><span class="line">            &#x2F;&#x2F; &#125;)</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;!-- 3.使用并传参 --&gt;</span><br><span class="line">    &lt;Swiper cName&#x3D;&quot;swipe&quot;&gt;</span><br><span class="line">      &lt;div</span><br><span class="line">        class&#x3D;&quot;swiper-slide&quot;</span><br><span class="line">        v-for&#x3D;&quot;(banner,index) in banners&quot;</span><br><span class="line">        :key&#x3D;&quot;banner.bannerId&quot;</span><br><span class="line">        v-swiper&#x3D;&quot;&#123;</span><br><span class="line">          current:index,</span><br><span class="line">          length:banners.length,</span><br><span class="line">          swipe:&#39;swipe&#39;,</span><br><span class="line">          autoplay: &#123;</span><br><span class="line">            delay: 3000,</span><br><span class="line">            stopOnLastSlide: false,</span><br><span class="line">            disableOnInteraction: true,</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;&quot;</span><br><span class="line">      &gt;</span><br><span class="line">        &lt;img :src&#x3D;&quot;banner.imgUrl&quot; alt &#x2F;&gt;</span><br><span class="line">      &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;Swiper&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br></pre></td></tr></table></figure></div>
<p>之后遇到轮播图，都可以按照 引用组件=&gt;请求数据=&gt;使用指令并传参 这三步来进行<br>注：instance是封装axios的方法</p>
<h2 id="封装底部导航栏"><a href="#封装底部导航栏" class="headerlink" title="封装底部导航栏"></a>封装底部导航栏</h2><h3 id="第一步-组件"><a href="#第一步-组件" class="headerlink" title="第一步-组件"></a>第一步-组件</h3><p>src/components/bottomBar.vue，写局部组件，包括样式和数据</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;nav class&#x3D;&quot;row&quot;&gt;</span><br><span class="line">    &lt;router-link class&#x3D;&quot;col-xs-3&quot; v-for&#x3D;&quot;nav in navlist&quot; :key&#x3D;&quot;nav.id&quot; :to&#x3D;&quot;nav.path&quot; tag&#x3D;&quot;div&quot;&gt;</span><br><span class="line">      &lt;i class&#x3D;&quot;iconfont&quot; :class&#x3D;&quot;nav.icon&quot;&gt;&lt;&#x2F;i&gt;</span><br><span class="line">      &lt;p&gt;&#123;&#123;nav.title&#125;&#125;&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;&#x2F;router-link&gt;</span><br><span class="line">  &lt;&#x2F;nav&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      navlist: [</span><br><span class="line">        &#123; id: 1, title: &quot;电影&quot;, path: &quot;&#x2F;films&quot;, icon: &quot;icon-dianying&quot; &#125;,</span><br><span class="line">        &#123; id: 2, title: &quot;影院&quot;, path: &quot;&#x2F;cinema&quot;, icon: &quot;icon-yingyuan&quot; &#125;,</span><br><span class="line">        &#123; id: 3, title: &quot;资讯&quot;, path: &quot;&#x2F;news&quot;, icon: &quot;icon-zixun&quot; &#125;,</span><br><span class="line">        &#123; id: 4, title: &quot;我的&quot;, path: &quot;&#x2F;mine&quot;, icon: &quot;icon-wode&quot; &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped lang&#x3D;&quot;scss&quot;&gt;</span><br><span class="line">li &#123;</span><br><span class="line">  list-style: none;</span><br><span class="line">&#125;</span><br><span class="line">.router-link-active &#123;</span><br><span class="line">  color: #ff5f16;</span><br><span class="line">&#125;</span><br><span class="line">nav &#123;</span><br><span class="line">  position: fixed;</span><br><span class="line">  bottom: 0px;</span><br><span class="line">  left: 0;</span><br><span class="line">  height: 1rem;</span><br><span class="line">  width: 7.5rem;</span><br><span class="line">  margin-left: 0px;</span><br><span class="line">  font-size: 0.24rem;</span><br><span class="line">  background-color: #fff;</span><br><span class="line">  text-align: center;</span><br><span class="line">  z-index: 2;</span><br><span class="line">  i &#123;</span><br><span class="line">    font-size: 0.44rem;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure></div>
<h3 id="第二步-使用"><a href="#第二步-使用" class="headerlink" title="第二步-使用"></a>第二步-使用</h3><p>src/App.vue，因为大部分页面都有，所以直接放在App.vue里了</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &lt;bottomBar&gt;&lt;&#x2F;bottomBar&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import bottomBar from &quot;@&#x2F;components&#x2F;bottomBar&quot;;</span><br><span class="line">export default &#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">    bottomBar</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></div>
<h3 id="第三步-加状态"><a href="#第三步-加状态" class="headerlink" title="第三步-加状态"></a>第三步-加状态</h3><p>有些没有底部导航栏，所有我们要给他一个显示/隐藏的状态，<br><strong>1.App.vue里变加上v-show：</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &lt;bottomBar v-show&#x3D;&quot;isBottom&quot;&gt;&lt;&#x2F;bottomBar&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br></pre></td></tr></table></figure></div>

<p><strong>2.src/store/module/bottomBarModule.js，即分仓库里写上状态和方法</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="built_in">module</span> = &#123;</span><br><span class="line">  namespaced: <span class="literal">true</span>, <span class="comment">//开启命名空间</span></span><br><span class="line">  state: &#123;</span><br><span class="line">    isBottom: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  mutations: &#123;</span><br><span class="line">    show(state) &#123;</span><br><span class="line">      state.isBottom = <span class="literal">true</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    hide(state) &#123;</span><br><span class="line">      state.isBottom = <span class="literal">false</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="built_in">module</span></span><br></pre></td></tr></table></figure></div>

<p><strong>3.src/store/index.js，总仓库里汇总分仓库</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> bottombar <span class="keyword">from</span> <span class="string">"./module/bottomBarModule"</span></span><br><span class="line"></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  modules: &#123;</span><br><span class="line">    cinema, <span class="comment">//影院的模块</span></span><br><span class="line">    bottombar, <span class="comment">//tabbar的模块</span></span><br><span class="line">    city <span class="comment">//城市的模块</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div>

<p><strong>4./srcmain.js，把总仓库导出到全局</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">'./store'</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  store, <span class="comment">//各组件就能用$store</span></span><br><span class="line">&#125;).$mount(<span class="string">'#app'</span>)</span><br></pre></td></tr></table></figure></div>

<p><strong>5.在所有组件中，都可以用仓库里的东西了，但是建议用辅助函数</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; mapState, mapGetters, mapActions, mapMutations &#125; <span class="keyword">from</span> <span class="string">"vuex"</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  methods: &#123;</span><br><span class="line">      ...mapMutations(<span class="string">"bottombar"</span>, [<span class="string">"show"</span>]), <span class="comment">//调用bottombar的方法</span></span><br><span class="line">      ...mapMutations(<span class="string">"bottombar"</span>, [<span class="string">"hide"</span>])</span><br><span class="line">    &#125;,</span><br><span class="line">  mounted() &#123;</span><br><span class="line">      <span class="comment">// 直接改变仓库里的数据，和下面一样效果，但是不建议这么做</span></span><br><span class="line">      <span class="comment">// this.$store.state.isBottom = false;</span></span><br><span class="line">      <span class="keyword">this</span>.hide(); <span class="comment">//底部导航栏消失</span></span><br><span class="line">    &#125;,</span><br><span class="line">    destroyed() &#123;</span><br><span class="line">      <span class="comment">// this.$store.state.isBottom = true;</span></span><br><span class="line">      <span class="keyword">this</span>.show(); <span class="comment">//底部导航栏出现</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="正在热映页面"><a href="#正在热映页面" class="headerlink" title="正在热映页面"></a>正在热映页面</h2><p>请求数据=&gt;v-for渲染=&gt;调样式这一套，没什么好讲的<br><strong>过滤器filter的使用</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 竖线表示引用filter过滤器，filter可以放组件里，也可以放src/utils/filters.js里</span></span><br><span class="line"><span class="comment">// 调用过滤器</span></span><br><span class="line">&lt;span&gt;主演：&#123;&#123;film.actors|actorFilter&#125;&#125;&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">import Vue from "vue";</span></span><br><span class="line"><span class="regexp">Vue.filter("actorFilter", data =&gt; &#123;</span></span><br><span class="line"><span class="regexp">  if (data) &#123;</span></span><br><span class="line"><span class="regexp">    return data.map(item =&gt; item.name).join(" ");</span></span><br><span class="line"><span class="regexp">  &#125; else &#123;</span></span><br><span class="line"><span class="regexp">    return "暂无主演";</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;)</span></span><br></pre></td></tr></table></figure></div>

<p><strong>moment-时间格式化插件</strong><br>因为传数据时，时间格式不可能是“2020-3-20”的格式，一般会转为一串数字，我们前端使用时就要重新转化为标准格式；<br>1.yarn add moment -S 安装<br>2.定义过滤器</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">"vue"</span></span><br><span class="line"><span class="keyword">import</span> moment <span class="keyword">from</span> <span class="string">"moment"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义日期的过滤器，option可以定义分割符号</span></span><br><span class="line">dateFilter(num)&#123;</span><br><span class="line">  Vue.filter(<span class="string">"dateFilter"</span>,(date,option=num)=&gt;&#123;</span><br><span class="line">      <span class="keyword">return</span> moment(date*<span class="number">1000</span>).format(<span class="string">"YYYY"</span>+option+<span class="string">"MM"</span>+option+<span class="string">"DD"</span>); <span class="comment">//moment里面的参数是时间戳</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>3.使用</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line">&lt;p&gt;&#123;&#123;filmInfo.premiereAt | dateFilter(<span class="string">"-"</span>)&#125;&#125;&lt;<span class="regexp">/p&gt;</span></span><br></pre></td></tr></table></figure></div>

<h2 id="详情页页面"><a href="#详情页页面" class="headerlink" title="详情页页面"></a>详情页页面</h2><p>首先是动态接口，就是上面第五大节的 配置路由=&gt;其他配置=&gt;动态路由；<br>其次是渲染和布局；<br>其他难点：返回按钮，下拉后出现的顶部框，展开收缩的文本框，演职人员轮播图，剧照页面</p>
<h3 id="返回按钮"><a href="#返回按钮" class="headerlink" title="返回按钮"></a>返回按钮</h3><p>方案一：src/utils/directives.js/，写一个返回的指令，<code>v-back=&quot;{this:this}&quot;</code>调用；<br>这里this是传了一个vue实例对象；</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 后退的指令</span></span><br><span class="line">Vue.directive(<span class="string">"back"</span>, &#123;</span><br><span class="line">  inserted(el, binding, vnode) &#123;</span><br><span class="line">    el.style.backgroundColor =</span><br><span class="line">      el.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        binding.value.this._self.$router.go(<span class="number">-1</span>)</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div>

<p>方案二：直接本页面一个handleBack()函数，</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line">handleBack() &#123;</span><br><span class="line">  <span class="keyword">this</span>.$router.back();</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></div>

<h3 id="下拉后出现的顶部框"><a href="#下拉后出现的顶部框" class="headerlink" title="下拉后出现的顶部框"></a>下拉后出现的顶部框</h3><p>1.顶部框照常写，<br>2.src/utils/directives.js，写一个指令</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 滚动时出现的指令</span></span><br><span class="line">Vue.directive(<span class="string">"title"</span>, &#123;</span><br><span class="line">  <span class="comment">//插入到dom之后的钩子函数</span></span><br><span class="line">  inserted(el, binding) &#123;</span><br><span class="line">    el.style.display = <span class="string">"none"</span>;</span><br><span class="line">    <span class="built_in">window</span>.onscroll = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (</span><br><span class="line">        (<span class="built_in">document</span>.body.scrollTop || <span class="built_in">document</span>.documentElement.scrollTop) &gt;</span><br><span class="line">        binding.value</span><br><span class="line">      ) &#123;</span><br><span class="line">        el.style.display = <span class="string">"block"</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        el.style.display = <span class="string">"none"</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//指令的解绑的钩子函数</span></span><br><span class="line">  unbind() &#123;</span><br><span class="line">    <span class="built_in">window</span>.onscroll = <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div>
<p>3.<code>v-title=&quot;50&quot;</code>即可调用，里面的数字表示下拉到50px才会出现</p>
<h3 id="展开收缩的文本框"><a href="#展开收缩的文本框" class="headerlink" title="展开收缩的文本框"></a>展开收缩的文本框</h3><p>利用css样式，由于每个简介内容都不同，所以高度要设置成max-height<br>注意：当两个属性相同时(max-height)，才会触发transition</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSS"><figure class="iseeu highlight /css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.jianjie</span> &#123;</span><br><span class="line">  <span class="attribute">max-height</span>: <span class="number">2rem</span>;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">transition</span>: all <span class="number">0.5s</span> ease;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.jianjie</span><span class="selector-class">.active</span> &#123;</span><br><span class="line">  <span class="attribute">max-height</span>: <span class="number">0.76rem</span>;</span><br><span class="line">  <span class="attribute">transition</span>: all <span class="number">0.5s</span> ease;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="演职人员轮播图"><a href="#演职人员轮播图" class="headerlink" title="演职人员轮播图"></a>演职人员轮播图</h3><p>v-swiper就完事了，free表示其他swiper属性</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"actor"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h4</span>&gt;</span>演职人员<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Swiper</span> <span class="attr">cName</span>=<span class="string">"actors"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-for</span>=<span class="string">"(data,index) in filmInfo.actors"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:key</span>=<span class="string">"data.name"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">"swiper-slide"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-swiper</span>=<span class="string">"&#123;</span></span></span><br><span class="line"><span class="tag"><span class="string">        current:index,</span></span></span><br><span class="line"><span class="tag"><span class="string">        length:filmInfo.actors.length?filmInfo.actors.length:0,</span></span></span><br><span class="line"><span class="tag"><span class="string">        swipe:'actors',</span></span></span><br><span class="line"><span class="tag"><span class="string">        free:&#123;</span></span></span><br><span class="line"><span class="tag"><span class="string">          slidesPerView: 4,</span></span></span><br><span class="line"><span class="tag"><span class="string">          spaceBetween: 10,</span></span></span><br><span class="line"><span class="tag"><span class="string">          freeMode: true</span></span></span><br><span class="line"><span class="tag"><span class="string">        &#125;   </span></span></span><br><span class="line"><span class="tag"><span class="string">      &#125;"</span></span></span><br><span class="line"><span class="tag">    &gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">"data.avatarAddress"</span> <span class="attr">alt</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"name"</span>&gt;</span>&#123;&#123;data.name&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"role"</span>&gt;</span>&#123;&#123;data.role&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">Swiper</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h3 id="剧照页面"><a href="#剧照页面" class="headerlink" title="剧照页面"></a>剧照页面</h3><p>剧照和电影详情其实是一个页面，所以要用v-if判断是否显示，<br>detail.vue中，<code>&lt;photo&gt;</code>是局部组件，别忘了引入和注册，list是传过去的照片数据</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">"!istext"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">photo</span> @<span class="attr">event</span>=<span class="string">"previewImg"</span> <span class="attr">:list</span>=<span class="string">"filmInfo.photos"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 下拉才会出现的顶部框 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">m-title</span> @<span class="attr">back</span>=<span class="string">"handleBack2"</span>&gt;</span>剧照（&#123;&#123;filmInfo.photos?filmInfo.photos.length:0&#125;&#125;）<span class="tag">&lt;/<span class="name">m-title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">photo</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>photo.vue中，<br>previewImg是vant的图片，这里是调用了父组件detail里的previewImg方法，<br>@click =&gt; previewImg(index) =&gt; @event =&gt; previewImg，index表示当前照片的索引</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;myphoto&quot;&gt;</span><br><span class="line">    &lt;slot&gt;&lt;&#x2F;slot&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">      &lt;li @click&#x3D;&quot;previewImg(index)&quot; v-for&#x3D;&quot;(data,index) in list&quot; :key&#x3D;&quot;data&quot;&gt;</span><br><span class="line">        &lt;img :src&#x3D;&quot;data&quot; alt &#x2F;&gt;</span><br><span class="line">      &lt;&#x2F;li&gt;</span><br><span class="line">    &lt;&#x2F;ul&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import Vue from &quot;vue&quot;;</span><br><span class="line">import &#123; ImagePreview &#125; from &quot;vant&quot;;</span><br><span class="line">Vue.use(ImagePreview);</span><br><span class="line">export default &#123;</span><br><span class="line">  props: [&quot;list&quot;],</span><br><span class="line">  methods: &#123;</span><br><span class="line">    previewImg(index) &#123;</span><br><span class="line">      this.$emit(&quot;event&quot;, index);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></div>

<h3 id="定义数据注意"><a href="#定义数据注意" class="headerlink" title="定义数据注意"></a>定义数据注意</h3><p>详情页面的数据我们采用filmInfo:null的形式。<br>因为初始化的时候，如果定义filmInfo:{}。那么这个filmInfo.filmType是undefined，后续获取filmInfo.filmType.name的属性会报错。<br>所以需要通过v-if=”filmInfo”来做判断，开始的时候filmInfo是null，所以dom不会显示出来，后续ajax异步获取到数据了，然后进行filmInfo的赋值操作，这样的话，那v-if=”filmInfo”就会使得dom节点出现了。</p>
<h1 id="影院页面"><a href="#影院页面" class="headerlink" title="影院页面"></a>影院页面</h1><p>难点，切换城市、切换地区、搜索影院，</p>
<h2 id="影院列表"><a href="#影院列表" class="headerlink" title="影院列表"></a>影院列表</h2><p>影院列表是与城市/地区相关的，所以状态要存在分仓库里，仓库里有“影院列表/城市ID”两个数据，“getCinemaActions/spliceList”两个方法，<br><strong>src/store/module/cinemaModule.js里：</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  instance</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">"@/utils/http"</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="built_in">module</span> = &#123;</span><br><span class="line">  namespaced: <span class="literal">true</span>, <span class="comment">//开启命名空间</span></span><br><span class="line">  state: &#123;</span><br><span class="line">    cinemaList: <span class="literal">null</span>, <span class="comment">//影院数据</span></span><br><span class="line">    cityId: <span class="number">310100</span> <span class="comment">//城市ID</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 截取5条电影院列表，搜索页面用到</span></span><br><span class="line">  getters: &#123;</span><br><span class="line">    spliceList(state) &#123;</span><br><span class="line">      <span class="keyword">if</span> (state.cinemaList) &#123;</span><br><span class="line">        <span class="keyword">return</span> state.cinemaList.splice(<span class="number">0</span>, <span class="number">6</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  actions: &#123;</span><br><span class="line">    getCinemaActions(store, cityId) &#123;</span><br><span class="line">      <span class="comment">//请求maizuo的接口数据</span></span><br><span class="line">      instance</span><br><span class="line">        .get(<span class="string">"/gateway?cityId="</span> + cityId + <span class="string">"&amp;ticketFlag=1&amp;k=5873362"</span>, &#123;</span><br><span class="line">          headers: &#123;</span><br><span class="line">            <span class="comment">//将数据放在请求头上面携带给卖座接口</span></span><br><span class="line">            <span class="string">"X-Host"</span>: <span class="string">"mall.film-ticket.cinema.list"</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        .then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="comment">// 因为改变状态要在mutations，所以要触发里面的函数</span></span><br><span class="line">          store.commit(<span class="string">"setCinemaList"</span>, res.data.data.cinemas)</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  mutations: &#123;</span><br><span class="line">    setCinemaList(state, data) &#123;</span><br><span class="line">      state.cinemaList = data</span><br><span class="line">    &#125;,</span><br><span class="line">    setCityid(state, id) &#123;</span><br><span class="line">      state.cityId = id</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="built_in">module</span></span><br></pre></td></tr></table></figure></div>

<p><strong>src/views/cinema.vue，表示每次切换到这个组件都会渲染数据，而这些数据会影响 城市/地区/影院列表</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line">created() &#123;</span><br><span class="line">  <span class="keyword">this</span>.getCinemaActions(<span class="keyword">this</span>.cityId);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="城市列表"><a href="#城市列表" class="headerlink" title="城市列表"></a>城市列表</h2><p>使用vant布局，需要两个数据，右侧A-Z数组，左侧A-Z城市数组；<br>当点击某一列城市时，cinema仓库里对应的 城市名称/ID 也会改变，再跳到影院列表重新请求数据，影院列表就会改变了<br><strong>src/views/City.vue</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">import Vue from &quot;vue&quot;;</span><br><span class="line">import &#123; IndexBar, IndexAnchor, Cell &#125; from &quot;vant&quot;;</span><br><span class="line">import &#123; mapMutations &#125; from &quot;vuex&quot;;</span><br><span class="line">Vue.use(IndexBar);</span><br><span class="line">Vue.use(IndexAnchor);</span><br><span class="line">Vue.use(Cell);</span><br><span class="line"></span><br><span class="line">import &#123; instance &#125; from &quot;@&#x2F;utils&#x2F;http&quot;;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      dataList: [],</span><br><span class="line">      indexList: []</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  created() &#123;</span><br><span class="line">    &#x2F;&#x2F; 请求数据</span><br><span class="line">    instance(&quot;&#x2F;gateway?k&#x3D;6077446&quot;, &#123;</span><br><span class="line">      headers: &#123;</span><br><span class="line">        &quot;X-Host&quot;: &quot;mall.film-ticket.city.list&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;).then(res &#x3D;&gt; &#123;</span><br><span class="line">      &#x2F;&#x2F; console.log(res.data.data.cities);</span><br><span class="line">      this.dataFilter(res.data.data.cities);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    &#x2F;&#x2F; 解析仓库中的数据</span><br><span class="line">    ...mapMutations(&quot;city&quot;, [&quot;setCityName&quot;]),</span><br><span class="line">    ...mapMutations(&quot;cinema&quot;, [&quot;setCityid&quot;]),</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;修改vuex的共享状态 城市数据</span><br><span class="line">    handleClick(item) &#123;</span><br><span class="line">      this.setCityName(item.name);</span><br><span class="line">      this.setCityid(item.cityId);</span><br><span class="line">      this.$router.push(&quot;&#x2F;cinema&quot;);</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 这个函数得到A-Z的数组，以及A-Z对应的城市</span><br><span class="line">    dataFilter(cities) &#123;</span><br><span class="line"></span><br><span class="line">      &#x2F;&#x2F; A-Z的数组</span><br><span class="line">      let letterArr &#x3D; [];</span><br><span class="line">      for (var i &#x3D; 65; i &lt; 91; i++) &#123;</span><br><span class="line">        letterArr.push(String.fromCharCode(i));</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      &#x2F;&#x2F;filtr 遍历26个字母，跟cities数据.pinyin.首字母.大写 进行过滤</span><br><span class="line">      var cityArr &#x3D; [];</span><br><span class="line">      for (var j &#x3D; 0; j &lt; letterArr.length; j++) &#123;</span><br><span class="line">        let tempArr &#x3D; cities.filter(</span><br><span class="line">          item &#x3D;&gt; item.pinyin.substring(0, 1).toUpperCase() &#x3D;&#x3D;&#x3D; letterArr[j]</span><br><span class="line">        );</span><br><span class="line">        if (tempArr.length &gt; 0) &#123;</span><br><span class="line">          &#x2F;&#x2F;如果cities里面pinyin里面有大写字母</span><br><span class="line">          cityArr.push(&#123;</span><br><span class="line">            index: letterArr[j],</span><br><span class="line">            list: tempArr</span><br><span class="line">          &#125;);</span><br><span class="line">          &#x2F;&#x2F;设置右侧自定义索引里面push22个英文字母</span><br><span class="line">          this.indexList.push(letterArr[j]);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      &#x2F;&#x2F;给左侧遍历的数据赋值</span><br><span class="line">      this.dataList &#x3D; cityArr;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;city&quot;&gt;</span><br><span class="line">    &lt;van-index-bar :index-list&#x3D;&quot;indexList&quot;&gt;</span><br><span class="line">      &lt;div v-for&#x3D;&quot;(data,index) in dataList&quot; :key&#x3D;&quot;index&quot;&gt;</span><br><span class="line">        &lt;van-index-anchor :index&#x3D;&quot;data.index&quot; &#x2F;&gt;</span><br><span class="line">        &lt;van-cell</span><br><span class="line">          @click&#x3D;&quot;handleClick(item)&quot;</span><br><span class="line">          :key&#x3D;&quot;index&quot;</span><br><span class="line">          v-for&#x3D;&quot;(item,index) in data.list&quot;</span><br><span class="line">          :title&#x3D;&quot;item.name&quot;</span><br><span class="line">        &#x2F;&gt;</span><br><span class="line">      &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;van-index-bar&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br></pre></td></tr></table></figure></div>

<h2 id="地区列表"><a href="#地区列表" class="headerlink" title="地区列表"></a>地区列表</h2><p>这里其实是在src/views/cinema.vue完成的；<br>经过下面的计算后，直接根据<code>computedDistrict</code>渲染地区列表；<br>点击某个地区后根据<code>computedDatalist</code>，匹配出处于该地区的影院，再改变仓库里的cinemaList；<br><strong>实际上影院列表是根据computedDatalist来渲染</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">    <span class="comment">//这是直接拿到了公共仓库里的cinemaList，后面直接this.cinemaList就能用了</span></span><br><span class="line">    ...mapState(<span class="string">"cinema"</span>, [<span class="string">"cinemaList"</span>]),</span><br><span class="line">    ...mapState(<span class="string">"cinema"</span>, [<span class="string">"cityId"</span>]),</span><br><span class="line">    ...mapState(<span class="string">"city"</span>, [<span class="string">"cityName"</span>]),</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据仓库里的cinemaList得到当前城市的地区，在前面加上全城</span></span><br><span class="line">    computedDistrict() &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.cinemaList) &#123;</span><br><span class="line">        <span class="keyword">let</span> newArr = <span class="keyword">this</span>.cinemaList.map(<span class="function"><span class="params">item</span> =&gt;</span> item.districtName);</span><br><span class="line">        newArr = <span class="built_in">Array</span>.from(<span class="keyword">new</span> <span class="built_in">Set</span>(newArr));</span><br><span class="line">        newArr.unshift(<span class="string">"全城"</span>);</span><br><span class="line">        <span class="keyword">return</span> newArr;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据current区域，过滤出相应区域的影城</span></span><br><span class="line">    <span class="comment">//例如选择是金山区区域，那么数组过滤出新的数组，这个新数组里面全部放着就是金山区的所有的影院了</span></span><br><span class="line">    computedDatalist() &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.currentQ === <span class="string">"全城"</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.cinemaList;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.cinemaList.filter(</span><br><span class="line">        item =&gt; item.districtName === <span class="keyword">this</span>.currentQ</span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>src/store/module/cinemaModule里</strong><br>存有 影院列表/城市ID 两个公共数据，影院页面是根据“影院列表”渲染的，当在左上角的列表里选择一个城市后，把城市ID传到cinemaModule里，这里就会携带此ID再次请求，改变了Module里的数据，影院列表显示的数据也会相应改变</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  instance</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">"@/utils/http"</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="built_in">module</span> = &#123;</span><br><span class="line">  namespaced: <span class="literal">true</span>, <span class="comment">//开启命名空间</span></span><br><span class="line">  state: &#123;</span><br><span class="line">    cinemaList: <span class="literal">null</span>, <span class="comment">//影院数据</span></span><br><span class="line">    cityId: <span class="number">310100</span> <span class="comment">//城市ID</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 截取5条电影院列表，搜索页面用到</span></span><br><span class="line">  getters: &#123;</span><br><span class="line">    spliceList(state) &#123;</span><br><span class="line">      <span class="keyword">if</span> (state.cinemaList) &#123;</span><br><span class="line">        <span class="keyword">return</span> state.cinemaList.splice(<span class="number">0</span>, <span class="number">6</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  actions: &#123;</span><br><span class="line">    getCinemaActions(store, cityId) &#123;</span><br><span class="line">      <span class="comment">//请求maizuo的接口数据</span></span><br><span class="line">      instance</span><br><span class="line">        .get(<span class="string">"/gateway?cityId="</span> + cityId + <span class="string">"&amp;ticketFlag=1&amp;k=5873362"</span>, &#123;</span><br><span class="line">          headers: &#123;</span><br><span class="line">            <span class="comment">//将数据放在请求头上面携带给卖座接口</span></span><br><span class="line">            <span class="string">"X-Host"</span>: <span class="string">"mall.film-ticket.cinema.list"</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        .then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="comment">// 因为改变状态要在mutations，所以要触发里面的函数</span></span><br><span class="line">          store.commit(<span class="string">"setCinemaList"</span>, res.data.data.cinemas)</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  mutations: &#123;</span><br><span class="line">    setCinemaList(state, data) &#123;</span><br><span class="line">      state.cinemaList = data</span><br><span class="line">    &#125;,</span><br><span class="line">    setCityid(state, id) &#123;</span><br><span class="line">      state.cityId = id</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="built_in">module</span></span><br></pre></td></tr></table></figure></div>
<p><strong>src/views/cinema.vue中：</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入辅助函数</span></span><br><span class="line"><span class="keyword">import</span> &#123; mapState, mapActions &#125; <span class="keyword">from</span> <span class="string">"vuex"</span>;</span><br><span class="line"><span class="comment">// 通过辅助函数解析cinema仓库里的方法</span></span><br><span class="line">...mapActions(<span class="string">"cinema"</span>, [<span class="string">"getCinemaActions"</span>])</span><br><span class="line"><span class="comment">// 调用这个方法</span></span><br><span class="line"><span class="keyword">this</span>.getCinemaActions(<span class="keyword">this</span>.cityId);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 后续根据cinemaList渲染就行了</span></span><br><span class="line">...mapState(<span class="string">"cinema"</span>, [<span class="string">"cinemaList"</span>])</span><br></pre></td></tr></table></figure></div>


<h2 id="搜索页面"><a href="#搜索页面" class="headerlink" title="搜索页面"></a>搜索页面</h2><p>分为三部分：一开始展示离你最近/搜到后展示影院列表/搜不到展示找不到的图片；<br>先给第一部分的input框一个v-model=”mytext”属性，后面两部分通过v-show=”mytext”来判断是否显示，即input框里有内容则显示后面两部分，没有内容则显示离你最近；离你最近通过公关仓库的spliceList()获取数据就能渲染了；<br>第二第三部分是互斥的，通过v-else判断是否显示，还有一点要注意的就是搜索功能<br>src/views/search</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">  <span class="comment">//这是直接拿到了公共仓库里的cinemaList，后面直接this.cinemaList就能用了</span></span><br><span class="line">  ...mapState(<span class="string">"cinema"</span>, [<span class="string">"cinemaList"</span>]),</span><br><span class="line"></span><br><span class="line">  searchDatalist() &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.cinemaList) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.cinemaList.filter(</span><br><span class="line">        item =&gt;</span><br><span class="line">          <span class="comment">// 这里只检索了名字 </span></span><br><span class="line">          item.name.includes(<span class="keyword">this</span>.mytext) ||</span><br><span class="line">          item.name.toUpperCase().includes(<span class="keyword">this</span>.mytext.toUpperCase()) ||</span><br><span class="line">          item.name.toLowerCase().includes(<span class="keyword">this</span>.mytext.toLowerCase())</span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line">mounted() &#123;</span><br><span class="line">  <span class="keyword">this</span>.hide(); <span class="comment">//底部导航栏消失</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.cinemaList) &#123;</span><br><span class="line">    <span class="comment">// 如果仓库里已经有cinemaList，就直接拿来渲染</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 如果还没有cinemaList，通过仓库的方法请求数据</span></span><br><span class="line">    <span class="keyword">this</span>.getCinemaActions(<span class="keyword">this</span>.cityId);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line">destroyed() &#123;</span><br><span class="line">  <span class="keyword">this</span>.show(); <span class="comment">//底部导航栏出现</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h1 id="vuex"><a href="#vuex" class="headerlink" title="vuex"></a>vuex</h1><p>vuex就是一个公共仓库，里面存有各组件都能用的数据或方法</p>
<h2 id="下面举个栗子："><a href="#下面举个栗子：" class="headerlink" title="下面举个栗子："></a>下面举个栗子：</h2><p><strong>/src/store/module/bottomBarModule.js，分仓库-定义子组件要用到的数据/方法</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="built_in">module</span> = &#123;</span><br><span class="line">  namespaced: <span class="literal">true</span>, <span class="comment">//开启命名空间</span></span><br><span class="line">  state: &#123;</span><br><span class="line">    isBottom: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  mutations: &#123;</span><br><span class="line">    show(state) &#123;</span><br><span class="line">      state.isBottom = <span class="literal">true</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    hide(state) &#123;</span><br><span class="line">      state.isBottom = <span class="literal">false</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="built_in">module</span></span><br></pre></td></tr></table></figure></div>

<p><strong>/src/store/index.js，总仓库-汇总分仓库</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> bottombar <span class="keyword">from</span> <span class="string">"./module/bottomBarModule"</span></span><br><span class="line"><span class="keyword">import</span> cinema <span class="keyword">from</span> <span class="string">"./module/cinemaModule"</span></span><br><span class="line"><span class="keyword">import</span> city <span class="keyword">from</span> <span class="string">"./module/citymodule"</span></span><br><span class="line"></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  state: &#123; <span class="comment">//用来定义共享状态</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">//对于state进行相关的处理，根据这个state里面的共享状态派发新的状态</span></span><br><span class="line">  <span class="comment">//类似于 vue当中的计算属性的概念</span></span><br><span class="line">  getters: &#123;&#125;,</span><br><span class="line"></span><br><span class="line">  actions: &#123; <span class="comment">//实现异步请求操作  后续触发getCinemaActions ==&gt;进行异步api请求获取数据==&gt; commit提交具体mutations==&gt; mutation内部才可以同步的更改状态</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  mutations: &#123; <span class="comment">//存放了所有更改状态的方法</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  modules: &#123;</span><br><span class="line">    cinema, <span class="comment">//影院的模块</span></span><br><span class="line">    bottombar, <span class="comment">//tabbar的模块</span></span><br><span class="line">    city <span class="comment">//城市的模块</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div>

<p><strong>各组件中，通过辅助函数使用仓库里的数据/方法</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; mapState, mapGetters, mapActions, mapMutations &#125; <span class="keyword">from</span> <span class="string">"vuex"</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  methods: &#123;</span><br><span class="line">    ...mapMutations(<span class="string">"bottombar"</span>, [<span class="string">"show"</span>]),</span><br><span class="line">    ...mapMutations(<span class="string">"bottombar"</span>, [<span class="string">"hide"</span>])</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted() &#123;</span><br><span class="line">    <span class="keyword">this</span>.hide()</span><br><span class="line">  &#125;,</span><br><span class="line">  destroyed() &#123;</span><br><span class="line">    <span class="keyword">this</span>.show()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div>

<h2 id="vuex持久化存储"><a href="#vuex持久化存储" class="headerlink" title="vuex持久化存储"></a>vuex持久化存储</h2><p>vuex的 数据/方法 默认是存在缓存里的，页面一刷新就会消失，但是我们想要用户刷新时 城市/地区 等数据保持不变，可以手动把vuex的数据存到浏览器的LocalStorage，也可以借助插件自动存储。<br><strong>vuex-persistedstate</strong><br>1.yarn add vuex-persistedstate -S<br>2.src/router/index.js，</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 第一步引入</span></span><br><span class="line"><span class="keyword">import</span> createPersistedState <span class="keyword">from</span> <span class="string">"vuex-persistedstate"</span>;</span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 第二步使用插件,</span></span><br><span class="line">  plugins: [createPersistedState(&#123;</span><br><span class="line">    reducer(data) &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        city: data.city,</span><br><span class="line">        cinema: data.cinema</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)],</span><br><span class="line"></span><br><span class="line">  modules: &#123;</span><br><span class="line">    cinema, <span class="comment">//影院的模块</span></span><br><span class="line">    bottombar, <span class="comment">//tabbar的模块</span></span><br><span class="line">    city <span class="comment">//城市的模块</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div>

<h2 id="利用vuex优化请求次数"><a href="#利用vuex优化请求次数" class="headerlink" title="利用vuex优化请求次数"></a>利用vuex优化请求次数</h2><p>目前，我们每点击一次电影/影院都会请求一次，可以用vuex来优化；<br>前面我们已经把city/cinema仓库里的数据存到LocalStorage里了，在请求数据时就可以做判断，如果已经有cinemaList就不请求：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.cinemaList.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">  <span class="comment">// 如果有数据就不请求了，直接使用缓存vuex的数据</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="keyword">this</span>.getCinemaActions(<span class="keyword">this</span>.cityId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>但是加了这个判断后，再切换城市回到cinemaList页面，程序就发现vuex有数据，不会再次请求从而更新数据了。因此我们需要在前往 切换城市 页面时把数据清空：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 前往搜索的按钮</span></span><br><span class="line">handleChangePage(path) &#123;</span><br><span class="line">  <span class="keyword">if</span> (path === <span class="string">"/cinema/city"</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.setCinemaList([]);</span><br><span class="line">    <span class="keyword">this</span>.setFilmList1([]);</span><br><span class="line">    <span class="keyword">this</span>.setFilmList2([]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">this</span>.$router.push(path);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>以此类推，只要数据需要更新，就得先把数据清空；不需要更新就不用清空，直接用缓存里的数据</p>
<h1 id="transition"><a href="#transition" class="headerlink" title="transition"></a>transition</h1><p>利用vue的transition实现组件转场过渡，<br><strong>src/App.vue中：</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 路由插槽 --&gt;</span><br><span class="line">    &lt;transition name&#x3D;&quot;app&quot; mode&#x3D;&quot;out-in&quot;&gt;</span><br><span class="line">      &lt;router-view&gt;&lt;&#x2F;router-view&gt;</span><br><span class="line">    &lt;&#x2F;transition&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang&#x3D;&quot;scss&quot;&gt;</span><br><span class="line">.app-enter-active &#123;</span><br><span class="line">  animation: move 0.5s;</span><br><span class="line">&#125;</span><br><span class="line">.app-leave-active &#123;</span><br><span class="line">  animation: move 0.5s reverse;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@keyframes move &#123;</span><br><span class="line">  0% &#123;</span><br><span class="line">    opacity: 0;</span><br><span class="line">    transform: translateY(50px);</span><br><span class="line">  &#125;</span><br><span class="line">  100% &#123;</span><br><span class="line">    opacity: 1;</span><br><span class="line">    transform: translateY(0px);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure></div>

<h1 id="vant"><a href="#vant" class="headerlink" title="vant"></a>vant</h1><p>1.安装vant：<code>yarn add vant -S</code>，<br>2.安装插件：<code>yarn add babel-plugin-import -D</code>，<br>3.新建babel.config.js：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  presets: [</span><br><span class="line">    <span class="string">'@vue/cli-plugin-babel/preset'</span></span><br><span class="line">  ],</span><br><span class="line">  plugins: [</span><br><span class="line">    [<span class="string">'import'</span>, &#123;</span><br><span class="line">      libraryName: <span class="string">'vant'</span>,</span><br><span class="line">      libraryDirectory: <span class="string">'es'</span>,</span><br><span class="line">      style: <span class="literal">true</span></span><br><span class="line">    &#125;, <span class="string">'vant'</span>]</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>4.使用也分为三步：引入=&gt;写标签=&gt;相关配置</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;!-- 第二步,不一定有 --&gt;</span><br><span class="line">  &lt;form @submit.prevent&#x3D;&quot;login&quot;&gt;</span><br><span class="line">    &lt;van-field v-model&#x3D;&quot;username&quot; label&#x3D;&quot;用户:&quot; &#x2F;&gt;</span><br><span class="line">    &lt;van-field v-model&#x3D;&quot;password&quot; type&#x3D;&quot;password&quot; label&#x3D;&quot;密码：&quot; &#x2F;&gt;</span><br><span class="line">    &lt;van-button type&#x3D;&quot;primary&quot;&gt;登录&lt;&#x2F;van-button&gt;</span><br><span class="line">  &lt;&#x2F;form&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">&#x2F;&#x2F; 第一步</span><br><span class="line">import Vue from &#39;vue&#39;;</span><br><span class="line">import &#123; Button,Field,Dialog  &#125; from &#39;vant&#39;;</span><br><span class="line">Vue.use(Button);</span><br><span class="line">Vue.use(Field);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 第三步，某些时候需要配置，具体看文档</span><br><span class="line">export&#123;</span><br><span class="line">  methods: &#123;</span><br><span class="line">    previewImg(index) &#123;</span><br><span class="line">      ImagePreview(&#123;</span><br><span class="line">        images: this.filmInfo.photos,</span><br><span class="line">        startPosition: index,</span><br><span class="line">        closeable: true,</span><br><span class="line">        closeIconPosition: &quot;top-left&quot;,</span><br><span class="line">        closeIcon:</span><br><span class="line">          &quot;https:&#x2F;&#x2F;ss0.bdstatic.com&#x2F;70cFuHSh_Q1YnxGkpoWK1HF6hhy&#x2F;it&#x2F;u&#x3D;3274958432,4178098164&amp;fm&#x3D;26&amp;gp&#x3D;0.jpg&quot;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></div>

<h1 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h1><h2 id="影院列表页的滑动优化"><a href="#影院列表页的滑动优化" class="headerlink" title="影院列表页的滑动优化"></a>影院列表页的滑动优化</h2><p>1.yarn add better-scroll -S<br>2.组件中</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 影院列表 --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;list&quot; :style&#x3D;&quot;&#123;height:scrollHeight,overflow:&#39;hidden&#39;&#125;&quot;&gt;</span><br><span class="line">      &lt;ul&gt;</span><br><span class="line">        &lt;List v-for&#x3D;&quot;item in computedDatalist&quot; :key&#x3D;&quot;item.cinemaId&quot; :item&#x3D;&quot;item&quot;&gt;&lt;&#x2F;List&gt;</span><br><span class="line">      &lt;&#x2F;ul&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import BetterScroll from &quot;better-scroll&quot;;</span><br><span class="line"></span><br><span class="line">mounted() &#123;</span><br><span class="line">  this.scrollHeight &#x3D; document.documentElement.clientHeight - 95 - 50 + &quot;px&quot;;</span><br><span class="line">  &#x2F;&#x2F; 进行实例化操作</span><br><span class="line">  new BetterScroll(&quot;.list&quot;, &#123;</span><br><span class="line">    scrollbar: &#123;</span><br><span class="line">      fade: true</span><br><span class="line">    &#125;,</span><br><span class="line">    click: true &#x2F;&#x2F; 可以被点击了</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></div>

<h1 id="上线"><a href="#上线" class="headerlink" title="上线"></a>上线</h1><p>这个放在另一篇文章</p>
]]></content>
      <categories>
        <category>vue</category>
      </categories>
  </entry>
  <entry>
    <title>nuxt服务端渲染</title>
    <url>/jackhuang-haohua.github.io/2020/04/08/2020-04-nuxt/</url>
    <content><![CDATA[<h2 id="两种渲染方式"><a href="#两种渲染方式" class="headerlink" title="两种渲染方式"></a>两种渲染方式</h2><h3 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h3><p>　核心优点是方便seo优化。概念：后端先调用数据库，获得数据之后，将数据和页面元素进行拼装，组合成完整的html页面，再直接返回给浏览器，以便用户浏览。<br>　比如博客园的网站，右键查看代码或发现文字都能看到，爬虫也就能爬到这些字；大部分网站数据都是用插值语法加上去的，所以爬不到数据；</p>
<h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><p>　数据由浏览器通过ajax动态获得，再通过js将数据填充到dom元素上最终展示到网页中，这样的过程就叫做客户端渲染。</p>
<p><strong>区别</strong></p>
<ul>
<li>客户端渲染不利于SEO搜索引擎优化</li>
<li>服务端渲染是可以被爬虫抓取到的，客户端异步渲染是很难被爬虫抓取到的</li>
<li>服务端渲染对SEO友好，经过服务端渲染的页面，在网络传输的时候，传输的是一个真实的页面，所以爬虫就会对这个页面中的关键数据进行分析、收录。</li>
<li>服务端渲染缺点就是 对服务器压力比较大</li>
<li>客户端渲染减轻了服务器端的渲染压力，能够实现前后端分离开发</li>
<li>客户端渲染缺点就是 对SEO相当的不友好</li>
</ul>
<h2 id="Nuxt-js"><a href="#Nuxt-js" class="headerlink" title="Nuxt.js"></a>Nuxt.js</h2><h3 id="介绍与安装"><a href="#介绍与安装" class="headerlink" title="介绍与安装"></a>介绍与安装</h3><p>简介：<a href="https://zh.nuxtjs.org/guide" target="_blank">Nuxt.js</a><br>安装：<code>npx create-nuxt-app &lt;项目名&gt;</code>，手动选择一些选项<br>启动：<code>yarn dev</code> 或者 <code>npm run</code></p>
<h3 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h3><h4 id="创建路由"><a href="#创建路由" class="headerlink" title="创建路由"></a>创建路由</h4><p>　Nuxt.js 依据 pages 目录结构自动生成 vue-router 模块的路由配置；要在页面之间使用路由，使用<code>&lt;nuxt-link&gt;</code> 支持activeClass、tag。</p>
<h4 id="二级路由"><a href="#二级路由" class="headerlink" title="二级路由"></a>二级路由</h4><p>　创建内嵌子路由，你需要添加一个 Vue 文件，同时添加一个与该文件同名的目录用来存放子视图组件。<br>pages/<br>‐‐| film/<br>‐‐‐‐‐| nowplaying.vue<br>‐‐‐‐‐| comingsoon.vue<br>‐‐| film.vue</p>
<h4 id="动态路由"><a href="#动态路由" class="headerlink" title="动态路由"></a>动态路由</h4><p>pages/<br>‐‐| detail/<br>‐‐‐‐‐| _id.vue<br><strong>获取动态参数：</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">asyncData(&#123;params&#125;)&#123;</span><br><span class="line">  console.log(params.id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h4 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h4><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">router: &#123;</span><br><span class="line">  extendRoutes(routes, resolve) &#123;</span><br><span class="line">    routes.push(&#123;</span><br><span class="line">      path: &quot;&#x2F;&quot;,</span><br><span class="line">      redirect: &quot;&#x2F;film&quot;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    var index &#x3D; routes.findIndex(item&#x3D;&gt;item.path &#x3D;&#x3D;&#x3D; &quot;&#x2F;film&quot;)</span><br><span class="line">    routes[index].children.push(&#123;</span><br><span class="line">      path:&quot;&#x2F;film&quot;,</span><br><span class="line">      redirect:&quot;&#x2F;film&#x2F;nowplaying&quot;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p><strong>或者通过中间件：</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">export default function (&#123; route,redirect&#125;)&#123;</span><br><span class="line">  if(route.fullPath &#x3D;&#x3D;&#x3D; &quot;&#x2F;film&quot;)&#123;</span><br><span class="line">    return redirect(&quot;&#x2F;film&#x2F;nowplaying&quot;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">router: &#123;</span><br><span class="line">  extendRoutes(routes, resolve) &#123;</span><br><span class="line">    routes.push(&#123;</span><br><span class="line">      path: &quot;&#x2F;&quot;,</span><br><span class="line">      redirect: &quot;&#x2F;film&quot;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  middleware:[&quot;redirect&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h4 id="大致总结"><a href="#大致总结" class="headerlink" title="大致总结"></a>大致总结</h4><p>1.一级路由：Nuxt.js 依据 pages 目录结构自动生成 vue-router 模块的路由配置<br>2.二级路由：比如一级路由/film，可以新建film文件夹，里面的vue文件就是二级路由，然后在一级路由里使用<code>&lt;nuxt&gt;</code><br>3.文件layouts/default.vue，相当于App.vue<br>4.<code>&lt;nuxt-link&gt;&lt;/nuxt-link&gt;</code>相当于<code>&lt;router-link&gt;&lt;/router-link&gt;</code><br>5.可以标签里<code>active-class=&quot;active&quot;</code>添加active类名，后续直接<code>.active</code>调用<br>6.重定向，例如输入/film =&gt; 重定向到/film/nowplaying，nuxt.config.js</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    extendRoutes(routes, resolve) &#123;</span><br><span class="line">      routes.push(&#123;</span><br><span class="line">        path: <span class="string">"/"</span>,</span><br><span class="line">        redirect: <span class="string">"/film"</span></span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="keyword">var</span> index = routes.findIndex(<span class="function"><span class="params">item</span>=&gt;</span>item.path === <span class="string">"/film"</span>)</span><br><span class="line">      routes[index].children.push(&#123;</span><br><span class="line">        path:<span class="string">"/film"</span>,</span><br><span class="line">        redirect:<span class="string">"/film/nowplaying"</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    middleware:[<span class="string">"redirect"</span>]      </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="异步数据"><a href="#异步数据" class="headerlink" title="异步数据"></a>异步数据</h3><p>　①如果组件的数据不需要异步获取或处理，可以直接返回指定的字面对象作为组件的数据。<br>　②通过asyncData来异步请求数据<br>如果在created里面实现异步的，对于搜索引擎来说同样是不知道的。</p>
<p>　第一次刷新的时候是后端自己触发asyncData,异步获取到数据，然后进行组装，组装完毕后再将数据回传给前端进行显示，有利于seo搜索引擎优化。<br>　后续的都是前端去调用asyncData这个方法，属于单页应用，有利于用户体验</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">asyncData()&#123;</span><br><span class="line">  return axios(&#123;</span><br><span class="line">    url:&quot;https:&#x2F;&#x2F;m.maizuo.com&#x2F;gateway?cityId&#x3D;440100&amp;pageNum&#x3D;1&amp;pageSize&#x3D;10&amp;type&#x3D;1&amp;k&#x3D;3273067&quot;,</span><br><span class="line">  headers:&#123;</span><br><span class="line">    &quot;X-Host&quot;: &quot;mall.film-ticket.film.list&quot;</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;).then(res&#x3D;&gt;(&#123;</span><br><span class="line">    datalist:res.data.data.films</span><br><span class="line">  &#125;))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="反向代理解决跨域"><a href="#反向代理解决跨域" class="headerlink" title="反向代理解决跨域"></a>反向代理解决跨域</h3><p>①<code>cnpm i @nuxtjs/proxy</code></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">modules: [</span><br><span class="line">  &#39;@nuxtjs&#x2F;axios&#39;,</span><br><span class="line">  &#39;@nuxtjs&#x2F;proxy&#39;,</span><br><span class="line">],</span><br><span class="line">axios: &#123;</span><br><span class="line">  proxy:true</span><br><span class="line">&#125;,</span><br><span class="line">proxy:&#123;</span><br><span class="line">  &quot;&#x2F;ajax&quot;:&#123;</span><br><span class="line">    target:&quot;http:&#x2F;&#x2F;m.maoyan.com&quot;,</span><br><span class="line">    changeOrigin:true</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>②请求数据</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">asyncData()&#123;</span><br><span class="line">  return </span><br><span class="line">  axios.get(process.server?&quot;http:&#x2F;&#x2F;m.maoyan.com&#x2F;ajax&#x2F;movieOnInfoList?token&#x3D;&quot;:&quot;&#x2F;ajax&#x2F;movieOnInfoList?token&#x3D;&quot;)</span><br><span class="line">  .then(res&#x3D;&gt;(&#123;</span><br><span class="line">    datalist:res.data.movieList</span><br><span class="line">  &#125;))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="vue状态树"><a href="#vue状态树" class="headerlink" title="vue状态树"></a>vue状态树</h3><p>①需要安装vuex，<code>cnpm i vuex -S</code></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">export const state &#x3D; () &#x3D;&gt; (&#123;</span><br><span class="line">  counter: 0</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">export const mutations &#x3D; &#123;</span><br><span class="line">  increment(state) &#123;</span><br><span class="line">    state.counter++</span><br><span class="line">  &#125;,</span><br><span class="line">  changeCounter(state, count) &#123;</span><br><span class="line">    state.counter &#x3D; count</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;!-- 是由高阶函数给组件添加状态 --&gt;</span><br><span class="line">...mapState(&#39;todo&#39;,[&#39;counter&#39;])</span><br><span class="line">...mapMutations(&#39;todo&#39;,[&#39;increment&#39;])</span><br></pre></td></tr></table></figure></div>

<p>②fetch 方法用于在渲染页面前填充应用的状态树（store）数据，与 asyncData 方法类似，不同的是它不会设置组件的数据。如果页面组件设置了 fetch 方法，它会在组件每次加载前被调用（在服务端或切换至目标路由之前）。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">async fetch(&#123;store&#125;)&#123;</span><br><span class="line">  let &#123; data &#125; &#x3D; await </span><br><span class="line">  axios.get(process.server?&quot;http:&#x2F;&#x2F;m.maoyan.com&#x2F;ajax&#x2F;movieOnInfoList?token&#x3D;&quot;:&#39;&#x2F;ajax&#x2F;movieOnInfoList?token&#x3D;&#39;)</span><br><span class="line">  store.commit(&#39;todo&#x2F;changeCounter&#39;, data.movieList[0].showst)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>1.scss相关：见官网<a href="https://www.nuxtjs.cn/api/configuration-css" target="_blank">Nuxt中文网</a></p>
]]></content>
      <categories>
        <category>nuxt</category>
      </categories>
  </entry>
  <entry>
    <title>使用gulp</title>
    <url>/jackhuang-haohua.github.io/2019/08/28/2020-02-gulp2/</url>
    <content><![CDATA[<h2 id="gulp"><a href="#gulp" class="headerlink" title="gulp"></a>gulp</h2><p>假设项目有这些页面：</p>
<ul>
<li>pages文件夹  -&gt; 存放html页面</li>
<li>css文件夹  -&gt; 存放css文件</li>
<li>js文件夹  -&gt; 存放js文件</li>
<li>mages文件夹  -&gt; 存放图片文件</li>
<li>fonts文件夹  -&gt; 存放字体图标文件</li>
<li>videos文件夹  -&gt; 存放视频文件</li>
</ul>
<p>我们在根目录下新建gulpfile.js文件，vscode会出现一个小辣椒图标；</p>
<h2 id="gulp一些方法"><a href="#gulp一些方法" class="headerlink" title="gulp一些方法"></a>gulp一些方法</h2><ol>
<li>src()：<code>src(&#39;你要打包的文件的地址&#39;)</code></li>
<li>pipe()：管道，是任务可以继续“流”向下一步</li>
<li>dest()：用来写入文件，把已经压缩号的代码放在那一个文件夹里面；如果没有你指定的文件夹，会自动创建一个这个文件夹放进去</li>
<li>parallel()：用来<em>并行</em>执行多个任务，<code>gulp.parallel(任务1，任务2, ...)</code></li>
<li>series()：用来<em>逐个</em>执行多个任务，<code>gulp.series(任务1，任务2，...)</code></li>
<li>watch()：用来监控文件变化的，<code>gulp.watch(监控的文件目录，要执行的任务)</code></li>
</ol>
<h2 id="css"><a href="#css" class="headerlink" title="css"></a>css</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>)</span><br><span class="line"><span class="keyword">const</span> cssmin = <span class="built_in">require</span>(<span class="string">'gulp-cssmin'</span>)</span><br><span class="line"><span class="keyword">const</span> autoprefixer = <span class="built_in">require</span>(<span class="string">'gulp-autoprefixer'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> cssHandler = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> gulp.src(<span class="string">'./src/css/*.css'</span>)   <span class="comment">// 找到src/css目录下后缀为.css的文件</span></span><br><span class="line">             .pipe(autoprefixer())   <span class="comment">// 把css代码自动添加前缀</span></span><br><span class="line">             .pipe(cssmin())  <span class="comment">// 压缩css代码</span></span><br><span class="line">             .pipe(gulp.dest(<span class="string">'./dist/css'</span>))  <span class="comment">// 压缩完毕的css放在dist/css文件夹里</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="js"><a href="#js" class="headerlink" title="js"></a>js</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>)</span><br><span class="line"><span class="keyword">const</span> uglify = <span class="built_in">require</span>(<span class="string">'gulp-uglify'</span>)</span><br><span class="line"><span class="keyword">const</span> babel = <span class="built_in">require</span>(<span class="string">'gulp-babel'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> jsHandler = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> gulp.src(<span class="string">'./src/js/*.js'</span>) <span class="comment">// 找到文件</span></span><br><span class="line">             .pipe(babel(&#123;</span><br><span class="line">               presets: [<span class="string">'@babel/env'</span>]</span><br><span class="line">             &#125;)) <span class="comment">// 转码 es6 转换成 es5</span></span><br><span class="line">             .pipe(uglify()) <span class="comment">// 压缩</span></span><br><span class="line">             .pipe(gulp.dest(<span class="string">'./dist/js'</span>)) <span class="comment">// 把压缩完毕的放入文件夹</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="html"><a href="#html" class="headerlink" title="html"></a>html</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>)</span><br><span class="line"><span class="keyword">const</span> htmlmin = <span class="built_in">require</span>(<span class="string">'gulp-htmlmin'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> htmlHandler = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> gulp.src(<span class="string">'./src/pages/*.html'</span>) <span class="comment">// 找到要压缩的 html 文件</span></span><br><span class="line">             .pipe(htmlmin(&#123; <span class="comment">// 想进行压缩, 需要在这个对象里面进行配置</span></span><br><span class="line">               removeAttributeQuotes: <span class="literal">true</span>, <span class="comment">// 移出属性上的双引号</span></span><br><span class="line">               removeComments: <span class="literal">true</span>, <span class="comment">// 移除注释</span></span><br><span class="line">               collapseBooleanAttributes: <span class="literal">true</span>, <span class="comment">// 把值为布尔值的属性简写</span></span><br><span class="line">               collapseWhitespace: <span class="literal">true</span>, <span class="comment">// 移除所有空格, 变成一行代码</span></span><br><span class="line">               minifyCSS: <span class="literal">true</span>, <span class="comment">// 把页面里面的 style 标签里面的 css 样式也去空格</span></span><br><span class="line">               minifyJS: <span class="literal">true</span>, <span class="comment">// 把页面里面的 script 标签里面的 js 代码给去空格</span></span><br><span class="line">             &#125;)) <span class="comment">// 压缩</span></span><br><span class="line">             .pipe(gulp.dest(<span class="string">'./dist/pages'</span>)) <span class="comment">// 把压缩完毕的放到一个指定目录</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="image"><a href="#image" class="headerlink" title="image"></a>image</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> imgHandler = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> gulp.src(<span class="string">'./src/images/**'</span>) <span class="comment">// images 文件夹下的所有文件</span></span><br><span class="line">             .pipe(gulp.dest(<span class="string">'./dist/images'</span>)) <span class="comment">// 放到指定目录就可以了</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="lib"><a href="#lib" class="headerlink" title="lib"></a>lib</h2><p>　其他不需要处理的文件，</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> libHandler = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> gulp.src(<span class="string">'./src/lib/**'</span>)</span><br><span class="line">             .pipe(gulp.dest(<span class="string">'./dist/lib'</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="del"><a href="#del" class="headerlink" title="del"></a>del</h2><p>　最好就是在每次整体打包之前, 把 dist 目录删除了，用最新的 src 重新生成一遍内容；</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> del = <span class="built_in">require</span>(<span class="string">'del'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> delHandler = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 这个函数的目的就是为了删除 dist 目录使用的</span></span><br><span class="line">  <span class="keyword">return</span> del([<span class="string">'./dist'</span>])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="webserver"><a href="#webserver" class="headerlink" title="webserver"></a>webserver</h2><p>　在开发过程中直接把写的东西在服务器上打开；自动刷新: 当 dist 目录里面的代码改变以后, 就会自动刷新浏览器；</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> webserver = <span class="built_in">require</span>(<span class="string">'gulp-webserver'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> serverHandler = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 要把页面在服务器上打开</span></span><br><span class="line">  <span class="comment">// 打开的是 dist 目录里面我已经压缩好的页面</span></span><br><span class="line">  <span class="keyword">return</span> gulp.src(<span class="string">'./dist'</span>) <span class="comment">// 找到我要打开的页面的文件夹</span></span><br><span class="line">             .pipe(webserver(&#123; <span class="comment">// 需要一些配置项</span></span><br><span class="line">               host: <span class="string">'www.guoxiang.com'</span>, <span class="comment">// 域名, 这个域名可以自定义</span></span><br><span class="line">               port: <span class="number">8080</span>, <span class="comment">// 端口号, 0 ~ 65535, 尽量不适用 0 ~ 1023</span></span><br><span class="line">               open: <span class="string">'./pages/index.html'</span>, <span class="comment">// 你默认打开的首页, 从 dist 下面找</span></span><br><span class="line">               livereload: <span class="literal">true</span>, <span class="comment">// 自动刷新浏览器 - 热重启</span></span><br><span class="line">               <span class="comment">// 所有的代理配置都在 proxies 里面</span></span><br><span class="line">               proxies: [</span><br><span class="line">                 <span class="comment">// 每一个代理配置就是一个对象</span></span><br><span class="line">                 &#123;</span><br><span class="line">                   source: <span class="string">'/gx'</span>, <span class="comment">// 源, 你的代理标识符</span></span><br><span class="line">                   <span class="comment">// 你直接请求下面这个地址压根也拿不到东西, 因为跨域了</span></span><br><span class="line">                   target: <span class="string">'http://127.0.0.1/test.php'</span> <span class="comment">// 目标, 你要代理的地址</span></span><br><span class="line">                 &#125;,</span><br><span class="line">                 &#123;</span><br><span class="line">                   source: <span class="string">'/gx2'</span>,</span><br><span class="line">                   target: <span class="string">'http://127.0.0.1/xxx.php'</span></span><br><span class="line">                 &#125;</span><br><span class="line">               ]</span><br><span class="line">             &#125;)) <span class="comment">// 开启服务器</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="自动监控"><a href="#自动监控" class="headerlink" title="自动监控"></a>自动监控</h2><p>监控 src文件夹 下的文件, 只要一修改, 就执行对应的任务</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> watchHandler = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  gulp.watch(<span class="string">'./src/css/*.css'</span>, cssHandler)</span><br><span class="line">  gulp.watch(<span class="string">'./src/js/*.js'</span>, jsHandler)</span><br><span class="line">  gulp.watch(<span class="string">'./src/pages/*.html'</span>, htmlHandler)</span><br><span class="line">  gulp.watch(<span class="string">'./src/lib/**'</span>, libHandler)</span><br><span class="line">  gulp.watch(<span class="string">'./src/images/**'</span>, imgHandler)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="导出任务流"><a href="#导出任务流" class="headerlink" title="导出任务流"></a>导出任务流</h2><p>　导出一个默认任务，后面在命令行执行 gulp default 的时候, 就会自动把写在 parallel 里面的五个任务给一起执行了；<br>　tip：当在命令行执行 gulp default 的时候, 可以不写 default</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports.default = gulp.series(</span><br><span class="line">  delHandler,</span><br><span class="line">  gulp.parallel(cssHandler, jsHandler, htmlHandler, imgHandler, libHandler),</span><br><span class="line">  serverHandler,</span><br><span class="line">  watchHandler</span><br><span class="line">)</span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>gulp</category>
      </categories>
  </entry>
  <entry>
    <title>vue生命周期</title>
    <url>/jackhuang-haohua.github.io/2019/04/24/2020-03-vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</url>
    <content><![CDATA[<h2 id="一、各函数详解"><a href="#一、各函数详解" class="headerlink" title="一、各函数详解"></a>一、各函数详解</h2><blockquote>
<p>一张熟悉的图片<br><img src="https://s1.ax1x.com/2020/03/24/8OA69x.md.png" alt="8OA69x.md.png" style="zoom:25%;" /></p>
</blockquote>
<p><strong>各函数详解</strong></p>
<table>
<thead>
<tr>
<th>生命周期钩子</th>
<th>组件状态</th>
<th>应用</th>
</tr>
</thead>
<tbody><tr>
<td>beforeCreate</td>
<td>实例初始化时执行，this指向创建的实例；dom节点未加载；不能访问到data、computed、watch、methods上的方法和数据</td>
<td>初始化非响应式变量</td>
</tr>
<tr>
<td>created</td>
<td>实例初始化时执行；dom节点未加载；可访问data、computed、watch、methods上的方法和数据，但更改数据不造成影响；不能访问到$el属性，$ref属性内容为空数组</td>
<td>ajax请求，初始化事件的绑定</td>
</tr>
<tr>
<td>beforeMount</td>
<td>渲染之前调用，beforeMount之前，会找到对应的template，编译成虚拟dom，即将放入render函数</td>
<td>–</td>
</tr>
<tr>
<td>mounted</td>
<td>组件初始化最后一步；虚拟dom在render函数里替换对应的el挂载点，渲染成真实dom节点，此时可以通过DOM API获取到DOM节点，$ref属性可以访问</td>
<td>常用于获取VNode信息和操作，ajax请求</td>
</tr>
<tr>
<td>beforeupdate</td>
<td>数据更新时调用，可获取更新前的数据</td>
<td>适合在更新之前访问现有的DOM，比如手动移除已添加的事件监听器</td>
</tr>
<tr>
<td>updated</td>
<td>新虚拟DOM与就虚拟dom对比，通过diff算法比出差异，再重新渲染</td>
<td>避免在这个钩子函数中操作数据，可能陷入死循环</td>
</tr>
<tr>
<td>beforeDestroy</td>
<td>vm.$destroy()触发时调用，实例仍然完全可用，this仍能获取到实例</td>
<td>常用于销毁定时器、解绑全局事件、销毁插件对象等操作</td>
</tr>
<tr>
<td>destroyed</td>
<td>Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁；dom节点仍存在，但失去双向绑定功能</td>
<td>–</td>
</tr>
</tbody></table>
<h2 id="二、单组件生命周期"><a href="#二、单组件生命周期" class="headerlink" title="二、单组件生命周期"></a>二、单组件生命周期</h2><p>如下，body里有一个组件：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">my-component</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"my-component"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">"title"</span>&gt;</span>父组件文本内容<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"msg"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"destroy"</span>&gt;</span>destroy<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    Vue.component(<span class="string">"my-component"</span>, &#123;</span></span><br><span class="line"><span class="actionscript">        template: <span class="string">"#my-component"</span>,</span></span><br><span class="line">        data() &#123;</span><br><span class="line"><span class="actionscript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">                msg: <span class="string">"data"</span></span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        beforeCreate() &#123;</span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">"beforeCreate...."</span>, <span class="keyword">this</span>.msg2, <span class="built_in">document</span>.getElementById(<span class="string">"title"</span>))</span></span><br><span class="line">        &#125;,</span><br><span class="line">        created() &#123;</span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">"created..."</span>, <span class="keyword">this</span>.msg2, <span class="built_in">document</span>.getElementById(<span class="string">"title"</span>))</span></span><br><span class="line">        &#125;,</span><br><span class="line">        beforeMount() &#123;</span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">"beforeMount...."</span>, <span class="keyword">this</span>.msg2, <span class="built_in">document</span>.getElementById(<span class="string">"title"</span>))</span></span><br><span class="line">        &#125;,</span><br><span class="line">        mounted() &#123;</span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">"mounted....."</span>, <span class="keyword">this</span>.msg2, <span class="built_in">document</span>.getElementById(<span class="string">"title"</span>))</span></span><br><span class="line">        &#125;,</span><br><span class="line">        beforeUpdate() &#123;</span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">"beforeUpdate...."</span>, <span class="keyword">this</span>.msg2, <span class="built_in">document</span>.getElementById(<span class="string">"title"</span>))</span></span><br><span class="line">        &#125;,</span><br><span class="line">        updated() &#123;</span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">"updated...."</span>, <span class="keyword">this</span>.msg2, <span class="built_in">document</span>.getElementById(<span class="string">"title"</span>))</span></span><br><span class="line">        &#125;,</span><br><span class="line">        beforeDestroy() &#123;</span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">"beforeDestroy...."</span>, <span class="keyword">this</span>.msg2, <span class="built_in">document</span>.getElementById(<span class="string">"title"</span>))</span></span><br><span class="line">        &#125;,</span><br><span class="line">        destroyed() &#123;</span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">"destroyed...."</span>, <span class="keyword">this</span>.msg2, <span class="built_in">document</span>.getElementById(<span class="string">"title"</span>))</span></span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            destroy() &#123;</span><br><span class="line"><span class="actionscript">                <span class="keyword">this</span>.$destroy()</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="keyword">new</span> Vue(&#123;&#125;).$mount(<span class="string">"#app"</span>);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></div>




<p>第一次打开时，为初始化过程，调用了四个钩子函数，打印如下：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CONSOLE"><figure class="iseeu highlight /console"><table><tr><td class="code"><pre><span class="line">beforeCreate.... undefined null</span><br><span class="line">created... undefined null</span><br><span class="line">beforeMount.... undefined null</span><br><span class="line">mounted..... undefined &lt;h1 id=​"title"&gt;​父组件文本内容​&lt;/h1&gt;​</span><br></pre></td></tr></table></figure></div>
<p>数据改变时，调用了两个钩子函数，打印如下：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CONSOLE"><figure class="iseeu highlight /console"><table><tr><td class="code"><pre><span class="line">beforeUpdate.... undefined &lt;h1 id=​"title"&gt;​父组件文本内容​&lt;/h1&gt;​</span><br><span class="line">updated.... undefined &lt;h1 id=​"title"&gt;​父组件文本内容​&lt;/h1&gt;​</span><br></pre></td></tr></table></figure></div>
<p>销毁时，调用两个钩子函数，打印如下：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CONSOLE"><figure class="iseeu highlight /console"><table><tr><td class="code"><pre><span class="line">beforeDestroy.... undefined &lt;h1 id=​"title"&gt;​父组件文本内容​&lt;/h1&gt;​</span><br><span class="line">destroyed.... undefined &lt;h1 id=​"title"&gt;​父组件文本内容​&lt;/h1&gt;​</span><br></pre></td></tr></table></figure></div>



<h2 id="三、父子组件生命周期"><a href="#三、父子组件生命周期" class="headerlink" title="三、父子组件生命周期"></a>三、父子组件生命周期</h2><p>如下，body里有一对父子组件：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">my-component</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"my-component"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">"title"</span>&gt;</span>父组件文本内容<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"msg"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"destroy"</span>&gt;</span>destroy<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">son-component</span>&gt;</span><span class="tag">&lt;/<span class="name">son-component</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"son-component"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">"title2"</span>&gt;</span>子组件文本内容<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"msg2"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"destroy2"</span>&gt;</span>destroy<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    Vue.component(<span class="string">"my-component"</span>, &#123;</span></span><br><span class="line"><span class="actionscript">        template: <span class="string">"#my-component"</span>,</span></span><br><span class="line">        data() &#123;</span><br><span class="line"><span class="actionscript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">                msg: <span class="string">"data"</span></span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        beforeCreate() &#123;</span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">"parent beforeCreate...."</span>, <span class="keyword">this</span>.msg, <span class="built_in">document</span>.getElementById(<span class="string">"title"</span>))</span></span><br><span class="line">        &#125;,</span><br><span class="line">        created() &#123;</span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">"parent created..."</span>, <span class="keyword">this</span>.msg, <span class="built_in">document</span>.getElementById(<span class="string">"title"</span>))</span></span><br><span class="line">        &#125;,</span><br><span class="line">        beforeMount() &#123;</span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">"parent beforeMount...."</span>, <span class="keyword">this</span>.msg, <span class="built_in">document</span>.getElementById(<span class="string">"title"</span>))</span></span><br><span class="line">        &#125;,</span><br><span class="line">        mounted() &#123;</span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">"parent mounted....."</span>, <span class="keyword">this</span>.msg, <span class="built_in">document</span>.getElementById(<span class="string">"title"</span>))</span></span><br><span class="line">        &#125;,</span><br><span class="line">        beforeUpdate() &#123;</span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">"parent beforeUpdate...."</span>, <span class="keyword">this</span>.msg, <span class="built_in">document</span>.getElementById(<span class="string">"title"</span>))</span></span><br><span class="line">        &#125;,</span><br><span class="line">        updated() &#123;</span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">"parent updated...."</span>, <span class="keyword">this</span>.msg, <span class="built_in">document</span>.getElementById(<span class="string">"title"</span>))</span></span><br><span class="line">        &#125;,</span><br><span class="line">        beforeDestroy() &#123;</span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">"parent beforeDestroy...."</span>, <span class="keyword">this</span>.msg, <span class="built_in">document</span>.getElementById(<span class="string">"title"</span>))</span></span><br><span class="line">        &#125;,</span><br><span class="line">        destroyed() &#123;</span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">"parent destroyed...."</span>, <span class="keyword">this</span>.msg, <span class="built_in">document</span>.getElementById(<span class="string">"title"</span>))</span></span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            destroy() &#123;</span><br><span class="line"><span class="actionscript">                <span class="keyword">this</span>.$destroy()</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    Vue.component(<span class="string">"son-component"</span>, &#123;</span></span><br><span class="line"><span class="actionscript">        template: <span class="string">"#son-component"</span>,</span></span><br><span class="line">        data() &#123;</span><br><span class="line"><span class="actionscript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">                msg2: <span class="string">"son-data"</span></span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        beforeCreate() &#123;</span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">"son beforeCreate...."</span>, <span class="keyword">this</span>.msg2, <span class="built_in">document</span>.getElementById(<span class="string">"title2"</span>))</span></span><br><span class="line">        &#125;,</span><br><span class="line">        created() &#123;</span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">"son created..."</span>, <span class="keyword">this</span>.msg2, <span class="built_in">document</span>.getElementById(<span class="string">"title2"</span>))</span></span><br><span class="line">        &#125;,</span><br><span class="line">        beforeMount() &#123;</span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">"son beforeMount...."</span>, <span class="keyword">this</span>.msg2, <span class="built_in">document</span>.getElementById(<span class="string">"title2"</span>))</span></span><br><span class="line">        &#125;,</span><br><span class="line">        mounted() &#123;</span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">"son mounted....."</span>, <span class="keyword">this</span>.msg2, <span class="built_in">document</span>.getElementById(<span class="string">"title2"</span>))</span></span><br><span class="line">        &#125;,</span><br><span class="line">        beforeUpdate() &#123;</span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">"son beforeUpdate...."</span>, <span class="keyword">this</span>.msg2, <span class="built_in">document</span>.getElementById(<span class="string">"title2"</span>))</span></span><br><span class="line">        &#125;,</span><br><span class="line">        updated() &#123;</span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">"son updated...."</span>, <span class="keyword">this</span>.msg2, <span class="built_in">document</span>.getElementById(<span class="string">"title2"</span>))</span></span><br><span class="line">        &#125;,</span><br><span class="line">        beforeDestroy() &#123;</span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">"son beforeDestroy...."</span>, <span class="keyword">this</span>.msg2, <span class="built_in">document</span>.getElementById(<span class="string">"title2"</span>))</span></span><br><span class="line">        &#125;,</span><br><span class="line">        destroyed() &#123;</span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">"son destroyed...."</span>, <span class="keyword">this</span>.msg2, <span class="built_in">document</span>.getElementById(<span class="string">"title2"</span>))</span></span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            destroy2() &#123;</span><br><span class="line"><span class="actionscript">                <span class="keyword">this</span>.$destroy()</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="actionscript">    <span class="keyword">new</span> Vue(&#123;&#125;).$mount(<span class="string">"#app"</span>);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></div>




<p>第一次打开时，为初始化过程，可见父组件渲染完再到子组件，打印如下：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CONSOLE"><figure class="iseeu highlight /console"><table><tr><td class="code"><pre><span class="line">parent beforeCreate.... undefined null</span><br><span class="line">parent created... data null</span><br><span class="line">parent beforeMount.... data null</span><br><span class="line">son beforeCreate.... undefined null</span><br><span class="line">son created... son-data null</span><br><span class="line">son beforeMount.... son-data null</span><br><span class="line">son mounted..... son-data &lt;h1 id=​"title2"&gt;​子组件文本内容​&lt;/h1&gt;​</span><br><span class="line">parent mounted..... data &lt;h1 id=​"title"&gt;​父组件文本内容​&lt;/h1&gt;​</span><br></pre></td></tr></table></figure></div>

<p>数据改变时，分别调用本身的beforeUpdate和update，与单组件一致；</p>
<p>子组件销毁时，子组件两个销毁函数被调用，打印如下：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CONSOLE"><figure class="iseeu highlight /console"><table><tr><td class="code"><pre><span class="line">son beforeDestroy.... son-data &lt;h1 id=​"title2"&gt;​子组件文本内容​&lt;/h1&gt;​</span><br><span class="line">son destroyed.... son-data &lt;h1 id=​"title2"&gt;​子组件文本内容​&lt;/h1&gt;​</span><br></pre></td></tr></table></figure></div>
<p>父组件销毁时，父子销毁函数都会被调用，并且可见子组件先销毁，打印如下：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CONSOLE"><figure class="iseeu highlight /console"><table><tr><td class="code"><pre><span class="line">parent beforeDestroy.... data &lt;h1 id=​"title"&gt;​父组件文本内容​&lt;/h1&gt;​</span><br><span class="line">son beforeDestroy.... son-data &lt;h1 id=​"title2"&gt;​子组件文本内容​&lt;/h1&gt;​</span><br><span class="line">son destroyed.... son-data &lt;h1 id=​"title2"&gt;​子组件文本内容​&lt;/h1&gt;​</span><br><span class="line">parent destroyed.... data &lt;h1 id=​"title"&gt;​父组件文本内容​&lt;/h1&gt;​</span><br></pre></td></tr></table></figure></div>



<h2 id="四、兄弟组件生命周期"><a href="#四、兄弟组件生命周期" class="headerlink" title="四、兄弟组件生命周期"></a>四、兄弟组件生命周期</h2><p>如下，body里有一对兄弟组件</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">my-component</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bro-component</span>&gt;</span><span class="tag">&lt;/<span class="name">bro-component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"my-component"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">"title"</span>&gt;</span>哥哥组件文本内容<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"msg"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"destroy"</span>&gt;</span>destroy<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"bro-component"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">"title2"</span>&gt;</span>弟弟组件文本内容<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"msg2"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"destroy2"</span>&gt;</span>destroy<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    Vue.component(<span class="string">"my-component"</span>, &#123;</span></span><br><span class="line"><span class="actionscript">        template: <span class="string">"#my-component"</span>,</span></span><br><span class="line">        data() &#123;</span><br><span class="line"><span class="actionscript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">                msg: <span class="string">"data"</span></span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        beforeCreate() &#123;</span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">"bro1 beforeCreate...."</span>, <span class="keyword">this</span>.msg, <span class="built_in">document</span>.getElementById(<span class="string">"title"</span>))</span></span><br><span class="line">        &#125;,</span><br><span class="line">        created() &#123;</span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">"bro1 created..."</span>, <span class="keyword">this</span>.msg, <span class="built_in">document</span>.getElementById(<span class="string">"title"</span>))</span></span><br><span class="line">        &#125;,</span><br><span class="line">        beforeMount() &#123;</span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">"bro1 beforeMount...."</span>, <span class="keyword">this</span>.msg, <span class="built_in">document</span>.getElementById(<span class="string">"title"</span>))</span></span><br><span class="line">        &#125;,</span><br><span class="line">        mounted() &#123;</span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">"bro1 mounted....."</span>, <span class="keyword">this</span>.msg, <span class="built_in">document</span>.getElementById(<span class="string">"title"</span>))</span></span><br><span class="line">        &#125;,</span><br><span class="line">        beforeUpdate() &#123;</span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">"bro1 beforeUpdate...."</span>, <span class="keyword">this</span>.msg, <span class="built_in">document</span>.getElementById(<span class="string">"title"</span>))</span></span><br><span class="line">        &#125;,</span><br><span class="line">        updated() &#123;</span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">"bro1 updated...."</span>, <span class="keyword">this</span>.msg, <span class="built_in">document</span>.getElementById(<span class="string">"title"</span>))</span></span><br><span class="line">        &#125;,</span><br><span class="line">        beforeDestroy() &#123;</span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">"bro1 beforeDestroy...."</span>, <span class="keyword">this</span>.msg, <span class="built_in">document</span>.getElementById(<span class="string">"title"</span>))</span></span><br><span class="line">        &#125;,</span><br><span class="line">        destroyed() &#123;</span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">"bro1 destroyed...."</span>, <span class="keyword">this</span>.msg, <span class="built_in">document</span>.getElementById(<span class="string">"title"</span>))</span></span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            destroy() &#123;</span><br><span class="line"><span class="actionscript">                <span class="keyword">this</span>.$destroy()</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    Vue.component(<span class="string">"bro-component"</span>, &#123;</span></span><br><span class="line"><span class="actionscript">        template: <span class="string">"#bro-component"</span>,</span></span><br><span class="line">        data() &#123;</span><br><span class="line"><span class="actionscript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">                msg2: <span class="string">"bro2-data"</span></span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        beforeCreate() &#123;</span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">"bro2 beforeCreate...."</span>, <span class="keyword">this</span>.msg2, <span class="built_in">document</span>.getElementById(<span class="string">"title2"</span>))</span></span><br><span class="line">        &#125;,</span><br><span class="line">        created() &#123;</span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">"bro2 created..."</span>, <span class="keyword">this</span>.msg2, <span class="built_in">document</span>.getElementById(<span class="string">"title2"</span>))</span></span><br><span class="line">        &#125;,</span><br><span class="line">        beforeMount() &#123;</span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">"bro2 beforeMount...."</span>, <span class="keyword">this</span>.msg2, <span class="built_in">document</span>.getElementById(<span class="string">"title2"</span>))</span></span><br><span class="line">        &#125;,</span><br><span class="line">        mounted() &#123;</span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">"bro2 mounted....."</span>, <span class="keyword">this</span>.msg2, <span class="built_in">document</span>.getElementById(<span class="string">"title2"</span>))</span></span><br><span class="line">        &#125;,</span><br><span class="line">        beforeUpdate() &#123;</span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">"bro2 beforeUpdate...."</span>, <span class="keyword">this</span>.msg2, <span class="built_in">document</span>.getElementById(<span class="string">"title2"</span>))</span></span><br><span class="line">        &#125;,</span><br><span class="line">        updated() &#123;</span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">"bro2 updated...."</span>, <span class="keyword">this</span>.msg2, <span class="built_in">document</span>.getElementById(<span class="string">"title2"</span>))</span></span><br><span class="line">        &#125;,</span><br><span class="line">        beforeDestroy() &#123;</span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">"bro2 beforeDestroy...."</span>, <span class="keyword">this</span>.msg2, <span class="built_in">document</span>.getElementById(<span class="string">"title2"</span>))</span></span><br><span class="line">        &#125;,</span><br><span class="line">        destroyed() &#123;</span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">"bro2 destroyed...."</span>, <span class="keyword">this</span>.msg2, <span class="built_in">document</span>.getElementById(<span class="string">"title2"</span>))</span></span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            destroy2() &#123;</span><br><span class="line"><span class="actionscript">                <span class="keyword">this</span>.$destroy()</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="actionscript">    <span class="keyword">new</span> Vue(&#123;&#125;).$mount(<span class="string">"#app"</span>);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></div>




<p>第一次打开时，为初始化过程；按顺序，先初始化，再渲染；打印如下：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CONSOLE"><figure class="iseeu highlight /console"><table><tr><td class="code"><pre><span class="line">bro1 beforeCreate.... undefined null</span><br><span class="line">bro1 created... data null</span><br><span class="line">bro1 beforeMount.... data null</span><br><span class="line">bro2 beforeCreate.... undefined null</span><br><span class="line">bro2 created... bro2-data null</span><br><span class="line">bro2 beforeMount.... bro2-data null</span><br><span class="line">bro1 mounted..... data &lt;h1 id=​"title"&gt;​哥哥组件文本内容​&lt;/h1&gt;​</span><br><span class="line">bro2 mounted..... bro2-data &lt;h1 id=​"title2"&gt;​弟弟组件文本内容​&lt;/h1&gt;​</span><br></pre></td></tr></table></figure></div>
<p>数据改变时，分别调用本身的beforeUpdate和updated，与单组件一致；</p>
<p>数据改变时，分别调用本身的beforeDestroy和destroyed，与单组件一致；</p>
<h2 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、总结</h2><p><strong>注意点：</strong></p>
<ul>
<li>vue2.0之后主动调用$destroy()不会移除dom节点，作者不推荐直接destroy这种做法，如果实在需要这样用可以在这个生命周期钩子中手动移除dom节点</li>
<li>created阶段的ajax请求与mounted请求的区别：前者页面视图未出现，如果请求信息过多，页面会长时间处于白屏状态</li>
</ul>
<p><strong>单组件：</strong></p>
<ul>
<li>初始化组件时，仅执行了beforeCreate/Created/beforeMount/mounted四个钩子函数</li>
<li>当改变data中定义的变量（响应式变量）时，会执行beforeUpdate/updated钩子函数</li>
<li>当切换组件（当前组件未缓存）时，会执行beforeDestory/destroyed钩子函数</li>
<li>初始化和销毁时的生命钩子函数均只会执行一次，beforeUpdate/updated可多次执行</li>
</ul>
<p><strong>父子组件：</strong></p>
<ul>
<li>仅当子组件完成挂载后，父组件才会挂载</li>
<li>当子组件完成挂载后，父组件会主动执行一次beforeUpdate/updated钩子函数（仅首次）</li>
<li>父子组件在data变化中是分别监控的，但是在更新props中的数据是关联的（可实践）</li>
<li>销毁父组件时，先将子组件销毁后才会销毁父组件</li>
</ul>
<p><strong>兄弟组件：</strong></p>
<ul>
<li>组件的初始化（mounted之前）分开进行，挂载是从上到下依次进行</li>
<li>当没有数据关联时，兄弟组件之间的更新和销毁是互不关联的</li>
</ul>
<blockquote>
<p>参考文章:<br>[1]<a href="https://juejin.im/entry/5aee8fbb518825671952308c" target="_blank" rel="noopener">https://juejin.im/entry/5aee8fbb518825671952308c</a><br>[2]<a href="https://cn.vuejs.org/v2/guide/instance.html#%E5%AE%9E%E4%BE%8B%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E9%92%A9%E5%AD%90" target="_blank" rel="noopener">https://cn.vuejs.org/v2/guide/instance.html#%E5%AE%9E%E4%BE%8B%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E9%92%A9%E5%AD%90</a><br>[3]<a href="https://segmentfault.com/a/1190000011381906" target="_blank" rel="noopener">https://segmentfault.com/a/1190000011381906</a><br>[4]<a href="https://segmentfault.com/a/1190000008010666" target="_blank" rel="noopener">https://segmentfault.com/a/1190000008010666</a></p>
</blockquote>
]]></content>
      <categories>
        <category>vue</category>
      </categories>
  </entry>
  <entry>
    <title>如何用 node + express 完成接口</title>
    <url>/jackhuang-haohua.github.io/2019/09/06/2020-03-node%E6%8E%A5%E5%8F%A3/</url>
    <content><![CDATA[<p>(未写完)</p>
<h2 id="Express生成器"><a href="#Express生成器" class="headerlink" title="Express生成器"></a>Express生成器</h2><p>　应用程序生成器、脚手架 、命令行工具、自动搭建项目环境；<br>　其实使用这个可以直接前后端一起搞定，但是混合起来不容易维护，所以node+express一般只用来做后端；</p>
<p><strong>安装</strong><br><code>npm install express-generator -g</code></p>
<p><strong>查看相关信息</strong><br><code>express -h</code></p>
<p><strong>生成环境</strong></p>
<ul>
<li><code>express -e 目录 | .</code><ul>
<li>. 当前目录创建 </li>
<li>-e 需要ejs模板引擎</li>
<li>express -f  强制在非空目录下创建</li>
</ul>
</li>
<li>cd 目录</li>
<li><code>npm install</code>，安装依赖包</li>
<li><code>npm start</code>   </li>
<li><code>node ./bin/www</code></li>
</ul>
<h2 id="主要功能"><a href="#主要功能" class="headerlink" title="主要功能"></a>主要功能</h2><p>因为代码很多，这里记录一下主要的逻辑；</p>
<h3 id="app-js"><a href="#app-js" class="headerlink" title="app.js"></a>app.js</h3><p>在这里可以：静态托管，配置路由，使用中间件</p>
<h4 id="资源托管"><a href="#资源托管" class="headerlink" title="资源托管"></a>资源托管</h4><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 静态资源托管</span></span><br><span class="line">app.use(express.static(path.join(__dirname, <span class="string">'public'</span>, <span class="string">'template'</span>)));</span><br><span class="line">app.use(<span class="string">'/admin'</span>, express.static(path.join(__dirname, <span class="string">'public'</span>, <span class="string">'admin'</span>)));</span><br><span class="line">app.use(express.static(path.join(__dirname, <span class="string">'public'</span>))) <span class="comment">//使admin和template可以访问整个public</span></span><br></pre></td></tr></table></figure></div>

<h4 id="上传文件"><a href="#上传文件" class="headerlink" title="上传文件"></a>上传文件</h4><p>使用了<strong>multer</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// multer中间件</span></span><br><span class="line"><span class="keyword">var</span> multer = <span class="built_in">require</span>(<span class="string">'multer'</span>);</span><br><span class="line"><span class="comment">// 全部上传到upload</span></span><br><span class="line"><span class="comment">// let upload = multer(&#123;</span></span><br><span class="line"><span class="comment">//   dest: path.join(__dirname, "public", "upload")</span></span><br><span class="line"><span class="comment">// &#125;)</span></span><br><span class="line"><span class="comment">// 根据不同的名字上传</span></span><br><span class="line"><span class="keyword">var</span> storage = multer.diskStorage(&#123;</span><br><span class="line">  destination: <span class="function"><span class="keyword">function</span> (<span class="params">req, file, cb</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (req.url.indexOf(<span class="string">"user"</span>) !== <span class="number">-1</span> || req.url.indexOf(<span class="string">"reg"</span>) !== <span class="number">-1</span>) &#123;</span><br><span class="line">      cb(<span class="literal">null</span>, path.join(__dirname, <span class="string">"public"</span>, <span class="string">"upload"</span>, <span class="string">"user"</span>))</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (req.url.indexOf(<span class="string">"banner"</span>) !== <span class="number">-1</span>) &#123;</span><br><span class="line">      cb(<span class="literal">null</span>, path.join(__dirname, <span class="string">"public"</span>, <span class="string">"upload"</span>, <span class="string">"banner"</span>))</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      cb(<span class="literal">null</span>, path.join(__dirname, <span class="string">"public"</span>, <span class="string">"upload"</span>, <span class="string">"product"</span>))</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 文件名为原名</span></span><br><span class="line">  <span class="comment">// filename:function(req,file,cb)&#123;</span></span><br><span class="line">  <span class="comment">//   cb(null,Date.fieldname+'-'+file.originalname)</span></span><br><span class="line">  <span class="comment">// &#125;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">let</span> upload = multer(&#123;</span><br><span class="line">  storage: storage</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 可以传任何类型的文件</span></span><br><span class="line">app.use(upload.any())</span><br></pre></td></tr></table></figure></div>

<h4 id="配置路由"><a href="#配置路由" class="headerlink" title="配置路由"></a>配置路由</h4><p>这里的意思是，当访问<code>localhost:3000/api/login</code>，即可以进入到<code>./routes/api/login</code>这个文件，在里面完成一些逻辑，并返回数据给前端</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line">app.all(<span class="string">"/api/*"</span>, <span class="built_in">require</span>(<span class="string">"./routes/api/params"</span>))</span><br><span class="line">app.use(<span class="string">'/api/reg'</span>, <span class="built_in">require</span>(<span class="string">'./routes/api/reg'</span>));</span><br><span class="line">app.use(<span class="string">'/api/login'</span>, <span class="built_in">require</span>(<span class="string">'./routes/api/login'</span>));</span><br><span class="line">......</span><br></pre></td></tr></table></figure></div>

<h3 id="封装mongo方法"><a href="#封装mongo方法" class="headerlink" title="封装mongo方法"></a>封装mongo方法</h3><p>　然后是把要用到的一些，操作mongodb的方法封装起来，根据需要；<br>　比如下面是一个”查询”的方法：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> mongodb = <span class="built_in">require</span>(<span class="string">"mongodb"</span>)</span><br><span class="line"><span class="keyword">let</span> mongodCt = mongodb.MongoClient</span><br><span class="line"><span class="keyword">let</span> ObjectId = mongodb.ObjectId <span class="comment">//把字符串转成ObjectId的对象类型</span></span><br><span class="line"><span class="comment">//链接库</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    dbName:数据库名称 默认值就是student</span></span><br><span class="line"><span class="comment">    collectionName:集合名字</span></span><br><span class="line"><span class="comment">    url:链接的url地址</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">let</span> open = (&#123;</span><br><span class="line">    dbName = <span class="string">'newsapp'</span>,</span><br><span class="line">    collectionName,</span><br><span class="line">    url = <span class="string">"mongodb://127.0.0.1:27017"</span></span><br><span class="line">&#125;) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        mongodCt.connect(url, &#123;</span><br><span class="line">            useUnifiedTopology: <span class="literal">true</span></span><br><span class="line">        &#125;, (err, client) =&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (err) &#123;</span><br><span class="line">                reject(err)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">let</span> db = client.db(dbName)</span><br><span class="line">                <span class="keyword">let</span> collection = db.collection(collectionName)</span><br><span class="line">                resolve(&#123;</span><br><span class="line">                    collection,</span><br><span class="line">                    client,</span><br><span class="line">                    ObjectId</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查询库集合列表数据</span></span><br><span class="line"><span class="keyword">let</span> findList = (&#123;</span><br><span class="line">    collectionName, <span class="comment">//集合名字</span></span><br><span class="line">    dbName = <span class="string">'newsapp'</span>, <span class="comment">//默认指明的数据库的名字</span></span><br><span class="line">    _page,</span><br><span class="line">    _limit,</span><br><span class="line">    _sort,</span><br><span class="line">    q</span><br><span class="line">&#125;) =&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//生成检索条件</span></span><br><span class="line">    <span class="keyword">let</span> rule = q ? &#123;</span><br><span class="line">        title: <span class="keyword">new</span> <span class="built_in">RegExp</span>(q, <span class="string">'g'</span>)</span><br><span class="line">    &#125; : &#123;&#125; <span class="comment">//张三  张三丰   </span></span><br><span class="line">    <span class="comment">// let rule = q ? &#123;username:eval('/'+q+"/")&#125; : &#123;&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">//链接数据库</span></span><br><span class="line">        open(&#123;</span><br><span class="line">                dbName,</span><br><span class="line">                collectionName</span><br><span class="line">            &#125;)</span><br><span class="line">            .then((&#123;</span><br><span class="line">                collection,</span><br><span class="line">                client</span><br><span class="line">            &#125;) =&gt; &#123;</span><br><span class="line">                <span class="comment">//查询列表</span></span><br><span class="line">                collection.find(rule, &#123;</span><br><span class="line">                    skip: _page * _limit, <span class="comment">//跳过多少条数据</span></span><br><span class="line">                    limit: _limit, <span class="comment">//限定每一页的数量</span></span><br><span class="line">                    sort: &#123;</span><br><span class="line">                        [_sort]: <span class="number">1</span></span><br><span class="line">                    &#125; <span class="comment">//排序字段_sort  当一个变量作为key使用的时候，需要采用[]的语法</span></span><br><span class="line">                &#125;).toArray(<span class="function">(<span class="params">err, result</span>) =&gt;</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (!err &amp;&amp; result.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                        resolve(&#123;</span><br><span class="line">                            err: <span class="number">0</span>,</span><br><span class="line">                            data: result</span><br><span class="line">                        &#125;)</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        resolve(&#123;</span><br><span class="line">                            err: <span class="number">1</span>,</span><br><span class="line">                            msg: <span class="string">"查无数据..."</span></span><br><span class="line">                        &#125;)</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">//关闭资源</span></span><br><span class="line">                    client.close()</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;)</span><br><span class="line">            .catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123; <span class="comment">//链接数据库失败</span></span><br><span class="line">                reject(&#123;</span><br><span class="line">                    err: <span class="number">1</span>,</span><br><span class="line">                    msg: <span class="string">"数据库链接失败...."</span></span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">exports.open = open; <span class="comment">//&#123;open:函数&#125;</span></span><br><span class="line">exports.findList = findList;</span><br></pre></td></tr></table></figure></div>

<h3 id="鉴权"><a href="#鉴权" class="headerlink" title="鉴权"></a>鉴权</h3><p>比如验证token，验证不同身份的权限，可以专门造一个接口来判断</p>
<p><strong>首先在app.js：</strong><code>app.all(&quot;/api/*&quot;, require(&quot;./routes/api/params&quot;))</code><br>这样一来所有请求的接口都会先进到/params</p>
<p><strong>然后/routes/api/params中，验证token：</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// params.js</span></span><br><span class="line"><span class="keyword">let</span> jwt = <span class="built_in">require</span>(<span class="string">"../../utils/jwt"</span>)</span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//处理公共参数(放在地址栏里面进行传递)</span></span><br><span class="line">    req.query._page = req.query._page ? req.query._page - <span class="number">1</span> : <span class="built_in">require</span>(<span class="string">"../../config/global"</span>)._page</span><br><span class="line">    req.query._limit = req.query._limit ? req.query._limit - <span class="number">0</span> : <span class="built_in">require</span>(<span class="string">"../../config/global"</span>)._limit</span><br><span class="line">    req.query.q = req.query.q ? req.query.q : <span class="built_in">require</span>(<span class="string">"../../config/global"</span>).q</span><br><span class="line">    req.query._sort = req.query._sort ? req.query._sort : <span class="built_in">require</span>(<span class="string">"../../config/global"</span>)._sort</span><br><span class="line"></span><br><span class="line">    <span class="comment">//处理公共的授权业务</span></span><br><span class="line">    <span class="comment">//如果前端接口包含 login/reg/logout/vcode，那么就可以不需要携带token   /api/login  </span></span><br><span class="line">    <span class="keyword">if</span> (<span class="regexp">/login|logout|reg|vcode/</span>.test(req.url)) &#123;</span><br><span class="line">        <span class="comment">//next必须要放行</span></span><br><span class="line">        next()</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; <span class="comment">//除此之外的接口必须要携带token才能进行数据获取   /api/goods/home</span></span><br><span class="line">        <span class="comment">//获取前端传递来的token</span></span><br><span class="line">        <span class="keyword">let</span> token = req.headers.token || req.body.token || req.query.token </span><br><span class="line">        <span class="comment">//校验前端传递来的token</span></span><br><span class="line">        jwt.verify(token).then(<span class="function"><span class="params">decode</span> =&gt;</span> &#123;</span><br><span class="line">            req.query.decode = decode <span class="comment">//如果后续的接口需要数据的话，方便获取到  &#123;username,_id&#125; </span></span><br><span class="line">            next()</span><br><span class="line">        &#125;).catch(<span class="function"><span class="params">message</span> =&gt;</span> res.send(&#123;</span><br><span class="line">            err: <span class="number">1</span>,</span><br><span class="line">            msg: <span class="string">"token验证失效或者未登录..."</span> + message</span><br><span class="line">        &#125;))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="接口的逻辑"><a href="#接口的逻辑" class="headerlink" title="接口的逻辑"></a>接口的逻辑</h3><p>一般的逻辑都是：</p>
<ol>
<li>-&gt; 进到路由 </li>
<li>-&gt; 接收参数 </li>
<li>-&gt; 连接到数据库，增删改查 </li>
<li>-&gt; 处理数据库返回的结果 </li>
<li>-&gt; 把结果<code>res.send()</code>返回给前端；</li>
</ol>
<p><strong>以登录为例：</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">var</span> router = express.Router();</span><br><span class="line"><span class="keyword">var</span> mongodb = <span class="built_in">require</span>(<span class="string">"../../utils/mongodb"</span>)</span><br><span class="line"><span class="keyword">var</span> bcrypt = <span class="built_in">require</span>(<span class="string">"../../utils/bcrypt"</span>)</span><br><span class="line"><span class="keyword">var</span> jwt = <span class="built_in">require</span>(<span class="string">"../../utils/jwt"</span>)</span><br><span class="line"><span class="comment">/* GET home page. */</span></span><br><span class="line">router.post(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//1.获取前端传递来的用户名与密码</span></span><br><span class="line">    <span class="keyword">let</span> &#123;</span><br><span class="line">        username,</span><br><span class="line">        password,</span><br><span class="line">        vcode</span><br><span class="line">    &#125; = req.body</span><br><span class="line">    <span class="comment">//2.验证必传参数</span></span><br><span class="line">    <span class="keyword">if</span> (!username || !password) &#123;</span><br><span class="line">        res.send(&#123;</span><br><span class="line">            err: <span class="number">1</span>,</span><br><span class="line">            msg: <span class="string">"用户名与密码为必传参数..."</span></span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="comment">// return表示接下来都不执行了</span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 把前端传来的验证码，和后端session里的对比</span></span><br><span class="line">    <span class="keyword">if</span>(vcode.toLowerCase()!==req.session.vcode)&#123;</span><br><span class="line">        res.send(&#123;<span class="attr">status</span>:<span class="number">400</span>,<span class="attr">msg</span>:<span class="string">'验证码错误'</span>&#125;)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//3.需要查询数据库</span></span><br><span class="line">    mongodb.open(&#123;</span><br><span class="line">        collectionName: <span class="string">"user"</span></span><br><span class="line">    &#125;).then((&#123;</span><br><span class="line">        collection,</span><br><span class="line">        client</span><br><span class="line">    &#125;) =&gt; &#123;</span><br><span class="line">        <span class="comment">//进行查询操作，根据username</span></span><br><span class="line">        collection.find(&#123;</span><br><span class="line">            username</span><br><span class="line">        &#125;).toArray(<span class="function">(<span class="params">err, result</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (err) &#123;</span><br><span class="line">                res.send(&#123;</span><br><span class="line">                    err: <span class="number">1</span>,</span><br><span class="line">                    msg: <span class="string">"集合操作失败..."</span></span><br><span class="line">                &#125;)</span><br><span class="line">                client.close()</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (result.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="comment">//3-1 代表用户在数据库是存在的 ==&gt; 登录的密码与数据库里面的密码进行校验 ==&gt; 登录成功（token)</span></span><br><span class="line">                    <span class="keyword">let</span> flag = bcrypt.compareSync(password, result[<span class="number">0</span>].password)</span><br><span class="line">                    <span class="keyword">if</span> (flag) &#123; <span class="comment">//说明密码输入正确</span></span><br><span class="line">                        <span class="comment">//生成token令牌</span></span><br><span class="line">                        <span class="keyword">let</span> token = jwt.sign(&#123;</span><br><span class="line">                            username,</span><br><span class="line">                            _id: result[<span class="number">0</span>]._id</span><br><span class="line">                        &#125;)</span><br><span class="line">                        <span class="keyword">delete</span> result[<span class="number">0</span>].username</span><br><span class="line">                        <span class="keyword">delete</span> result[<span class="number">0</span>].password</span><br><span class="line">                        res.send(&#123;</span><br><span class="line">                            err: <span class="number">0</span>,</span><br><span class="line">                            msg: <span class="string">"恭喜您，登录成功！"</span>,</span><br><span class="line">                            token,</span><br><span class="line">                            data: result[<span class="number">0</span>]</span><br><span class="line">                        &#125;)</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        res.send(&#123;</span><br><span class="line">                            err: <span class="number">1</span>,</span><br><span class="line">                            msg: <span class="string">"用户名或者密码输入有误..."</span></span><br><span class="line">                        &#125;)</span><br><span class="line">                    &#125;</span><br><span class="line">                    client.close()</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123; <span class="comment">//3-2 用户在数据库里面不存在</span></span><br><span class="line">                    res.send(&#123;</span><br><span class="line">                        err: <span class="number">1</span>,</span><br><span class="line">                        msg: <span class="string">"此用户不存在，请注册！"</span></span><br><span class="line">                    &#125;)</span><br><span class="line">                    client.close()</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;).catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">        res.send(&#123;</span><br><span class="line">            err: <span class="number">1</span>,</span><br><span class="line">            msg: <span class="string">"数据库连接失败..."</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = router;</span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>node</category>
      </categories>
  </entry>
  <entry>
    <title>react小案例1</title>
    <url>/jackhuang-haohua.github.io/2019/07/20/2020-04-react%E5%B0%8F%E6%A1%88%E4%BE%8B1/</url>
    <content><![CDATA[<h2 id="每学一个新技术必做的todolist"><a href="#每学一个新技术必做的todolist" class="headerlink" title="每学一个新技术必做的todolist"></a>每学一个新技术必做的todolist</h2><p><img src="https://s1.ax1x.com/2020/04/29/JIj0de.png" alt="JIj0de.png"><br>有以下知识点：</p>
<ul>
<li>react受控组件、事件传参、html内容、改变this为react实例</li>
<li>不同的请求方式：get/post/delete/put/patch</li>
<li>文本内某个字变色</li>
</ul>
<h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><p>下面是todolist完整代码</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">"axios"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">index</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>()&#123;</span><br><span class="line">        <span class="keyword">super</span>()</span><br><span class="line">        <span class="keyword">this</span>.state = &#123;</span><br><span class="line">            list:[], <span class="comment">//初始数据</span></span><br><span class="line">            name:<span class="string">""</span>, <span class="comment">//添加框的name</span></span><br><span class="line">            age:<span class="string">""</span>,  <span class="comment">//添加框的age</span></span><br><span class="line"></span><br><span class="line">            checklist:[], <span class="comment">//查询出来的数据</span></span><br><span class="line">            checkname:<span class="string">""</span>, <span class="comment">//查询框的name</span></span><br><span class="line">            checkage:<span class="string">""</span>, <span class="comment">//查询框的age</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//改变事件函数内部的this (undefined) ==&gt; 当前react组件实例</span></span><br><span class="line">        <span class="keyword">this</span>.handle = <span class="keyword">this</span>.handle.bind(<span class="keyword">this</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    componentDidMount()&#123; <span class="comment">//钩子函数内部的this是指向组件</span></span><br><span class="line">        <span class="keyword">this</span>.getData()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取初始数据</span></span><br><span class="line">    getData()&#123;</span><br><span class="line">        axios.get(<span class="string">"http://localhost:5000/list"</span>).then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(res.status === <span class="number">200</span>)&#123;</span><br><span class="line">                <span class="keyword">this</span>.setState(&#123;<span class="attr">list</span>:res.data&#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 按下回车时添加数据</span></span><br><span class="line">    handle(e)&#123;</span><br><span class="line">        <span class="keyword">if</span>(e.keyCode === <span class="number">13</span>)&#123;</span><br><span class="line">            <span class="keyword">this</span>.add()</span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加数据</span></span><br><span class="line">    add = <span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> &#123;name,age&#125; = <span class="keyword">this</span>.state;</span><br><span class="line">        axios.post(<span class="string">"http://localhost:5000/list"</span>,&#123;</span><br><span class="line">            name,</span><br><span class="line">            age</span><br><span class="line">        &#125;,&#123;</span><br><span class="line">            headers:&#123;</span><br><span class="line">                <span class="string">"content-type"</span>:<span class="string">"application/json"</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">            <span class="comment">//清空状态目的就是让输入框内部的值为空</span></span><br><span class="line">            <span class="keyword">this</span>.setState(&#123;<span class="attr">name</span>:<span class="string">""</span>,<span class="attr">age</span>:<span class="string">""</span>&#125;)</span><br><span class="line">            <span class="comment">// 请求请求mock数据</span></span><br><span class="line">            <span class="keyword">this</span>.getData()</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除数据</span></span><br><span class="line">    del=<span class="function">(<span class="params">id,e</span>)=&gt;</span>&#123;</span><br><span class="line">        axios.delete(<span class="string">"http://localhost:5000/list/"</span>+id,&#123;   </span><br><span class="line">        &#125;).then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.getData()</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 修改数据</span></span><br><span class="line">    rewrite=<span class="function">(<span class="params">id,e</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> &#123;name,age&#125; = <span class="keyword">this</span>.state;</span><br><span class="line">        axios.put(<span class="string">"http://localhost:5000/list/"</span>+id,&#123;</span><br><span class="line">            name,</span><br><span class="line">            age</span><br><span class="line">        &#125;).then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.setState(&#123;<span class="attr">name</span>:<span class="string">""</span>,<span class="attr">age</span>:<span class="string">""</span>&#125;)</span><br><span class="line">            <span class="keyword">this</span>.getData()</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使input框变为受控组件</span></span><br><span class="line">    input = <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">            [e.target.id]:e.target.value</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查询数组</span></span><br><span class="line">    checkhandle=<span class="function"><span class="params">e</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> &#123;checkname,checkage&#125; = <span class="keyword">this</span>.state;</span><br><span class="line">        axios.get(<span class="string">"http://localhost:5000/list?"</span>+<span class="string">"name_like="</span>+checkname+<span class="string">"&amp;age_like="</span>+checkage).then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(res.status === <span class="number">200</span>)&#123;</span><br><span class="line">                <span class="comment">// 指定文本变色</span></span><br><span class="line">                <span class="keyword">var</span> reg1 = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"("</span> + checkname + <span class="string">")"</span>, <span class="string">"g"</span>);</span><br><span class="line">                <span class="keyword">var</span> reg2 = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"("</span> + checkage + <span class="string">")"</span>, <span class="string">"g"</span>);</span><br><span class="line">                res.data.forEach(<span class="function"><span class="params">item</span>=&gt;</span>&#123;</span><br><span class="line">                    item.name = item.name.replace(reg1, <span class="string">"&lt;font color=red&gt;$1&lt;/font&gt;"</span>)</span><br><span class="line">                    item.age = item.age.replace(reg2, <span class="string">"&lt;font color=red&gt;$1&lt;/font&gt;"</span>)</span><br><span class="line">                &#125;)        </span><br><span class="line">                <span class="keyword">this</span>.setState(&#123;<span class="attr">checklist</span>:res.data&#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">let</span> &#123;list,name,age,checkname,checkage,checklist&#125; = <span class="keyword">this</span>.state;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;input  placeholder=<span class="string">"名字"</span> id=<span class="string">"name"</span> value=&#123;name&#125; onChange=&#123;<span class="keyword">this</span>.input&#125; onKeyUp=&#123;<span class="keyword">this</span>.handle&#125; type=<span class="string">"text"</span>/&gt;</span><br><span class="line">                &lt;input  placeholder=<span class="string">"年龄"</span> id=<span class="string">"age"</span> value=&#123;age&#125; onChange=&#123;<span class="keyword">this</span>.input&#125; type=<span class="string">"text"</span> /&gt;</span><br><span class="line">                &lt;button onClick=&#123;<span class="keyword">this</span>.add&#125;&gt;添加数据&lt;<span class="regexp">/button&gt;    </span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">                &lt;div&gt;</span></span><br><span class="line"><span class="regexp">                    &lt;input placeholder="名字" id="checkname" value=&#123;checkname&#125; onChange=&#123;this.input&#125; type="text"/</span>&gt;</span><br><span class="line">                    &lt;input placeholder=<span class="string">"年龄"</span> id=<span class="string">"checkage"</span> value=&#123;checkage&#125; onChange=&#123;<span class="keyword">this</span>.input&#125; type=<span class="string">"text"</span>/&gt;</span><br><span class="line">                    &lt;button onClick=&#123;<span class="keyword">this</span>.checkhandle&#125;&gt;点击查询&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">                    &lt;p&gt;在第一行输入信息，点击修改，即可修改对应行&lt;/</span>p&gt;</span><br><span class="line">                    &lt;ul&gt;</span><br><span class="line">                    &#123;</span><br><span class="line">                        checklist.map(<span class="function">(<span class="params">item</span>)=&gt;</span>&#123;</span><br><span class="line">                            <span class="keyword">return</span> (</span><br><span class="line">                                &lt;li key=&#123;item.id&#125; &gt;</span><br><span class="line">                                    &lt;span  dangerouslySetInnerHTML=&#123;&#123; <span class="attr">__html</span>: item.name &#125;&#125;&gt;<span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span> </span><br><span class="line">                                    : </span><br><span class="line">                                    &lt;span  dangerouslySetInnerHTML=&#123;&#123; <span class="attr">__html</span>: item.age &#125;&#125;&gt;<span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">                                &lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">                            )</span></span><br><span class="line"><span class="regexp">                        &#125;)</span></span><br><span class="line"><span class="regexp">                    &#125;</span></span><br><span class="line"><span class="regexp">                    &lt;/u</span>l&gt;</span><br><span class="line">                &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">                </span></span><br><span class="line"><span class="regexp">                &lt;ul&gt;</span></span><br><span class="line"><span class="regexp">                    &#123;</span></span><br><span class="line"><span class="regexp">                        list.map((item)=&gt;&#123;</span></span><br><span class="line"><span class="regexp">                            return (</span></span><br><span class="line"><span class="regexp">                                &lt;li key=&#123;item.id&#125;&gt;</span></span><br><span class="line"><span class="regexp">                                    &#123;item.name&#125; : &#123;item.age&#125; 岁</span></span><br><span class="line"><span class="regexp">                                    &lt;button onClick=&#123;this.del.bind(this,item.id)&#125;&gt;删除&lt;/</span>button&gt;</span><br><span class="line">                                    &lt;button onClick=&#123;<span class="keyword">this</span>.rewrite.bind(<span class="keyword">this</span>,item.id)&#125;&gt;修改&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">                                    &lt;button onClick=&#123;(e) =&gt; this.del(item.id, e)&#125;&gt;删除&lt;/</span>button&gt;</span><br><span class="line">                                    &lt;button onClick=&#123;<span class="keyword">this</span>.del.bind(<span class="keyword">this</span>, item.id)&#125;&gt;删除&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">                                &lt;/</span>li&gt;</span><br><span class="line">                            )</span><br><span class="line">                        &#125;)</span><br><span class="line">                    &#125;</span><br><span class="line">                &lt;<span class="regexp">/ul&gt;     </span></span><br><span class="line"><span class="regexp">            &lt;/</span>div&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="一些知识点"><a href="#一些知识点" class="headerlink" title="一些知识点"></a>一些知识点</h3><h4 id="1、受控组件"><a href="#1、受控组件" class="headerlink" title="1、受控组件"></a>1、受控组件</h4><p>　受控与非受控组件：表单元素的值来自于state，并且是唯一来源，那么这个组件就是<strong>受控组件</strong>，否则就是<strong>非受控组件</strong>。<br>　如下代码所示，input的value绑定了state里面的属性；<br>　往input框输入值时，触发onChange，将输入的值设为state对应的值；<br>　就像vue的双向数据绑定，state数据改变，视图的值改变；视图的值改变，state的数据也会改变；<br>　实现”双向绑定”在react中有两个条件，”value”和”onChange”</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">"axios"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">index</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>()&#123;</span><br><span class="line">        <span class="keyword">super</span>()</span><br><span class="line">        <span class="keyword">this</span>.state = &#123;</span><br><span class="line">            list:[], <span class="comment">//初始数据</span></span><br><span class="line">            name:<span class="string">""</span>, <span class="comment">//添加框的name</span></span><br><span class="line">            age:<span class="string">""</span>,  <span class="comment">//添加框的age</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使input框变为受控组件</span></span><br><span class="line">    input = <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">            [e.target.id]:e.target.value</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">let</span> &#123;list,name,age,checkname,checkage,checklist&#125; = <span class="keyword">this</span>.state;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;input  placeholder=<span class="string">"名字"</span> id=<span class="string">"name"</span> value=&#123;name&#125; onChange=&#123;<span class="keyword">this</span>.input&#125; onKeyUp=&#123;<span class="keyword">this</span>.handle&#125; type=<span class="string">"text"</span>/&gt;</span><br><span class="line">                &lt;input  placeholder=<span class="string">"年龄"</span> id=<span class="string">"age"</span> value=&#123;age&#125; onChange=&#123;<span class="keyword">this</span>.input&#125; type=<span class="string">"text"</span> /&gt;</span><br><span class="line">                &lt;button onClick=&#123;<span class="keyword">this</span>.add&#125;&gt;添加数据&lt;<span class="regexp">/button&gt;       </span></span><br><span class="line"><span class="regexp">            &lt;/</span>div&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h4 id="2、事件的this与传参"><a href="#2、事件的this与传参" class="headerlink" title="2、事件的this与传参"></a>2、事件的this与传参</h4><p><strong>改变this</strong><br>我们在react中定义事件如果用<code>del(){}</code>的写法，del内部的this为undefined，无法得到state或者调用其他事件，有两种办法改变this：</p>
<ul>
<li>constructor中绑定this，<code>this.del = this.del.bind(this)</code></li>
<li>使用箭头函数，<code>del=e=&gt;{}</code></li>
</ul>
<p><strong>传参</strong><br>调用事件事件时，想传参数，也有两种办法：</p>
<ul>
<li>调用时bind绑定参数<code>onClick={this.del.bind(this, item.id)}</code></li>
<li>调用时<code>onClick={(e) =&gt; this.del(item.id, e)}</code></li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">index</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>()&#123;</span><br><span class="line">        <span class="keyword">super</span>()</span><br><span class="line">        <span class="keyword">this</span>.state = &#123;</span><br><span class="line">            list:[], <span class="comment">//初始数据</span></span><br><span class="line">            name:<span class="string">""</span>, <span class="comment">//添加框的name</span></span><br><span class="line">            age:<span class="string">""</span>,  <span class="comment">//添加框的age</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//改变事件函数内部的this (undefined) ==&gt; 当前react组件实例</span></span><br><span class="line">        <span class="keyword">this</span>.del = <span class="keyword">this</span>.del.bind(<span class="keyword">this</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    del=<span class="function">(<span class="params">id,e</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>); ==&gt; <span class="keyword">this</span> 为本实例</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.state.list); ==&gt; 即上面的list</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    del()&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>); ==&gt; <span class="keyword">this</span> 为 <span class="literal">undefined</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">let</span> &#123;list&#125; = <span class="keyword">this</span>.state;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;ul&gt;</span><br><span class="line">                &#123;</span><br><span class="line">                    list.map(<span class="function">(<span class="params">item</span>)=&gt;</span>&#123;</span><br><span class="line">                        <span class="keyword">return</span> (</span><br><span class="line">                            &lt;li key=&#123;item.id&#125;&gt;</span><br><span class="line">                                &lt;button onClick=&#123;(e) =&gt; <span class="keyword">this</span>.del(item.id, e)&#125;&gt;删除&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">                                &lt;button onClick=&#123;this.del.bind(this, item.id)&#125;&gt;删除&lt;/</span>button&gt;</span><br><span class="line">                            &lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">                        )</span></span><br><span class="line"><span class="regexp">                    &#125;)</span></span><br><span class="line"><span class="regexp">                &#125;</span></span><br><span class="line"><span class="regexp">            &lt;/u</span>l&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h4 id="3、指定文字变色"><a href="#3、指定文字变色" class="headerlink" title="3、指定文字变色"></a>3、指定文字变色</h4><p>下面代码，最后的会渲染出liat里3个数据，并且”红”字是红色的;<br><code>dangerouslySetInnerHTML</code>是设置html内容的方式，但是其他情况<strong>不建议使用</strong>，毕竟前缀都写着dangerou</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line">list=[<span class="string">"鲜艳红"</span>,<span class="string">"天空蓝"</span>,<span class="string">"苹果红"</span>]</span><br><span class="line"><span class="keyword">var</span> reg1 = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"("</span> + <span class="string">"红"</span> + <span class="string">")"</span>, <span class="string">"g"</span>);</span><br><span class="line">list.forEach(<span class="function"><span class="params">item</span>=&gt;</span>&#123;</span><br><span class="line">    item = item.replace(reg1, <span class="string">"&lt;font color=red&gt;$1&lt;/font&gt;"</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 渲染</span></span><br><span class="line">list.map(<span class="function">(<span class="params">item</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;li&gt;</span><br><span class="line">            &lt;span  dangerouslySetInnerHTML=&#123;&#123; <span class="attr">__html</span>: item &#125;&#125;&gt;<span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span> </span><br><span class="line">        &lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">&#125;)</span></span><br></pre></td></tr></table></figure></div>

<h4 id="4、请求类型"><a href="#4、请求类型" class="headerlink" title="4、请求类型"></a>4、请求类型</h4><p>这个接口是用json-server模拟的，<a href="https://www.cnblogs.com/fly_dragon/p/9150732.html" target="_blank">具体介绍看这里</a><br>简单使用：</p>
<ul>
<li>npm i json-server -S</li>
<li>如果显示”json-server 不是外部命令或请求”，则需要配置npm的path</li>
<li>创建 mock/data.json，<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JSON"><figure class="iseeu highlight /json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"list"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"name"</span>: <span class="string">"广东彭于晏"</span>,</span><br><span class="line">      <span class="attr">"age"</span>: <span class="string">"20"</span>,</span><br><span class="line">      <span class="attr">"id"</span>: <span class="number">3</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"name"</span>: <span class="string">"东北彭于晏"</span>,</span><br><span class="line">      <span class="attr">"age"</span>: <span class="string">"30"</span>,</span><br><span class="line">      <span class="attr">"id"</span>: <span class="number">4</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li>
<li>在mock目录下 <code>json-server data.json --port 5000 -w</code></li>
<li><code>http://localhost:5000/list</code>既能访问到这些数据</li>
</ul>
<p>　上面的完整代码中，用到了四种请求类型 get/post/delete/put，可以窥见不同的请求类型也应该要语义化；<br>　请求类型共有以下8种：</p>
<ul>
<li><strong>GET：</strong>向特定的资源发出请求。 </li>
<li><strong>POST：</strong>向指定资源提交数据进行处理请求（例如提交表单或者上传文件）。数据被包含在请求体中。POST请求可能会导致新的资源的创建和/或已有资源的修改。 </li>
<li><strong>PUT：</strong>向指定资源位置上传其最新内容。 </li>
<li><strong>DELETE：</strong>请求服务器删除Request-URI所标识的资源。 </li>
<li><strong>TRACE：</strong>回显服务器收到的请求，主要用于测试或诊断。 </li>
<li><strong>OPTIONS：</strong>返回服务器针对特定资源所支持的HTTP请求方法。也可以利用向Web服务器发送’*’的请求来测试服务器的功能性。 </li>
<li><strong>HEAD：</strong>向服务器索要与GET请求相一致的响应，只不过响应体将不会被返回。这一方法可以在不必传输整个响应内容的情况下，就可以获取包含在响应消息头中的元信息。 </li>
</ul>
]]></content>
      <categories>
        <category>react</category>
      </categories>
  </entry>
  <entry>
    <title>VUE基础梳理</title>
    <url>/jackhuang-haohua.github.io/2019/05/01/2020-04-vue%E5%9F%BA%E7%A1%80%E6%A2%B3%E7%90%86/</url>
    <content><![CDATA[<h1 id="一、vue解决了什么"><a href="#一、vue解决了什么" class="headerlink" title="一、vue解决了什么"></a>一、vue解决了什么</h1><p>　　<a href="https://medium.com/@awayyao/vue-js%E8%A7%A3%E5%86%B3%E4%BA%86%E4%BB%80%E4%B9%88%E9%97%AE%E9%A2%98-ad7fd7fde9f4" target="_blank">这篇博客讲的挺有意思的</a><br>　　它支持和控件的状态和数据绑定在一起。以后这些更新控件只需要更新数据源就可以了，这节省了不少手写更新控件代码的时间。而且vue.js不止步于控件状态的更新，对html的所有内容，不管是html代码内容，dom的属性，甚至html的结构都能做更新。这让网页这种页面的概念变的模糊了，网页进入了应用时代。这种把数据和控件绑定的做法就是一种设计模式，成为MVVM。Model是数据，View是控件（也可以是网页），ViewModel就是Vue做的事情，把数据和控件绑定在一起</p>
<h1 id="二、MV"><a href="#二、MV" class="headerlink" title="二、MV*"></a>二、MV*</h1><p>整理到了另一篇文章</p>
<h1 id="三、双向数据绑定"><a href="#三、双向数据绑定" class="headerlink" title="三、双向数据绑定"></a>三、双向数据绑定</h1><p>整理到了另一篇文章</p>
<h1 id="四、如何实现一个自定义组件？"><a href="#四、如何实现一个自定义组件？" class="headerlink" title="四、如何实现一个自定义组件？"></a>四、如何实现一个自定义组件？</h1><h2 id="1、当没有使用脚手架，直接在文件里引入vue-js，"><a href="#1、当没有使用脚手架，直接在文件里引入vue-js，" class="headerlink" title="1、当没有使用脚手架，直接在文件里引入vue.js，"></a>1、当没有使用脚手架，直接在文件里引入vue.js，</h2><p><strong>script</strong>里创建组件，后续直接body中<code>&lt;hello&gt;</code>调用：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./base/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">//1.全局创建/注册组件</span></span></span><br><span class="line"><span class="actionscript">    <span class="keyword">const</span> Hello = Vue.extend(&#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">        template: `<span class="tag">&lt;<span class="name">h1</span>&gt;</span>hello world<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>`</span></span></span><br><span class="line">    &#125;)</span><br><span class="line"><span class="actionscript">    Vue.component(<span class="string">"hello"</span>, Hello)</span></span><br><span class="line"><span class="actionscript">    <span class="comment">//合并</span></span></span><br><span class="line"><span class="actionscript">    Vue.component(<span class="string">"hello"</span>, &#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">        template: '<span class="tag">&lt;<span class="name">div</span>&gt;</span>hello world<span class="tag">&lt;/<span class="name">div</span>&gt;</span>'</span></span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">//2.局部创建/注册组件</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">const</span> Hello = Vue.extend(&#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">        template: `<span class="tag">&lt;<span class="name">h1</span>&gt;</span>hello world<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>`</span></span></span><br><span class="line">        &#125;)</span><br><span class="line"><span class="actionscript">        <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">"#app"</span>,</span></span><br><span class="line">        components: &#123;</span><br><span class="line">            hello: Hello</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line"><span class="actionscript">        <span class="comment">//合并</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el:<span class="string">"#app"</span>,</span></span><br><span class="line">        components:&#123;</span><br><span class="line">            hello:&#123;</span><br><span class="line"><span class="handlebars"><span class="xml">                template:"<span class="tag">&lt;<span class="name">div</span>&gt;</span>hello world<span class="tag">&lt;/<span class="name">div</span>&gt;</span>"</span></span></span><br><span class="line">            &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p><strong>body</strong>中创建组件：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">my-header</span>&gt;</span><span class="tag">&lt;/<span class="name">my-header</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"my-header"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是自定义标签<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">//只能用id作为标记，template标签，外层必须有根元素</span></span></span><br><span class="line"><span class="actionscript">    Vue.component(<span class="string">"my-header"</span>, &#123;</span></span><br><span class="line"><span class="actionscript">        template: <span class="string">"#my-header"</span></span></span><br><span class="line">    &#125;)</span><br><span class="line"><span class="actionscript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">"#app"</span></span></span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>组件<strong>嵌套</strong>：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">        el: <span class="string">"#app"</span>,</span><br><span class="line">        components: &#123;</span><br><span class="line">            father: &#123;</span><br><span class="line">                template: <span class="string">"&lt;div&gt;这是father组件哦...&lt;son&gt;&lt;/son&gt;&lt;/div&gt;"</span>,</span><br><span class="line">                components: &#123;</span><br><span class="line">                    son: &#123;</span><br><span class="line">                        template: <span class="string">"&lt;div&gt;这是son组件哦...&lt;/div&gt;"</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></div>

<p><strong>is</strong>调用组件：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">tr</span> <span class="attr">is</span>=<span class="string">"hello"</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// table里只能放tr,td,th..，直接放入组件不会解析，可以使用is将标签变为组件</span></span></span><br><span class="line"><span class="actionscript">    Vue.component(<span class="string">"hello"</span>, &#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">        template: `<span class="tag">&lt;<span class="name">div</span>&gt;</span>我是hello组件...<span class="tag">&lt;/<span class="name">div</span>&gt;</span>`</span></span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">"#app"</span></span></span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
<p><strong>is</strong>也能用来切换组件：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"comp=comp==='my-a'?'my-b':'my-a'"</span>&gt;</span>切换组件<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">"comp"</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    Vue.component(<span class="string">"my-a"</span>, &#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">        template: "<span class="tag">&lt;<span class="name">div</span>&gt;</span>这是my-a哦...<span class="tag">&lt;/<span class="name">div</span>&gt;</span>"</span></span></span><br><span class="line">    &#125;)</span><br><span class="line"><span class="actionscript">    Vue.component(<span class="string">"my-b"</span>, &#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">        template: "<span class="tag">&lt;<span class="name">div</span>&gt;</span>这是my-b哦...<span class="tag">&lt;/<span class="name">div</span>&gt;</span>"</span></span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">"#app"</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="actionscript">            comp: <span class="string">"my-a"</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h2 id="2、脚手架中，自定义组件"><a href="#2、脚手架中，自定义组件" class="headerlink" title="2、脚手架中，自定义组件"></a>2、脚手架中，自定义组件</h2><p>①新建xxx.vue文件</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;&quot;&gt;</span><br><span class="line"></span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &quot;xxx&quot;;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;&#125;</span><br><span class="line">computed: &#123;&#125;</span><br><span class="line">methods: &#123;&#125;</span><br><span class="line">mounted() &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang&#x3D;&quot;scss&quot; scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure></div>

<p>②其他组件中，引入=&gt;注册=&gt;调用</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;tabthree&quot;&gt;</span><br><span class="line">    &lt;pages&gt;&lt;&#x2F;pages&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import pages from &quot;.&#x2F;tab23&#x2F;pages&quot;;</span><br><span class="line">export default &#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">    pages</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></div>


<h1 id="五、组件之间如何通信的"><a href="#五、组件之间如何通信的" class="headerlink" title="五、组件之间如何通信的"></a>五、组件之间如何通信的</h1><p>因为有点多，所以放在了下一篇文章</p>
<h1 id="六、生命周期"><a href="#六、生命周期" class="headerlink" title="六、生命周期"></a>六、生命周期</h1><p><a href="https://imgchr.com/i/JyRJEV" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/04/25/JyRJEV.th.png" alt="JyRJEV.th.png"></a><br><img src="https://s1.ax1x.com/2020/04/25/Jy7YUs.png" alt="Jy7YUs.png"></p>
<p>通过使用swiper插件理解生命周期：<br>　　swiper在created请求数据，但是created实例化时出现了bug：<br>　　原因是因为在这里实例化的时候，swiper-slide真实dom是不存在的，<br>　　当数据刚刚更改完，内部会生成新的虚拟dom，然后新的虚拟dom与旧的虚拟dom结构会进行对比，比较出来差异后才会更新真实dom的swiper-slide的dom结构。<br>　　而虚拟dom之间的对比是有时间的，而更改完数据后立马进行实例化操作，等虚拟dom更新完毕后生成真实的dom结构，其实实例化操作已经提前结束完毕了。<br>　　解决方案1：页面当中的swiper-slide真实dom全都渲染完毕了，再去进行swiper的实例化操作，就不会出现此问题了。<br>　　解决方案2：Vue中提供了 Vue.nextTick  / this.$nextTick，当数据改变引发dom重新渲染完成后才会进入到此回调函数内容</p>
<h1 id="七、nextTick"><a href="#七、nextTick" class="headerlink" title="七、nextTick"></a>七、nextTick</h1><p>①Vue 实现响应式并不是数据发生变化之后 DOM 立即变化，而是按一定的策略进行 DOM 的更新<br>②原理：事件循环<br><img src="https://s1.ax1x.com/2020/04/25/JyR3Bq.png" alt="JyR3Bq.png"><br>　　第一个 tick（图例中第一个步骤，即’本次更新循环’）：<br>　　首先修改数据，这是同步任务。同一事件循环的所有的同步任务都在主线程上执行，形成一个执行栈，此时还未涉及 DOM 。<br>　　Vue 开启一个异步队列，并缓冲在此事件循环中发生的所有数据改变。如果同一个 watcher 被多次触发，只会被推入到队列中一次。</p>
<p>　　第二个 tick（图例中第二个步骤，即’下次更新循环’）：<br>　　同步任务执行完毕，开始执行异步 watcher 队列的任务，更新 DOM 。Vue 在内部尝试对异步队列使用原生的 Promise.then 和 MessageChannel 方法，如果执行环境不支持，会采用 setTimeout(fn, 0) 代替。</p>
<p>　　第三个 tick（图例中第三个步骤）：<br>　　此时就是文档所说的下次 DOM 更新循环结束之后<br>　　此时通过 Vue.nextTick 可以获取到改变后的 DOM 。通过 setTimeout(fn, 0) 也可以同样获取到。</p>
<p><strong>简单总结事件循环：</strong><br>　　同步代码执行 -&gt; 查找异步队列，推入执行栈，执行Vue.nextTick[事件循环1] -&gt;查找异步队列，推入执行栈，执行Vue.nextTick[事件循环2]…<br>　　总之，异步是单独的一个tick，不会和同步在一个 tick 里发生，也是 DOM 不会马上改变的原因</p>
<p>③作用：立即获取更新后的dom节点。<br>　　比如创建了一个swiper组件，里面会根据data里的bannerImage来生成swiper-slide，一开始bannerIamge是空的，在created钩子函数里请求数据后赋值给banenrImage，数据更新后，内部会生成新的虚拟dom，新旧虚拟dom对比需要时间；<br>　　如果在created里获取swiper-slide，因为获取dom和之前的对比操作是同步的，对比操作还没完，真实dom还没生成，就开始获取swiper-slide，自然是获取不到；<br>　　如果把获取节点放在this.$nextTick()里就能获取到，因为会在下次更新循环结束之后，就是DOM更新之后，再去执行。</p>
<h1 id="八、虚拟dom-diff算法-key"><a href="#八、虚拟dom-diff算法-key" class="headerlink" title="八、虚拟dom / diff算法 / key"></a>八、虚拟dom / diff算法 / key</h1><p>整理到了另一篇文章</p>
<h1 id="九、watch与computed"><a href="#九、watch与computed" class="headerlink" title="九、watch与computed"></a>九、watch与computed</h1><h2 id="1、watch"><a href="#1、watch" class="headerlink" title="1、watch"></a>1、watch</h2><p>　　watch有两个参数：immediate(立刻执行) / deep(深度解析)<br>　　更像是一个 data 的数据监听回调，当依赖的 data 的数据变化，执行回调，在方法中会传入 newVal 和 oldVal。如果需要在某个数据变化时做一些事情，就用watch。<br>　　如果watch的值不发生变化，重新渲染的时候就不会执行watch。可以使用 $forceUpdate()方法，调用它会强制刷新页面。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">watch: &#123;</span><br><span class="line">    firstName(newval,oldval) &#123;</span><br><span class="line">      console.log(newval)</span><br><span class="line">      console.log(oldval)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="2、computed"><a href="#2、computed" class="headerlink" title="2、computed"></a>2、computed</h2><p>　　有get()和set()用法；<br>　　计算属性写的时候是个方法，调用时直接fullName即可；<br>　　它会根据你所依赖的数据动态显示新的计算结果。计算结果会被缓存，当无关数据变化的时候，计算属性内部不会重新计算，而是直接从缓存里面取值来用。<br>　　用于一些简单的数据逻辑处理，比如拼接、取整、求和、翻倍；<br>　　如果一个数据依赖于其他数据，那么把这个数据设计为computed</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">    fullName() &#123;</span><br><span class="line">        return this.firstName + &#39; &#39; + this.lastName</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="3、总结"><a href="#3、总结" class="headerlink" title="3、总结"></a>3、总结</h2><p>1.如果一个数据依赖于其他数据，那么把这个数据设计为computed的<br>2.如果你需要在某个数据变化时做一些事情，使用watch来观察这个数据变化</p>
<h1 id="十、vue常见指令"><a href="#十、vue常见指令" class="headerlink" title="十、vue常见指令"></a>十、vue常见指令</h1><h2 id="①v-for"><a href="#①v-for" class="headerlink" title="①v-for"></a>①v-for</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-link</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-for</span>=<span class="string">"item in computeList"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:key</span>=<span class="string">"item.productId"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">tag</span>=<span class="string">"li"</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">  &#123;&#123;item.productName&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h2 id="②v-text-v-html"><a href="#②v-text-v-html" class="headerlink" title="②v-text / v-html"></a>②v-text / v-html</h2><p>为了安全性，尽量不要用v-html；在插入svg图片时会用到v-html<br><code>&lt;h1 v-text=&quot;msg&quot;&gt;&lt;/h1&gt;</code><br><code>&lt;h1 v-html=&quot;msg&quot;&gt;&lt;/h1&gt;</code></p>
<h2 id="②v-on"><a href="#②v-on" class="headerlink" title="②v-on"></a>②v-on</h2><p>用来绑定事件，简写@click，@keyup.enter<br>有几个修饰符，@click.once：</p>
<ul>
<li>.stop       可以阻止事件的冒泡</li>
<li>.prevent  可以取消事件的默认行为</li>
<li>.once       只会触发一次</li>
<li>.self         只会自身触发</li>
</ul>
<h2 id="③v-model"><a href="#③v-model" class="headerlink" title="③v-model"></a>③v-model</h2><p>v-model指令只能用在表单域（input/textarea/checkbox等）里面；<br>v-model的修饰符，v-model.trim：</p>
<ul>
<li>.lazy 默认是同步更新，如果加了.lazy修饰符，等光标离开后才会进行同步的更新。</li>
<li>.number 这个值无法被parseFloat解析的时候，会原样返回。如果能够被解析，返回解析后的数值</li>
<li>.trim 去掉首尾的空格</li>
</ul>
<h2 id="④v-bind"><a href="#④v-bind" class="headerlink" title="④v-bind"></a>④v-bind</h2><p>绑定属性：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"red"</span>&gt;</span>这是一个p段落标签...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">:class</span>=<span class="string">"&#123;'red':isRed&#125;"</span>&gt;</span>这是一个p段落标签...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">:class</span>=<span class="string">"['red',(isBig ? 'big' : '')]"</span>&gt;</span>这是一个p段落标签...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"red"</span> <span class="attr">:class</span>=<span class="string">"(isBig ? 'big' : '')"</span>&gt;</span>这是一个p段落标签...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"isRed=!isRed"</span>&gt;</span>切换class<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">:style</span>=<span class="string">"&#123;backgroundColor:background,fontSize:'40px'&#125;"</span>&gt;</span>我是p段落标签...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h2 id="⑤v-show-v-if-用来控制组件的切换和显示"><a href="#⑤v-show-v-if-用来控制组件的切换和显示" class="headerlink" title="⑤v-show / v-if 用来控制组件的切换和显示"></a>⑤v-show / v-if 用来控制组件的切换和显示</h2><p>　v-if=true代表元素出现   =false代表元素被移除（dom上面直接将其干掉）<br>　v-else 需要与v-if进行搭配使用,不能单独使用<br>　v-show true代表元素出现   false代表元素隐藏 （通过切换display:none or display:block进行元素显示）<br>　template包裹的元素只能通过v-if进行切换！ 因为template这个标签不会被浏览器进行解析渲染！</p>
<h2 id="⑥v-clock"><a href="#⑥v-clock" class="headerlink" title="⑥v-clock"></a>⑥v-clock</h2><p>解决页面闪烁问题( 双括号的闪烁)，当vue加载完毕后，相应的标签才会出现</p>
<h1 id="十一、vue请求"><a href="#十一、vue请求" class="headerlink" title="十一、vue请求"></a>十一、vue请求</h1><h2 id="①v-resource-已经停止维护，建议使用axios"><a href="#①v-resource-已经停止维护，建议使用axios" class="headerlink" title="①v-resource (已经停止维护，建议使用axios)"></a>①v-resource (已经停止维护，建议使用axios)</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">"https://cdn.bootcss.com/vue-resource/1.3.4/vue-resource.min.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="comment">//引入vue-resource之后，那么他就可以在vue实例/组件 上面绑定一个$http的一个属性。</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el:<span class="string">"#app"</span>,</span><br><span class="line">    data:&#123;</span><br><span class="line">        books:[]</span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line">        <span class="keyword">get</span>()&#123;</span><br><span class="line">            <span class="keyword">this</span>.$http.get(<span class="string">"./json/temp.json"</span>).then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">                <span class="keyword">this</span>.books = res.data.books</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;,</span><br><span class="line">        jsonp() &#123;</span><br><span class="line">                <span class="keyword">this</span>.$http.jsonp(<span class="string">"http://suggest.taobao.com/sug?code=utf-8"</span>, &#123;</span><br><span class="line">                    params: &#123;</span><br><span class="line">                        q: <span class="keyword">this</span>.good</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(res)</span><br><span class="line">                    <span class="keyword">this</span>.result = res.data.result</span><br><span class="line">                    <span class="keyword">this</span>.good = <span class="string">""</span></span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></div>

<h2 id="②fetch（post-get-json）"><a href="#②fetch（post-get-json）" class="headerlink" title="②fetch（post/get/json）"></a>②fetch（post/get/json）</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line">methods:&#123;</span><br><span class="line">    handleClick()&#123;</span><br><span class="line">        <span class="comment">//fetch 的get方法</span></span><br><span class="line">        fetch(<span class="string">"./json/temp.json"</span>).then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> res.json()   <span class="comment">//需要让其返回json格式的数据</span></span><br><span class="line">        &#125;).then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(res)</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">        <span class="comment">//fetch 的post方法</span></span><br><span class="line">        fetch(<span class="string">"./json/temp.json"</span>,&#123;</span><br><span class="line">            method:<span class="string">"post"</span>,</span><br><span class="line">            headers:&#123;</span><br><span class="line">                <span class="string">"Content-Type"</span>:<span class="string">"application/x-www-form-urlencoded"</span> <span class="comment">//帮助我们解决utf-8进行编码的数据了</span></span><br><span class="line">            &#125;,</span><br><span class="line">            body:<span class="string">"name=zhangsan&amp;age=10"</span></span><br><span class="line">        &#125;).then(<span class="function"><span class="params">res</span>=&gt;</span>res.json()).then(<span class="function"><span class="params">res</span>=&gt;</span><span class="built_in">console</span>.log(res))</span><br><span class="line"></span><br><span class="line">        <span class="comment">//fetch 的post方法，请求json</span></span><br><span class="line">        fetch(<span class="string">"./json/temp.json"</span>,&#123;</span><br><span class="line">            method:<span class="string">"post"</span>,</span><br><span class="line">            headers:&#123;</span><br><span class="line">                <span class="string">"Content-Type"</span>:<span class="string">"application/json"</span> </span><br><span class="line">            &#125;,</span><br><span class="line">            body:<span class="built_in">JSON</span>.stringify(&#123;</span><br><span class="line">                name:<span class="string">"张三"</span>,</span><br><span class="line">                age:<span class="number">20</span></span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;).then(<span class="function"><span class="params">res</span>=&gt;</span>res.json()).then(<span class="function"><span class="params">res</span>=&gt;</span><span class="built_in">console</span>.log(res))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="③axios（post-get-json）"><a href="#③axios（post-get-json）" class="headerlink" title="③axios（post/get/json）"></a>③axios（post/get/json）</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//get</span></span><br><span class="line">axios.get(<span class="string">"http://localhost:3000/users?userName=admin&amp;pwd=admin"</span>).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// res.data 才是真正的后端数据</span></span><br><span class="line">    <span class="built_in">console</span>.log(res.data)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//post -1- x-www-form-urlencode</span></span><br><span class="line">axios.post(<span class="string">"http://localhost:3000/users"</span>, <span class="string">"name=zhangsan&amp;age=10"</span>).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res.data)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//post -2- application/json</span></span><br><span class="line">axios.post(<span class="string">"http://localhost:3000/users"</span>, &#123;</span><br><span class="line">    name: <span class="string">"zhangsan"</span>,</span><br><span class="line">    age: <span class="number">100</span></span><br><span class="line">&#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res.data)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div>

<h1 id="十二、transition-组件动画"><a href="#十二、transition-组件动画" class="headerlink" title="十二、transition-组件动画"></a>十二、transition-组件动画</h1><h2 id="①基本用法"><a href="#①基本用法" class="headerlink" title="①基本用法"></a>①基本用法</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.box</span> &#123;</span></span><br><span class="line">        width: 200px;</span><br><span class="line">        height: 200px;</span><br><span class="line">        background: red;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.abc-enter-active</span> &#123;</span></span><br><span class="line">        animation: aaa 2s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.abc-leave-active</span> &#123;</span></span><br><span class="line">        transition: all 3s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="keyword">@keyframes</span> aaa &#123;</span></span><br><span class="line">        0% &#123;</span><br><span class="line">            opacity: 0;</span><br><span class="line">            transform: translateX(100px)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        100% &#123;</span><br><span class="line">            opacity: 1;</span><br><span class="line">            transform: translateX(0px);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">transition</span> <span class="attr">name</span>=<span class="string">"abc"</span> <span class="attr">mode</span>=<span class="string">"out-in"</span> <span class="attr">appear</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h2 id="②Animate动画库"><a href="#②Animate动画库" class="headerlink" title="②Animate动画库"></a>②Animate动画库</h2><p><a href="https://daneden.github.io/animate.css/" target="_blank" rel="noopener">https://daneden.github.io/animate.css/</a><br>引入animate.css文件。如下代码，flip为animate库里的动画，abc为自定义动画；</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="comment">/*自定义动画*/</span></span></span><br><span class="line"><span class="css">    <span class="keyword">@keyframes</span> abc&#123;&#125;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transition</span></span></span><br><span class="line"><span class="tag">                <span class="attr">enter-active-class</span>=<span class="string">"animated flip"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">leave-active-class</span>=<span class="string">"animated abc"</span></span></span><br><span class="line"><span class="tag">            &gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h2 id="③mode"><a href="#③mode" class="headerlink" title="③mode"></a>③mode</h2><p>transition组件默认是进入和离开同时发生，vue中对于transition提供了过渡模式：</p>
<ul>
<li>in-out：新元素先进行过渡，完成之后当前元素过渡离开</li>
<li>out-in：当前元素先进行过渡，完成之后新元素过渡进入</li>
</ul>
<h1 id="十三、自定义指令"><a href="#十三、自定义指令" class="headerlink" title="十三、自定义指令"></a>十三、自定义指令</h1><p>1.钩子函数</p>
<ul>
<li><strong>bind</strong>：只调用一次，指令第一次绑定到元素时调用。在这里可以进行一次性的初始化设置</li>
<li><strong>inserted</strong>：被绑定元素插入父节点时调用 (仅保证父节点存在，但不一定已被插入文档中)。</li>
<li><strong>update</strong>：所在组件的 VNode 更新时调用，但是可能发生在其子 VNode 更新之前。指令的值可能发生了改变，也可能没有。但是你可以通过比较更新前后的值来忽略不必要的模板更新 。</li>
<li><strong>componentUpdated</strong>：指令所在组件的 VNode 及其子 VNode 全部更新后调用。</li>
<li><strong>unbind</strong>：只调用一次，指令与元素解绑时调用。</li>
</ul>
<p>2.钩子函数的四个参数</p>
<ul>
<li><strong>el</strong>: 指令所绑定的元素，可以用来直接操作 DOM，就是放置指令的那个元素。</li>
<li><strong>binding</strong>: 一个对象，里面包含了几个属性，这里不多展开说明，官方文档上都有很详细的描述。<ul>
<li>name：指令名，不包括 v- 前缀。</li>
<li>value：指令的绑定值，例如：v-my-directive=”1 + 1” 中，绑定值为 2。</li>
<li>oldValue：指令绑定的前一个值，仅在 update 和 componentUpdated 钩子中可用。无论值是否改变都可用。</li>
<li>expression：字符串形式的指令表达式。例如 v-my-directive=”1 + 1” 中，表达式为 “1 + 1”。</li>
<li>arg：传给指令的参数，可选。例如 v-my-directive:foo 中，参数为 “foo”。</li>
<li>modifiers：一个包含修饰符的对象。例如：v-my-directive.foo.bar 中，修饰符对象为 { foo: true, bar: true }。</li>
</ul>
</li>
<li><strong>vnode</strong>：Vue 编译生成的虚拟节点。</li>
<li><strong>oldVnode</strong>：上一个虚拟节点，仅在 update 和 componentUpdated 钩子中可用。</li>
</ul>
<p>3.简单案例</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-color</span>=<span class="string">"'pink'"</span>&gt;</span>pink<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./base/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    Vue.directive(<span class="string">'color'</span>, &#123;</span></span><br><span class="line"><span class="actionscript">        bind: <span class="function"><span class="keyword">function</span> <span class="params">(el, binding, vnode)</span> </span>&#123;</span></span><br><span class="line">        el.style.background = binding.value</span><br><span class="line">        &#125;,</span><br><span class="line"><span class="actionscript">        update:<span class="function"><span class="keyword">function</span><span class="params">(el,binding)</span></span>&#123;</span></span><br><span class="line">            el.style.background = binding.value</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">'#app'</span>,</span></span><br><span class="line">        data:&#123;</span><br><span class="line"><span class="actionscript">            color:<span class="string">"orange"</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h1 id="十四、vue其他"><a href="#十四、vue其他" class="headerlink" title="十四、vue其他"></a>十四、vue其他</h1><h2 id="①mixin混入"><a href="#①mixin混入" class="headerlink" title="①mixin混入"></a>①mixin混入</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  在Vue里可以使用mixins来做代码的抽离复用，便于维护</span><br><span class="line">  一个mixin其实就是一个纯粹的对象，上面挂载着抽离出来的配置，</span><br><span class="line">  在某一个实例中，通过mixins选项导入后，此实例就拥有导入的mixin的配置</span><br><span class="line">  并且不会与原配置相互覆盖，而是合并到一起</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 抽离出来的代码</span></span><br><span class="line">  <span class="keyword">let</span> common = &#123;</span><br><span class="line">    methods: &#123;&#125;,</span><br><span class="line">    computed: &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">"#app"</span>,</span><br><span class="line">    mixins: [common],</span><br><span class="line">  &#125;)</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></div>

<h2 id="②过滤器"><a href="#②过滤器" class="headerlink" title="②过滤器"></a>②过滤器</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 调用过滤器</span></span><br><span class="line">&lt;span&gt;主演：&#123;&#123;film.actors|actorFilter&#125;&#125;&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">import Vue from "vue";</span></span><br><span class="line"><span class="regexp">Vue.filter("actorFilter", data =&gt; &#123;</span></span><br><span class="line"><span class="regexp">  if (data) &#123;</span></span><br><span class="line"><span class="regexp">    return data.map(item =&gt; item.name).join(" ");</span></span><br><span class="line"><span class="regexp">  &#125; else &#123;</span></span><br><span class="line"><span class="regexp">    return "暂无主演";</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;)</span></span><br></pre></td></tr></table></figure></div>

<h2 id="③插槽"><a href="#③插槽" class="headerlink" title="③插槽"></a>③插槽</h2><p>1.匿名插槽</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">hello</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span>联通卡<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span>移动卡<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">hello</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"hello"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>2.具名插槽</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hello</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">"a"</span>&gt;</span>联通卡<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">"b"</span>&gt;</span>移动卡<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">hello</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"hello"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">"a"</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">"b"</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>3.v-slot方法(新版本)</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hello</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span>联通卡<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:b</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span>移动卡<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">hello</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"hello"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">"a"</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">"b"</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>4.接收props参数的具名槽口<br>hello组件在script定义了参数 =&gt; html定义时绑定上参数 =&gt; 添加插槽时绑定 =&gt; 插槽里就可以用hello里的数据了</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hello</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span>联通卡<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:b</span>=<span class="string">"info"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span>移动卡 &#123;&#123;info.msgb&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">hello</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"hello"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">"a"</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">"b"</span> <span class="attr">:msgb</span>=<span class="string">"msg"</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    Vue.component(<span class="string">"hello"</span>, &#123;</span></span><br><span class="line"><span class="actionscript">        template: <span class="string">"#hello"</span>,</span></span><br><span class="line">        data() &#123;</span><br><span class="line"><span class="actionscript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">                msg: <span class="string">"你好"</span></span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">"#app"</span>,</span></span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></div>


<h1 id="十五、vuex（放在后面的项目总结里）"><a href="#十五、vuex（放在后面的项目总结里）" class="headerlink" title="十五、vuex（放在后面的项目总结里）"></a>十五、vuex（放在后面的项目总结里）</h1><p>VUE核心概念</p>
<ul>
<li>state：响应式数据</li>
<li>Getter：从 state 中派生出一些状态，类似计算属性</li>
<li>Mutation：更改 state 方法，不能直接调用一个 mutation handler，应该store.commit(‘handler’)</li>
<li>Action：触发 mutation 方法，不能直接更改状态，可以包含异步操作</li>
<li>Module：划分模块</li>
</ul>
<h1 id="十六、vue-cli（放在后面的项目总结里）"><a href="#十六、vue-cli（放在后面的项目总结里）" class="headerlink" title="十六、vue-cli（放在后面的项目总结里）"></a>十六、vue-cli（放在后面的项目总结里）</h1><p>vue脚手架，和vuex一样，不好单独拿出来，所以在后面的项目总结里再细说；</p>
]]></content>
      <categories>
        <category>vue</category>
      </categories>
  </entry>
  <entry>
    <title>VUE的一些原理</title>
    <url>/jackhuang-haohua.github.io/2019/05/08/2020-04-vue-%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<h1 id="一、MV"><a href="#一、MV" class="headerlink" title="一、MV*"></a>一、MV*</h1><h2 id="MVC（model-view-controller）"><a href="#MVC（model-view-controller）" class="headerlink" title="MVC（model view controller）"></a>MVC（model view controller）</h2><ul>
<li>Model：数据模型，用来存储数据</li>
<li>View：视图界面，用来展示UI界面和响应用户交互</li>
<li>Controller：控制器(大管家角色)，监听模型数据的改变和控制视图行为、处理用户交互</li>
</ul>
<p>　　用户对View操作以后，View捕获到这个操作，通过action把处理的权利交移给 Controller；Controller会对来自View数据进行预处理、决定调用哪个Model的接口/方法；然后由Model执行相关的业务逻辑（数据请求）；当Model变更了以后，会通过观察者模式（Observer Pattern）通知View； View通过观察者模式收到Model变更的消息以后，会向Model请求最新的数据，然后重新更新界面。<br>　　特点：把业务逻辑和展示逻辑分离，模块化程度高。但由于View是强依赖特定的 Model的，所以View无法组件化，无法复用<br><img src="https://s1.ax1x.com/2020/04/25/JyRYNT.png" alt="JyRYNT.png"></p>
<h2 id="MVP（model-view-presenter）"><a href="#MVP（model-view-presenter）" class="headerlink" title="MVP（model view presenter）"></a>MVP（model view presenter）</h2><p>　　和MVC模式一样，用户对View的操作都会从View交移给Presenter。 Presenter会执行相应的应用程序逻辑，并且对Model进行相应的操作；而这时候Model执行完业务逻辑以后，也是通过观察者模式把自己变更的消息传 递出去，但是是传给Presenter而不是View。Presenter获取到Model变更的消息以后，通过View提供的接口更新界面。<br>　　特点：View不依赖Model，View可以进行组件化。但Model-&gt;View的手动同步逻辑麻烦，维护困难<br><img src="https://s1.ax1x.com/2020/04/25/JyRt4U.png" alt="JyRt4U.png"></p>
<h2 id="MVVM（model-view-viewmodel）"><a href="#MVVM（model-view-viewmodel）" class="headerlink" title="MVVM（model view viewmodel）"></a>MVVM（model view viewmodel）</h2><p>　　MVVM的调用关系和MVP一样。但是，在ViewModel当中会有一个叫 Binder，或者是Data-binding engine的东西。你只需要在View的模版语法中，指令式地声明View上的显示的内容是和Model的哪一块数据绑定的。 当ViewModel对Model进行更新的时候，Binder会自动把数据更新到View上 去；当用户对View进行操作（例如表单输入），Binder也会自动的把数据更新到Model上去。这种方式称为：Two-way data-binding，双向数据绑定。<br>　　特点：它采用双向绑定（data-binding）：View的变动，自动反映在 ViewModel，反之亦然<br><img src="https://s1.ax1x.com/2020/04/25/JyR1un.png" alt="JyR1un.png"><br><img src="https://s1.ax1x.com/2020/04/25/JyRK3Q.png" alt="JyRK3Q.png"></p>
<h1 id="二、双向数据绑定"><a href="#二、双向数据绑定" class="headerlink" title="二、双向数据绑定"></a>二、双向数据绑定</h1><p>语义描述，什么是双向绑定：<br>　　vue内部通过数据劫持&amp;发布订阅模式实现数据的双向绑定；<br>　　遍历所有data对象中的所有属性=&gt;并对每一个属性使用Object.defineProperty劫持=&gt;给这些数据动态的添加了getter与setter方法=&gt;在数据变化的时候发布消息给订阅者（Watcher/Observer），触发响应的监听回调=&gt;setter()=&gt;执行一系列的渲染视图的操作<br>　　对于数组，修改数组的原型方法，往这些方法里添加一些视图渲染的操作。</p>
<p>注意：<br>vue3 的 变化 Object.defineProperty有以下缺点：</p>
<ul>
<li>1、无法监听es6的Set、Map 变化；</li>
<li>2、无法监听Class类型的数据；</li>
<li>3、属性的新加或者删除也无法监听；</li>
<li>4、数组元素的增加和删除也无法监听。</li>
</ul>
<p>　　针对Object.defineProperty的缺点，ES6 Proxy都能够完美得解决，它唯一的缺 点就是，对IE不友好,所以vue3在检测到如果是使用IE的情况下（没错，IE11都不支持Proxy），会自动降级为Object.defineProperty的数据监听系统。</p>
<p>双向绑定原理实现的小案例：<br>核心是<code>Object.defineProperty()</code></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"txt"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"sp"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> txt = <span class="built_in">document</span>.getElementById(<span class="string">'txt'</span>),</span></span><br><span class="line"><span class="javascript">        sp = <span class="built_in">document</span>.getElementById(<span class="string">'sp'</span>),</span></span><br><span class="line">        obj = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// 给对象obj添加msg属性，并设置setter访问器</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">Object</span>.defineProperty(obj, <span class="string">'msg'</span>, &#123;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 设置 obj.msg 当obj.msg反生改变时set方法将会被调用</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">set</span>: <span class="function"><span class="keyword">function</span> <span class="params">(newVal)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="comment">// 当obj.msg被赋值时 同时设置给 input/span</span></span></span><br><span class="line">            txt.value = newVal</span><br><span class="line">            sp.innerText = newVal</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// 监听文本框的改变 当文本框输入内容时 改变obj.msg</span></span></span><br><span class="line"><span class="actionscript">    txt.addEventListener(<span class="string">'keyup'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(event)</span> </span>&#123;</span></span><br><span class="line">        obj.msg = event.target.value</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
<p><img src="https://s1.ax1x.com/2020/04/25/JyRUCF.png" alt="JyRUCF.png"></p>
<h1 id="三、虚拟dom-diff算法-key"><a href="#三、虚拟dom-diff算法-key" class="headerlink" title="三、虚拟dom / diff算法 / key"></a>三、虚拟dom / diff算法 / key</h1><h2 id="1-虚拟dom的更新"><a href="#1-虚拟dom的更新" class="headerlink" title="1.虚拟dom的更新"></a><strong>1.虚拟dom</strong>的更新</h2><ul>
<li>1.根据虚拟dom树最初渲染成真实dom</li>
<li>2.当数据变化，或者说是页面需要重新渲染的时候，会重新生成一个新的完整的虚拟dom (对象形式)</li>
<li>3.拿新的虚拟dom来和旧的虚拟dom做对比（使用diff算法）。得到需要更新的地方之后，更新内容</li>
</ul>
<p>浏览器加载一个HTML文件的大致流程：</p>
<ul>
<li>1.构建DOM树</li>
<li>2.构建Style Rules，页面的样式表</li>
<li>3.把DOM树和样式表综合起来，形成Render Tree</li>
<li>4.布局，为每个Render树上的节点确定在显示屏上出现的精确坐标值。</li>
<li>5.绘制，调用每个节点的paint方法</li>
</ul>
<p>　　当用传统的方式操作DOM的时候，浏览器会从构建DOM树开始从头到尾执行一遍流程，效率很低。而虚拟DOM是用javascript对象表示的，而操作javascript是很简便高效的。虚拟DOM和真正的DOM有一层映射关系，很多需要操作DOM的地方都会去操作虚拟DOM，最后统一一次更新DOM。因而可以提高性能。</p>
<p><strong>虚拟dom对象：</strong>DOM节点在HTML文档中的表现通常是这样的：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">'list'</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Item 1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Item 2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>其实一个节点也可以表示为对象（虚拟dom）：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> domNode = &#123;</span><br><span class="line">    tag: <span class="string">'ul'</span>,</span><br><span class="line">    attributes: &#123;</span><br><span class="line">        id: <span class="string">'list'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    children: [<span class="string">'li'</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>当我们更新虚拟节点时：<br><code>domNode.children.push(&#39;&lt;ul&gt;Item 3&lt;/ul&gt;&#39;);</code></p>
<p>　　如果我们用一个虚拟DOM，而不是直接调用像.getElementById的方法，这样只操作JavaScript对象，这样是相当方便的。然后，再把更改的部分更新到真正的DOM。<br>　　缺点：</p>
<ul>
<li>1.尺寸：更多的功能意味着更多的代码。幸运的是Vue.js 2.0仍然是相当小的（21.4kb当前版本）。</li>
<li>2.内存：虚拟DOM需要在内存中的维护一份DOM的副本。在DOM更新速度和使用内存空间之间取得平衡。</li>
</ul>
<h2 id="2-diff算法-关键词：平层比较，更新替换"><a href="#2-diff算法-关键词：平层比较，更新替换" class="headerlink" title="2.diff算法(关键词：平层比较，更新替换)"></a>2.diff算法(关键词：平层比较，更新替换)</h2><p>　　在DOM的状态发生变化时，虚拟DOM会进行Diff运算，来更新只需要被替换的DOM，而不是全部重绘。只平层的比较前后两棵DOM树的节点，没有进行深度的遍历。<br><img src="https://s1.ax1x.com/2020/04/25/JyRQjs.png" alt="JyRQjs.png"><br>比较后会有四种结果：</p>
<ul>
<li>1、此节点是否被移除 -&gt; 添加新的节点</li>
<li>2、属性是否被改变 -&gt; 旧属性改为新属性</li>
<li>3、文本内容被改变-&gt; 旧内容改为新内容</li>
<li>4、节点要被整个替换 -&gt; 结构完全不相同 移除整个替换</li>
</ul>
<h2 id="3-key"><a href="#3-key" class="headerlink" title="3.key"></a>3.key</h2><p>优化性能，避免出错。<br>没有添加key，插入节点F，简单粗暴的做法是：卸载C，装载F，卸载D，装载C，卸载E，装载D，装载E。如下图：<br><img src="https://s1.ax1x.com/2020/04/25/JyRMcj.png" alt="JyRMcj.png"></p>
<p>如果添加了key，就会根据key找到对应的位置：<br><img src="https://s1.ax1x.com/2020/04/25/JyR8H0.png" alt="JyR8H0.png"></p>
]]></content>
      <categories>
        <category>vue</category>
      </categories>
  </entry>
  <entry>
    <title>VUE项目-商城类WebApp</title>
    <url>/jackhuang-haohua.github.io/2019/07/03/2020-04-vue%E5%B0%96%E5%8F%AB%E8%AE%BE%E8%AE%A1/</url>
    <content><![CDATA[<h1 id="项目介绍"><a href="#项目介绍" class="headerlink" title="项目介绍"></a>项目介绍</h1><p>一个商城类移动端Web，地址 <a href="http://47.104.70.82/" target="_blank" rel="noopener">http://47.104.70.82/</a><br><img src="https://s1.ax1x.com/2020/04/26/J2xWsH.jpg" alt="J2xWsH.jpg"><br>这篇文章主要是想把用到的技术、大概步骤总结一下，<br>主要用到：</p>
<ul>
<li>vue-cli及相关配置</li>
<li>vue-router</li>
<li>自定义组件</li>
<li>自定义指令</li>
<li>vuex</li>
<li>node接口</li>
<li>element-ui</li>
</ul>
<p>目前发现的bug：</p>
<ul>
<li>在快速滑动页面时，底部导航栏出现抖动：这个应该要优化滑动，better-scroll，以及导航栏禁止滑动</li>
<li>加入购物车发现商品不对：其实是接口的问题…尖叫设计同一个商品不同规格，就算作是两个商品，但是这个不同规格的接口实在没找到，于是就没按规格分开商品</li>
</ul>
<h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><h2 id="vue-cli"><a href="#vue-cli" class="headerlink" title="vue-cli"></a>vue-cli</h2><p>跟上一篇的步骤一样</p>
<h2 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h2><p>yarn add 系列，<br>本项目用到的有：<code>axios</code>,<code>element-ui</code>,<code>swiper</code>,<code>nprogress</code>,<code>vue-router</code>,<code>vuex</code>,<code>vuex-persistedstate</code>,<code>bable</code>,<code>eslint</code>,<code>sass</code></p>
<h2 id="配置代理"><a href="#配置代理" class="headerlink" title="配置代理"></a>配置代理</h2><p>一个是尖叫设计的接口，一个是自己写的接口(已经部署到阿里云服务器)，<br>vue.config.js里：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">devServer: &#123;</span><br><span class="line">  open: true, &#x2F;&#x2F; 默认开启浏览器</span><br><span class="line">  port: 8000, &#x2F;&#x2F; 更改默认端口号为8000</span><br><span class="line">  &#x2F;&#x2F; 代理配置</span><br><span class="line">  proxy: &#123;</span><br><span class="line">    &#39;&#x2F;design&#39;: &#123;</span><br><span class="line">      target: &#39;https:&#x2F;&#x2F;m.wowdsgn.com&#39;,</span><br><span class="line">      changeOrigin: true,</span><br><span class="line">      pathRewrite: &#123;</span><br><span class="line">        &#39;^&#x2F;design&#39;: &#39;https:&#x2F;&#x2F;m.wowdsgn.com&#39;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#39;&#x2F;node&#39;: &#123;</span><br><span class="line">      target: &#39;http:&#x2F;&#x2F;localhost:3000&#39;,</span><br><span class="line">      changeOrigin: true,</span><br><span class="line">      pathRewrite: &#123;</span><br><span class="line">        &#39;^&#x2F;node&#39;: &#39;http:&#x2F;&#x2F;localhost:3000&#39;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><p>src/router/index.js里，<br>配置路由：重定向、默认路由、404页面、webpackChunkName打包<br>进度条动画：noprogress<br>路由守卫：点击购物车、消息、个人中心需要验证token</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">'vue-router'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="built_in">Error</span> <span class="keyword">from</span> <span class="string">'./../views/404/Error.vue'</span></span><br><span class="line">Vue.use(VueRouter)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes = [&#123;</span><br><span class="line">    path: <span class="string">'/home'</span>,</span><br><span class="line">    name: <span class="string">'home'</span>,</span><br><span class="line">    component: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(</span><br><span class="line">      <span class="comment">/* webpackChunkName:'home' */</span></span><br><span class="line">      <span class="string">'@/views/Home'</span>),</span><br><span class="line">    children:</span><br><span class="line">    ......</span><br><span class="line">&#125;]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  routes</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 加载动画</span></span><br><span class="line"><span class="keyword">import</span> NProgress <span class="keyword">from</span> <span class="string">'nprogress'</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'nprogress/nprogress.css'</span></span><br><span class="line">NProgress.configure(&#123;     </span><br><span class="line">  easing: <span class="string">'ease'</span>,  <span class="comment">// 动画方式    </span></span><br><span class="line">  speed: <span class="number">300</span>,  <span class="comment">// 递增进度条的速度    </span></span><br><span class="line">  showSpinner: <span class="literal">false</span>, <span class="comment">// 是否显示加载ico    </span></span><br><span class="line">  trickleSpeed: <span class="number">200</span>, <span class="comment">// 自动递增间隔    </span></span><br><span class="line">  minimum: <span class="number">0.3</span>, <span class="comment">// 初始化时的最小百分比</span></span><br><span class="line">  <span class="comment">// template: "&lt;div class='123'&gt;123&lt;/div&gt;",</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断每次进入/mine、/message的时候，是否有token令牌</span></span><br><span class="line">router.beforeEach(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">  NProgress.start();</span><br><span class="line">  <span class="keyword">if</span> (to.path === <span class="string">"/mine"</span> || to.path === <span class="string">"/message"</span>|| to.path === <span class="string">"/shop"</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (localStorage.getItem(<span class="string">"token"</span>)) &#123; <span class="comment">//说明用户已经登录了</span></span><br><span class="line">      next()</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      next(<span class="string">"/login"</span>) <span class="comment">//如果用户没有登录直接跳转到登录界面进行用户登录</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    next()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 回到顶部</span></span><br><span class="line">router.afterEach(<span class="function">(<span class="params">to, <span class="keyword">from</span></span>) =&gt;</span> &#123;</span><br><span class="line">  NProgress.done()</span><br><span class="line">  <span class="keyword">let</span> bodySrcollTop = <span class="built_in">document</span>.body.scrollTop</span><br><span class="line">  <span class="keyword">if</span> (bodySrcollTop !== <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">document</span>.body.scrollTop = <span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> docSrcollTop = <span class="built_in">document</span>.documentElement.scrollTop</span><br><span class="line">  <span class="keyword">if</span> (docSrcollTop !== <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">document</span>.documentElement.scrollTop = <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure></div>

<h1 id="自定义指令"><a href="#自定义指令" class="headerlink" title="自定义指令"></a>自定义指令</h1><p>封装了三个指令：<br>src/utils/directives.js:</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> Swiper <span class="keyword">from</span> <span class="string">'swiper'</span></span><br><span class="line">Vue.directive(<span class="string">'swiper'</span>, &#123;</span><br><span class="line">  inserted(el, binding, vnode) &#123;</span><br><span class="line">    <span class="comment">// 代表最后一个元素插入完毕了，再进进行一次实例化操作就可以了</span></span><br><span class="line">    <span class="keyword">const</span> free = binding.value.free ? binding.value.free : <span class="string">''</span></span><br><span class="line">    <span class="keyword">const</span> autoplay = binding.value.autoplay ? binding.value.autoplay : <span class="string">''</span></span><br><span class="line">    <span class="keyword">if</span> (binding.value.current === binding.value.length - <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">new</span> Swiper(<span class="string">'.'</span> + binding.value.swipe, &#123;</span><br><span class="line">        ...free,</span><br><span class="line">        autoplay,</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 封装的自定义指令v-title，下拉到一定位置元素消失</span></span><br><span class="line">Vue.directive(<span class="string">'title'</span>, &#123;</span><br><span class="line">  <span class="comment">// 插入到dom之后的钩子函数</span></span><br><span class="line">  inserted(el, binding) &#123;</span><br><span class="line">    el.style.display = <span class="string">'none'</span></span><br><span class="line">    <span class="built_in">window</span>.onscroll = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> ((<span class="built_in">document</span>.body.scrollTop || <span class="built_in">document</span>.documentElement.scrollTop) &gt; binding.value) &#123;</span><br><span class="line">        el.style.display = <span class="string">'block'</span></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        el.style.display = <span class="string">'none'</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 指令的解绑的钩子函数</span></span><br><span class="line">  unbind() &#123;</span><br><span class="line">    <span class="built_in">window</span>.onscroll = <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 回到首页的指令</span></span><br><span class="line">Vue.directive(<span class="string">'home'</span>, &#123;</span><br><span class="line">  inserted(el, binding, vnode) &#123;</span><br><span class="line">    el.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      binding.value.this._self.$router.push(<span class="string">"/home/tabone"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div>

<h1 id="自定义组件"><a href="#自定义组件" class="headerlink" title="自定义组件"></a>自定义组件</h1><p>公共组件：顶部/底部导航栏，swiper轮播图<br>局部组件：列表页，标题等等<br>公共的放在src/components，局部的放在相关文件夹(其实两个没什么区别)<br>使用的时候需要：引入组件=&gt;注册组件=&gt;调用组件；<br>传参用的props，调用时v-bind传参，自定义组件内部<code>props:[&quot;xxx&quot;]</code>接收；<br>代码太多就不贴了。</p>
<h1 id="详情页"><a href="#详情页" class="headerlink" title="详情页"></a>详情页</h1><h2 id="渲染页面"><a href="#渲染页面" class="headerlink" title="渲染页面"></a>渲染页面</h2><p>通过列表页router-link进去详情页，在params里把商品信息都传过去；<br>详情页通过params的信息，请求数据并渲染；<br>有一个问题是，商品数据都是params带过来的，在详情页直接刷新这些数据是没有的，所以要把params里的数据存起来，这里是存在vuex里，<br>具体逻辑为：拿到列表页传过来数据=&gt;发起请求，得到数据后存到vuex=&gt;取出vuex的数据=&gt;渲染；</p>
<h2 id="详情页中的列表页"><a href="#详情页中的列表页" class="headerlink" title="详情页中的列表页"></a>详情页中的列表页</h2><p>详情页里也是有列表页的，所以有一个逻辑是详情页跳到详情页，路由不变，页面内容改变；</p>
<ul>
<li>详情页中的列表页=&gt;详情页</li>
<li>其他组件的列表页=&gt;详情页<br>在调用列表页时，上面两种情况传不同的参数，列表页组件里props接收时要判断一下是哪种参数，处理成相同类型，然后要用<code>router.afterEach</code>回到顶部</li>
</ul>
<h2 id="跳转购物车"><a href="#跳转购物车" class="headerlink" title="跳转购物车"></a>跳转购物车</h2><p>详情页的购物车是一个弹出框和表单，主要用element-ui完成；<br>在选号商品参数，点击确认购买，即等于提交表单，需要把商品ID存到vuex</p>
<h1 id="购物车"><a href="#购物车" class="headerlink" title="购物车"></a>购物车</h1><p>主要通过element-ui的多选框完成，这个ui框架的多选框提供一个checkouted参数，即已选中的项目，通过这个参数来计算总价</p>
<h1 id="消息和我的"><a href="#消息和我的" class="headerlink" title="消息和我的"></a>消息和我的</h1><p>做成了静态的，因为木有接口</p>
<h1 id="登录页面"><a href="#登录页面" class="headerlink" title="登录页面"></a>登录页面</h1><p>这里接口是自己写的，接口放在了同一个服务器；<br>一个验证码接口：返回验证码图片，检验是否正确；<br>一个注册接口：注册完成后数据存到线上mongo里；<br>一个登录接口：返回token和一些用户信息(用户信息暂时只有一个名字)；<br>后面在总结一个node接口文章吧。</p>
]]></content>
      <categories>
        <category>vue</category>
      </categories>
  </entry>
  <entry>
    <title>获取元素，浏览器，滚动条的宽高</title>
    <url>/jackhuang-haohua.github.io/2019/09/04/2020-04-%E5%85%83%E7%B4%A0%E5%AE%BD%E9%AB%98/</url>
    <content><![CDATA[<h2 id="获取尺寸"><a href="#获取尺寸" class="headerlink" title="获取尺寸"></a>获取尺寸</h2><p><img src="https://s1.ax1x.com/2020/05/18/YWOqhQ.png" alt="YWOqhQ.png"><br><img src="https://s1.ax1x.com/2020/05/18/YWXenx.png" alt="YWXenx.png"></p>
<h3 id="获取元素的宽高："><a href="#获取元素的宽高：" class="headerlink" title="获取元素的宽高："></a>获取元素的宽高：</h3><p>盒子模型：元素的宽高 +内边距（padding） + 边框（border） + 外边距（margin）</p>
<ol>
<li><p>clientWidth  获取元素的宽度（width + padding）</p>
</li>
<li><p>clientHeight 获取元素的高度（height + padding）</p>
</li>
<li><p>clientLeft   获取的是左边框</p>
</li>
<li><p>clientTop    获取的是上边框<br>　注意：没有办法获取下边框和右边框</p>
</li>
<li><p>offsetWidth 获取元素的宽度（width +padding +border）</p>
</li>
<li><p>offsetHeight 获取元素的高度（height + padding + border）<br>元素的偏移量 到参考框 的距离</p>
</li>
<li><p>offsetLeft </p>
</li>
<li><p>offsetTop<br>第一种：当元素没有定位的时候，那么获取或者设置元素到浏览器最左边和上边的距离<br>第二种情况：当元素有定位的时候,并有定位的父元素，那么偏移量就是 元素的左边（上边）到父元素的最左边（最上边）的距离<br>想要获取元素的宽度（宽度 + padding + border）</p>
</li>
</ol>
<h3 id="获取浏览器的宽高"><a href="#获取浏览器的宽高" class="headerlink" title="获取浏览器的宽高"></a>获取浏览器的宽高</h3><p>BOM，browser object model（浏览器对象模型），主要用来操作浏览器对象，顶级对象为window</p>
<ol>
<li>innerWidth：获取可视区域宽度</li>
<li>innerHeight：获可视区域取高度</li>
<li>outWidth:获取整个浏览器的宽度</li>
<li>outHeight:获取整个浏览器的高度</li>
</ol>
<h3 id="滚动条的属性和方法"><a href="#滚动条的属性和方法" class="headerlink" title="滚动条的属性和方法"></a>滚动条的属性和方法</h3><ol>
<li>scrollY: 滚动条距离顶部的距离</li>
<li>scrollX: 滚动条距离左边的距离</li>
<li>window.onscroll = function(){} 滚动条滚动事件</li>
<li>window.scrollTo(x,y) 设置滚动条距离 顶部的位置</li>
<li>window.scrollBy(x,y) 设置滚动 与当前位置的距离</li>
</ol>
<h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><h3 id="①进度条"><a href="#①进度条" class="headerlink" title="①进度条"></a>①进度条</h3><p>每隔80ms，色块的宽度增加，数字的margin-left增加数字的内容由‘色块的宽度’决定；</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"jinDuTiao"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"num"</span>&gt;</span>0%<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> $width = <span class="number">0</span>;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> timer = setInterval(<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line">            $width += 13;</span><br><span class="line"><span class="actionscript">            <span class="comment">// 当改变的宽度 大于等于800的时候，那么需要停止定时器，并且宽度只能等于800</span></span></span><br><span class="line">            if ($width &gt;= 800) &#123;</span><br><span class="line">                clearInterval(timer);</span><br><span class="line">                $width = 800;</span><br><span class="line">            &#125;</span><br><span class="line"><span class="actionscript">            jinDuTiao.style.width = $width + <span class="string">'px'</span>; <span class="comment">//改变进度条的宽度</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">// 进度条的进度 数字</span></span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> $num = $width / <span class="number">800</span> * <span class="number">100</span>;</span></span><br><span class="line"><span class="actionscript">            <span class="comment">// </span></span></span><br><span class="line"><span class="actionscript">            num.style.left = $width + <span class="string">'px'</span>;</span></span><br><span class="line"><span class="actionscript">            <span class="comment">// 改变百分比的位置</span></span></span><br><span class="line"><span class="actionscript">            num.innerHTML = ($num.toFixed(<span class="number">2</span>) + <span class="string">'%'</span>);</span></span><br><span class="line"></span><br><span class="line">        &#125;, 80)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h3 id="②回到顶部"><a href="#②回到顶部" class="headerlink" title="②回到顶部"></a>②回到顶部</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 滚动到一定距离是按钮出现</span></span><br><span class="line"><span class="built_in">window</span>.onscroll = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 当滚动条滚动到 800以上的，那么让回到顶部按钮显示</span></span><br><span class="line">    <span class="keyword">if</span> (scrollY &gt;= <span class="number">800</span>) &#123;</span><br><span class="line">        btn.style.display = <span class="string">'block'</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 当滚动条小于800的时候，让回到顶部按钮隐藏</span></span><br><span class="line">        btn.style.display = <span class="string">'none'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">btn.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 点击的时候先清除定时器</span></span><br><span class="line">    clearInterval(btn.timer);</span><br><span class="line">    <span class="comment">// 把定时器绑定在 点击的对象上 对象名.属性</span></span><br><span class="line">    btn.timer = setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> y = scrollY;</span><br><span class="line">        <span class="comment">// 当滚动的的 scrollY的值为 0 的时候，那么就要把定时器清除</span></span><br><span class="line">        <span class="keyword">if</span> (y &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            clearInterval(btn.timer);</span><br><span class="line">            <span class="comment">// 已经把定时器清除掉，下次点击可以在创建定时器</span></span><br><span class="line">        &#125;</span><br><span class="line">        scrollTo(<span class="number">0</span>, y - <span class="number">20</span>);</span><br><span class="line">    &#125;, <span class="number">100</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="③元素拖拽"><a href="#③元素拖拽" class="headerlink" title="③元素拖拽"></a>③元素拖拽</h3><p>clientX：鼠标距离最左边，<br>offsetLeft：元素左边框距离最左边，<br>innerWidth：浏览器宽度</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 拖拽效果</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> box = <span class="built_in">document</span>.querySelector(<span class="string">'.box'</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    box.onmousedown = <span class="function"><span class="keyword">function</span> <span class="params">(e)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> x = e.clientX - box.offsetLeft</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> y = e.clientY - box.offsetTop</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.onmousemove = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span></span><br><span class="line"><span class="actionscript">            box.style.left = e.clientX - x + <span class="string">'px'</span>;</span></span><br><span class="line"><span class="actionscript">            box.style.top = e.clientY - y + <span class="string">'px'</span>;</span></span><br><span class="line"><span class="actionscript">            <span class="comment">// 不超过边界的效果</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">// 获取浏览器宽高</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> w1 = <span class="built_in">window</span>.innerWidth;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> h1 = <span class="built_in">window</span>.innerHeight;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">            <span class="comment">// 获取box与浏览器left和top的实际距离</span></span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> boxLeft = e.clientX - x</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> boxTop = e.clientY - y</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">            <span class="comment">// 计算box能达到的最大值</span></span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> boxMaxLeft = w1 - box.offsetWidth</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> boxMaxTop = h1 - box.offsetHeight</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(boxMaxTop);</span></span><br><span class="line"><span class="actionscript">            <span class="comment">// 不能超过左边</span></span></span><br><span class="line">            if (boxLeft &lt; 0) &#123;</span><br><span class="line"><span class="actionscript">                box.style.left = <span class="number">0</span> + <span class="string">'px'</span>;</span></span><br><span class="line">            &#125;</span><br><span class="line"><span class="actionscript">            <span class="comment">// 不能超过上边</span></span></span><br><span class="line">            if (boxTop &lt; 0) &#123;</span><br><span class="line"><span class="actionscript">                box.style.top = <span class="number">0</span> + <span class="string">'px'</span>;</span></span><br><span class="line">            &#125;</span><br><span class="line"><span class="actionscript">            <span class="comment">// 不能超过右边</span></span></span><br><span class="line">            if (boxLeft &gt; boxMaxLeft) &#123;</span><br><span class="line"><span class="actionscript">                box.style.left = boxMaxLeft + <span class="string">'px'</span>;</span></span><br><span class="line">            &#125;</span><br><span class="line"><span class="actionscript">            <span class="comment">// 不能超过下边</span></span></span><br><span class="line">            if (boxTop &gt; boxMaxTop) &#123;</span><br><span class="line"><span class="actionscript">                box.style.top = boxMaxTop + <span class="string">'px'</span>;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.onmouseup = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.onmousemove = <span class="literal">null</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h3 id="元素居中"><a href="#元素居中" class="headerlink" title="元素居中"></a>元素居中</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 浏览器的宽度 - 元素的宽度 ÷ 2 的值设置为元素的left值</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 浏览器的宽度</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> w1 = <span class="built_in">window</span>.innerWidth;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> h1 = <span class="built_in">window</span>.innerHeight;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// 获取元素的宽度</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> div = <span class="built_in">document</span>.querySelector(<span class="string">'div'</span>);</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> w2 = div.offsetWidth;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> h2 = div.offsetHeight;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    div.style.left = (w1 - w2) / <span class="number">2</span> + <span class="string">'px'</span>;</span></span><br><span class="line"><span class="actionscript">    div.style.top = (h1 - h2) / <span class="number">2</span> + <span class="string">'px'</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h3 id="放大镜"><a href="#放大镜" class="headerlink" title="放大镜"></a>放大镜</h3><p>主要代码如下，mask是鼠标移动时跟着动的遮罩层，box3是右边出现的大图容器。bigPic是右边的大图：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line">box1.addEventListener(<span class="string">'mouseover'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    e = e.target</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> mask = <span class="built_in">document</span>.getElementById(<span class="string">'mask'</span>)</span><br><span class="line">    <span class="keyword">var</span> box3 = <span class="built_in">document</span>.getElementById(<span class="string">'box3'</span>)</span><br><span class="line">    <span class="keyword">var</span> bigPic = <span class="built_in">document</span>.getElementById(<span class="string">'bigPic'</span>)</span><br><span class="line"></span><br><span class="line">    box3.style.display = <span class="string">'block'</span></span><br><span class="line">    mask.style.display = <span class="string">'block'</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 右边的图片</span></span><br><span class="line">    <span class="keyword">if</span> (e.nodeName.toLowerCase() == <span class="string">'img'</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> num = e.src.split(<span class="string">'images/'</span>)[<span class="number">1</span>].split(<span class="string">'.'</span>)[<span class="number">0</span>]</span><br><span class="line">        box3.innerHTML = <span class="string">`&lt;li class="bigArr"&gt;&lt;img id="bigPic" src="images/<span class="subst">$&#123;num&#125;</span>.jpg" alt=""&gt;&lt;/li&gt;`</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 遮罩层的位置</span></span><br><span class="line">    box1.onmousemove = <span class="function"><span class="keyword">function</span> (<span class="params">evt</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> x = evt.clientX - box1.offsetLeft - mask.offsetWidth / <span class="number">2</span></span><br><span class="line">        <span class="keyword">var</span> y = evt.clientY - box1.offsetTop - mask.offsetHeight / <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> (x &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            x = <span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (x &gt;= box1.offsetWidth - mask.offsetWidth) &#123;</span><br><span class="line">            x = box1.offsetWidth - mask.offsetWidth</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (y &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            y = <span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (y &gt;= box1.offsetHeight - mask.offsetHeight) &#123;</span><br><span class="line">            y = box1.offsetHeight - mask.offsetHeight</span><br><span class="line">        &#125;</span><br><span class="line">        mask.style.left = x + <span class="string">'px'</span>;</span><br><span class="line">        mask.style.top = y + <span class="string">'px'</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 右边大图定位</span></span><br><span class="line">        <span class="keyword">var</span> x1 = -x * bigPic.offsetWidth / box1.offsetWidth</span><br><span class="line">        <span class="keyword">var</span> y1 = -y * bigPic.offsetHeight / box1.offsetHeight</span><br><span class="line">        bigPic.style.left = x1 + <span class="string">'px'</span>;</span><br><span class="line">        bigPic.style.top = y1 + <span class="string">'px'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;, <span class="literal">false</span>)</span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>javaScript</category>
      </categories>
  </entry>
  <entry>
    <title>数组的方法</title>
    <url>/jackhuang-haohua.github.io/2019/09/04/2020-04-%E6%95%B0%E7%BB%84%E7%9A%84%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>(未写完)<br>　关于JS数组的方法，很多文章都总结的很详细，比如<a href="https://www.cnblogs.com/xiaohuochai/p/5682621.html" target="_blank">小火柴的博客</a>，<a href="https://juejin.im/post/5b0903b26fb9a07a9d70c7e0" target="_blank">掘金上的文章</a>；<br>　虽然每篇文章都看过好几遍，但是这么多好难记住……<br>　所以这篇文章只是记录一下工作中，用到的一些数组的方法。<br>55555</p>
<h3 id="1、slice拷贝数组"><a href="#1、slice拷贝数组" class="headerlink" title="1、slice拷贝数组"></a>1、slice拷贝数组</h3><p>在react的redux中，更改数据并不是直接更改原本的数据，而是返回一个新数据，新/旧数据的地址不能相同，不然数据无法更新，<br>比如在reducer中：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> todolist = <span class="function">(<span class="params">prevState = state,action</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> new_state=&#123;...prevState&#125;</span><br><span class="line">    <span class="keyword">switch</span>(action.type)&#123;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">case</span> ADD_TODO:</span><br><span class="line">            <span class="comment">// 这里使用slice拷贝数组</span></span><br><span class="line">            new_state.todos = new_state.todos.slice()</span><br><span class="line">            new_state.todos.push(...)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> DEL_TODO:</span><br><span class="line">            new_state.todos = new_state.todos.slice()</span><br><span class="line">            new_state.todos=handler.changeDel(new_state.todos,action.id)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> new_state</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>【1】map 映射数组<br>    arr.map(function(items,index,arr){<br>        return 你的操作<br>    })<br>    items：原始数组中的每一个元素<br>    index：每一个元素的索引<br>    arr:原始数组<br>    执行次数：原始数组的长度<br>    返回值： 一个被你操作之后的新数组（跟原始数组的长度一样）</p>
<p>【2】forEach() 遍历数组<br>    arr.forEach(function(items,index,arr    ){</p>
<pre><code>})
没有返回值
不能随时终止或者跳过循环
不需要知道循环的次数</code></pre><p>【3】filter() 过滤的<br>    arr.filter(function(items,index,arr){<br>        return 你的条件<br>    })<br>    返回值：根据你的条件过滤出的数据组成的数组<br>【4】some()<br>    arr.some(function(){<br>        return 你的条件<br>    })<br>    返回值：布尔值（true 或者 false）<br>        如果数组中有其中一个元素满足条件就返回true，<br>        所有的都不满足条件就返回false<br>【5】every()<br>    arr.every(function(){<br>        return 你的条件<br>    })<br>    返回值：布尔值()<br>        当数组中所有元素都满足条件的时候才会返回 true<br>        如果有其中一个不满条件就会返回 false  </p>
]]></content>
      <categories>
        <category>javaScript</category>
      </categories>
  </entry>
  <entry>
    <title>正则表达式</title>
    <url>/jackhuang-haohua.github.io/2019/09/04/2020-04-%E6%AD%A3%E5%88%99/</url>
    <content><![CDATA[<h1 id="正则"><a href="#正则" class="headerlink" title="正则"></a>正则</h1><blockquote>
<p>正则表达式，又名 “规则表达式”，专门用来检测 <strong>字符串</strong> 是否符合 “规则” </p>
</blockquote>
<h2 id="创建一个正则表达式"><a href="#创建一个正则表达式" class="headerlink" title="创建一个正则表达式"></a>创建一个正则表达式</h2><p>把一些字母和符号写在 <code>//</code> 中间的东西，叫做正则表达式，比如 <code>/abcdefg/</code></p>
<ol>
<li>字面量创建：<code>var reg = /abcdefg/</code></li>
<li>构造函数创建：<code>var reg = new RegExp(&#39;abcdefg&#39;)</code></li>
</ol>
<h2 id="基本规则"><a href="#基本规则" class="headerlink" title="基本规则"></a>基本规则</h2><p>正则表达式里面涉及到的一些符号</p>
<h3 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h3><ul>
<li><code>.</code> ： 匹配非换行的任意字符</li>
<li><code>\</code> ： 转译符号</li>
<li><code>\s</code> ： 匹配空白字符（空格/制表符/…）</li>
<li><code>\S</code> ： 匹配非空白字符</li>
<li><code>\d</code> ： 匹配数字</li>
<li><code>\D</code> ： 匹配非数字</li>
<li><code>\w</code> ： 匹配数字字母下划线</li>
<li><code>\W</code> ： 匹配非数字字母下划线</li>
</ul>
<p>举一些例子：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/\s/</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">'a b'</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.test(str)) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/\d/</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">'abc1'</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.test(str)) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/\w/</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">'a1'</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.test(str)) <span class="comment">// true</span></span><br></pre></td></tr></table></figure></div>

<h3 id="限定符"><a href="#限定符" class="headerlink" title="限定符"></a>限定符</h3><ul>
<li><code>*</code> ： 前一个内容重复至少 0 次，也就是可以出现 <strong>0 ～ 正无穷</strong> 次</li>
<li><code>+</code> ： 前一个内容重复至少 1 次，也就是可以出现 <strong>1 ～ 正无穷</strong> 次</li>
<li><code>?</code> ： 前一个内容重复 0 或者 1 次，也就是可以出现 <strong>0 ～ 1</strong> 次</li>
<li><code>{n}</code> ： 前一个内容重复 n 次，也就是必须出现 <strong>n</strong> 次</li>
<li><code>{n,}</code> ： 前一个内容至少出现 n 次，也就是出现 <strong>n ～ 正无穷</strong> 次</li>
<li><code>{n,m}</code> ： 前一个内容至少出现 n 次至多出现 m 次，也就是出现 <strong>n ～ m</strong> 次</li>
</ul>
<p>限定符配合元字符使用：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 下面正则表示验证数字出现 0 ～ 正无穷次都可以</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/\d*/</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">'abc'</span></span><br><span class="line"><span class="keyword">var</span> str2 = <span class="string">'abc1'</span></span><br><span class="line"><span class="keyword">var</span> str3 = <span class="string">'abc123'</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.test(str)) <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.test(str2)) <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.test(str3)) <span class="comment">// true</span></span><br></pre></td></tr></table></figure></div>

<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 下面正则表示验证数字出现 3 ～ 正无穷次</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/\d&#123;3,&#125;/</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">'abc'</span></span><br><span class="line"><span class="keyword">var</span> str2 = <span class="string">'abc1'</span></span><br><span class="line"><span class="keyword">var</span> str3 = <span class="string">'abc123'</span></span><br><span class="line"><span class="keyword">var</span> str4 = <span class="string">'abcd1234567'</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.test(str)) <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.test(str2)) <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.test(str3)) <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.test(str4)) <span class="comment">// true</span></span><br></pre></td></tr></table></figure></div>

<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 下面正则表示验证数字只能出现 3 ～ 5 次</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/\d&#123;3,5&#125;/</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">'abc'</span></span><br><span class="line"><span class="keyword">var</span> str2 = <span class="string">'abc1'</span></span><br><span class="line"><span class="keyword">var</span> str3 = <span class="string">'abc123'</span></span><br><span class="line"><span class="keyword">var</span> str4 = <span class="string">'abc12345'</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.test(str)) <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.test(str2)) <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.test(str3)) <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.test(str4)) <span class="comment">// true</span></span><br></pre></td></tr></table></figure></div>

<h3 id="边界符"><a href="#边界符" class="headerlink" title="边界符"></a>边界符</h3><ul>
<li><code>^</code> ： 表示开头</li>
<li><code>$</code> ： 表示结尾</li>
</ul>
<p>边界符用来限定字符串的开始和结束：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 下面表示从开头到结尾只能有数字，并且出现 3 ～ 5 次</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^\d&#123;3,5&#125;$/</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">'abc'</span></span><br><span class="line"><span class="keyword">var</span> str2 = <span class="string">'abc123'</span></span><br><span class="line"><span class="keyword">var</span> str3 = <span class="string">'1'</span></span><br><span class="line"><span class="keyword">var</span> str4 = <span class="string">'1234567'</span></span><br><span class="line"><span class="keyword">var</span> str5 = <span class="string">'123'</span></span><br><span class="line"><span class="keyword">var</span> str6 = <span class="string">'12345'</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.test(str)) <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.test(str2)) <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.test(str3)) <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.test(str4)) <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.test(str5)) <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.test(str6)) <span class="comment">// true</span></span><br></pre></td></tr></table></figure></div>

<h3 id="特殊符号"><a href="#特殊符号" class="headerlink" title="特殊符号"></a>特殊符号</h3><ul>
<li><code>()</code> ： 限定一组元素</li>
<li><code>[]</code> ： 字符集合，表示写在 <code>[]</code> 里面的任意一个都行</li>
<li><code>[^]</code> ： 反字符集合，表示写在 <code>[^]</code> 里面之外的任意一个都行</li>
<li><code>-</code> ： 范围，比如 <code>a-z</code> 表示从字母 a 到字母 z 都可以</li>
<li><code>|</code> ： 或，正则里面的或 <code>a|b</code> 表示字母 a 或者 b 都可以</li>
</ul>
<p>可以把若干符号组合在一起使用：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 下面是一个简单的邮箱验证</span></span><br><span class="line"><span class="comment">// 非_$开头，任意字符出现至少6次，一个@符号，(163|126|qq|sina)中的任意一个，一个点，(com|cn|net)中的任意一个</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^[^_$].&#123;6,&#125;@(163|126|qq|sina)\.(com|cn|net)$/</span></span><br></pre></td></tr></table></figure></div>

<h3 id="标示符"><a href="#标示符" class="headerlink" title="标示符"></a>标示符</h3><p>加在表达式最后面；</p>
<ul>
<li><code>i</code> ： 表示忽略大小写，例如<code>/\w/i</code></li>
<li><code>g</code> ： 表示全局匹配，例如<code>/\w/g</code></li>
</ul>
<h2 id="正则表达式的方法"><a href="#正则表达式的方法" class="headerlink" title="正则表达式的方法"></a>正则表达式的方法</h2><p>　正则提供了一些方法给我们使用，比如检测和捕获字符串中的内容</p>
<h3 id="test"><a href="#test" class="headerlink" title="test"></a>test</h3><p><code>test</code> 是用来检测字符串是否符合我们正则的标准</p>
<ul>
<li>语法： <code>正则.test(字符串)</code></li>
<li>返回值： boolean</li>
<li><code>console.log(/\d+/.test(&#39;123&#39;))</code> =&gt; true</li>
</ul>
<h3 id="exec"><a href="#exec" class="headerlink" title="exec"></a>exec</h3><p><code>exec</code> 是把字符串中符合条件的内容捕获出来</p>
<ul>
<li>语法： <code>正则.exec(字符串)</code></li>
<li>返回值： 把字符串中符合正则要求的第一项以及一些其他信息，以数组的形式返回</li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/\d&#123;3&#125;/</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">'hello123world456你好789'</span></span><br><span class="line"><span class="keyword">var</span> res = reg.exec(str)</span><br><span class="line"><span class="built_in">console</span>.log(res)</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">["123", index: 5, input: "hello123world456你好789", groups: undefined]</span></span><br><span class="line"><span class="comment">    0: "123"</span></span><br><span class="line"><span class="comment">    groups: undefined</span></span><br><span class="line"><span class="comment">    index: 5</span></span><br><span class="line"><span class="comment">    input: "hello123world456你好789"</span></span><br><span class="line"><span class="comment">    length: 1</span></span><br><span class="line"><span class="comment">    __proto__: Array(0)</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></div>


<h2 id="字符串的方法"><a href="#字符串的方法" class="headerlink" title="字符串的方法"></a>字符串的方法</h2><p>　字符串中有一些方法也可以和正则一起使用</p>
<h3 id="search"><a href="#search" class="headerlink" title="search"></a>search</h3><p><code>search</code> 是查找字符串中是否有满足正则条件的内容</p>
<ul>
<li>语法： <code>字符串.search(正则)</code></li>
<li>返回值 ： 有的话返回开始索引，没有返回-1</li>
</ul>
<h3 id="match"><a href="#match" class="headerlink" title="match"></a>match</h3><p><code>match</code> 找到字符串中符合正则条件的内容返回</p>
<ul>
<li>语法： <code>字符串.match(正则)</code></li>
<li>返回值 ： <ul>
<li>没有标示符 g 的时候，和 exec 方法一样</li>
<li>有标示符 g 的时候，是返回一个数组，里面是匹配到的每一项</li>
</ul>
</li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/\d&#123;3&#125;/</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">'hello123world456'</span></span><br><span class="line"><span class="built_in">console</span>.log(str.match(reg)) </span><br><span class="line"><span class="comment">// ["123", index: 5, input: "hello123wor456", groups: undefined]</span></span><br></pre></td></tr></table></figure></div>

<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/\d&#123;3&#125;/g</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">'hello123world456'</span></span><br><span class="line"><span class="keyword">var</span> str2 = <span class="string">'hello'</span></span><br><span class="line"><span class="built_in">console</span>.log(str.match(reg)) </span><br><span class="line"><span class="comment">// ["123", "456"]</span></span><br></pre></td></tr></table></figure></div>

<h3 id="replace"><a href="#replace" class="headerlink" title="replace"></a>replace</h3><p><code>replace</code> 是将字符串中满足正则条件的字符串替换掉</p>
<ul>
<li>语法： <code>字符串.replace(正则，要替换的字符串)</code></li>
<li>返回值 ： 替换后的字符串<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/\d&#123;3&#125;/</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">'hello123world456'</span></span><br><span class="line"><span class="keyword">var</span> str2 = <span class="string">'hello'</span></span><br><span class="line"><span class="built_in">console</span>.log(str.replace(reg)) <span class="comment">// hello666world456</span></span><br><span class="line"><span class="built_in">console</span>.log(str2.replace(reg)) <span class="comment">// hello</span></span><br></pre></td></tr></table></figure></div>

</li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/\d&#123;3&#125;/g</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">'hello123world456'</span></span><br><span class="line"><span class="keyword">var</span> str2 = <span class="string">'hello'</span></span><br><span class="line"><span class="built_in">console</span>.log(str.replace(reg)) <span class="comment">// hello666world666</span></span><br><span class="line"><span class="built_in">console</span>.log(str2.replace(reg)) <span class="comment">// hello</span></span><br></pre></td></tr></table></figure></div>

<h2 id="常见正则"><a href="#常见正则" class="headerlink" title="常见正则"></a>常见正则</h2><ol>
<li>Email地址：<code>^\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$</code></li>
<li>域名：<code>[a-zA-Z0-9][-a-zA-Z0-9]{0,62}(/.[a-zA-Z0-9][-a-zA-Z0-9]{0,62})+/.?</code></li>
<li>InternetURL：<code>[a-zA-z]+://[^\s]* 或 ^http://([\w-]+\.)+[\w-]+(/[\w-./?%&amp;=]*)?$</code></li>
<li>手机号码：<code>^(13[0-9]|14[5|7]|15[0|1|2|3|5|6|7|8|9]|18[0|1|2|3|5|6|7|8|9])\d{8}$</code></li>
<li>电话号码(“XXX-XXXXXXX”、”XXXX-XXXXXXXX”、”XXX-XXXXXXX”、”XXX-XXXXXXXX”、”XXXXXXX”和”XXXXXXXX)：<code>^(\(\d{3,4}-)|\d{3.4}-)?\d{7,8}$</code></li>
<li>国内电话号码(0511-4405222、021-87888822)：<code>\d{3}-\d{8}|\d{4}-\d{7}</code></li>
<li>身份证号(15位、18位数字)：<code>^\d{15}|\d{18}$</code></li>
<li>密码(以字母开头，长度在6~18之间，只能包含字母、数字和下划线)：<code>^[a-zA-Z]\w{5,17}$</code></li>
<li>强密码(必须包含大小写字母和数字的组合，不能使用特殊字符，长度在8-10之间)：<code>^(?=.*\d)(?=.*[a-z])(?=.*[A-Z]).{8,10}$</code></li>
<li>日期格式：<code>^\d{4}-\d{1,2}-\d{1,2}</code></li>
<li>一年的12个月(01～09和1～12)：<code>^(0?[1-9]|1[0-2])$</code></li>
<li>一个月的31天(01～09和1～31)：<code>^((0?[1-9])|((1|2)[0-9])|30|31)$</code></li>
<li>腾讯QQ号：<code>[1-9][0-9]{4,}</code> (腾讯QQ号从10000开始)</li>
<li>中国邮政编码：<code>[1-9]\d{5}(?!\d)</code> (中国邮政编码为6位数字)</li>
<li>IP地址：<code>\d+\.\d+\.\d+\.\d+</code> (提取IP地址时有用)</li>
<li>IP地址：<code>((?:(?:25[0-5]|2[0-4]\\d|[01]?\\d?\\d)\\.){3}(?:25[0-5]|2[0-4]\\d|[01]?\\d?\\d))</code></li>
</ol>
]]></content>
      <categories>
        <category>javaScript</category>
      </categories>
  </entry>
  <entry>
    <title>mock接口</title>
    <url>/jackhuang-haohua.github.io/2019/05/11/2020-04-%E5%89%8D%E7%AB%AF%E6%A8%A1%E6%8B%9F%E6%95%B0%E6%8D%AE/</url>
    <content><![CDATA[<p>有时候后端接口还没写完，我们前端也不能不干活啊，这时可以用一些工具来模拟接口；</p>
<h2 id="json-server"><a href="#json-server" class="headerlink" title="json-server"></a>json-server</h2><p>把json格式的数据开启为端口，本地必须有一个js格式的文件，文件里面有json格式的数据；</p>
<p><strong>安装json-server</strong><br>如果 npm i json-server -S<br>如果卡了就换成淘宝源 npm config set registry <a href="https://registry.npm.taobao.org" target="_blank" rel="noopener">https://registry.npm.taobao.org</a><br>如果显示”json-server 不是外部命令或请求”，则需要配置npm的path<br>利用mock做的todolist（react请求）<br>json-server data.json –port 4000 -w</p>
<p><a href="https://www.cnblogs.com/fly_dragon/p/9150732.html" target="_blank">详细规则看这里</a></p>
<h2 id="rap2"><a href="#rap2" class="headerlink" title="rap2"></a>rap2</h2><p>阿里开源的线上模拟接口，<a href="http://rap2.taobao.org/repository/editor?id=251920" target="_blank">点击这里进入官网</a>；<br>可以模拟多种多样的数据，基本上能想到的他都有，可以看文档有很多的规则；<br>比如下图，随机人名，随机时间戳，随机文本内容：<br><img src="https://s1.ax1x.com/2020/05/20/Y7Dt5q.png" alt="Y7Dt5q.png"></p>
]]></content>
      <categories>
        <category>node</category>
      </categories>
  </entry>
  <entry>
    <title>VUE组件之间的通信</title>
    <url>/jackhuang-haohua.github.io/2019/05/03/2020-04-vue-%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1/</url>
    <content><![CDATA[<h1 id="一、组件之间如何通信的"><a href="#一、组件之间如何通信的" class="headerlink" title="一、组件之间如何通信的"></a>一、组件之间如何通信的</h1><h2 id="①props-父-gt-子"><a href="#①props-父-gt-子" class="headerlink" title="①props 父=&gt;子"></a>①props 父=&gt;子</h2><p>　　父组件可以通过v-bind来为子组件传递数据，当父组件的数据改变的时候，子组件接收到的数据也会改变；子组件不要直接更改父组件的值，可以自己复制一份出来<br>　　为什么组件中的data必须是一个函数返回对象的形式？<br>　　目的是让每一个实例可以维护一份被返回对象的独立的拷贝 （每个组件使用到的数据地址不一样）<br>　　内部必须要返回一个对象的写法，这样就可以保证每个组件里面用到的数据对象都是唯一的。<br>　　组件之间的作用域是相互独立的，组件的数据默认只能组件的模板里面使用。<br>　　下面案例中，若传递 :sky-blue ，后面要用skyBlue接收：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">father</span>&gt;</span><span class="tag">&lt;/<span class="name">father</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"father"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">son</span> <span class="attr">:sky</span>=<span class="string">"sky"</span>&gt;</span><span class="tag">&lt;/<span class="name">son</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"son"</span>&gt;</span><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">"#app"</span>,</span></span><br><span class="line">        components: &#123;</span><br><span class="line">            father: &#123;</span><br><span class="line"><span class="actionscript">                template: <span class="string">"#father"</span>,</span></span><br><span class="line">                data() &#123;</span><br><span class="line"><span class="actionscript">                    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">                        sky: <span class="string">"sky"</span></span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line"><span class="actionscript">                components: &#123; <span class="comment">//声明父组件的子组件</span></span></span><br><span class="line">                    son: &#123;</span><br><span class="line"><span class="actionscript">                        template: <span class="string">"#son"</span>,</span></span><br><span class="line"><span class="actionscript">                        props: [<span class="string">"sky"</span>], <span class="comment">//接收父组件传递来的数据</span></span></span><br><span class="line">                        data() &#123;</span><br><span class="line"><span class="actionscript">                                <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">                                    color: <span class="keyword">this</span>.sky</span></span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;,</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h2 id="②事件传递-子-gt-父"><a href="#②事件传递-子-gt-父" class="headerlink" title="②事件传递 子=&gt;父"></a>②事件传递 子=&gt;父</h2><ul>
<li>1.子组件有一个数据msg，一个方法say，</li>
<li>2.定义子组件时绑定方法 @click=”say”，</li>
<li>3.接着触发say里的 this.$emit(“change”,this.msg) ，表示触发change方法并携带参数msg</li>
<li>4.调用子组件时绑定方法 @change=”changeMsg”，由于change上面已经触发了，就会触发changeMsg，并获得参数</li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">&lt;template id&#x3D;&quot;father&quot;&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;son @change&#x3D;&quot;changeMsg&quot;&gt;&lt;&#x2F;son&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;template id&#x3D;&quot;son&quot;&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;button @click&#x3D;&quot;say&quot;&gt;click&lt;&#x2F;button&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">Vue.component(&quot;father&quot;, &#123;</span><br><span class="line">        template: &quot;#father&quot;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            changeMsg(msg) &#123;</span><br><span class="line">                console.log(msg); &#x3D;&gt; &quot;今天很舒服&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">Vue.component(&quot;son&quot;, &#123;</span><br><span class="line">    template: &quot;#son&quot;,</span><br><span class="line">    props: [&quot;change&quot;],</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            msg: &quot;今天很舒服&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        say() &#123;</span><br><span class="line">            this.$emit(&quot;change&quot;, this.msg)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div>

<h2 id="③-root-parent-children，或ref标记"><a href="#③-root-parent-children，或ref标记" class="headerlink" title="③$root/$parent/$children，或ref标记"></a>③$root/$parent/$children，或ref标记</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"father"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bbb</span> <span class="attr">ref</span>=<span class="string">"s"</span>&gt;</span><span class="tag">&lt;/<span class="name">bbb</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"son"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    Vue.component(<span class="string">"son"</span>, &#123;</span></span><br><span class="line"><span class="actionscript">        template: <span class="string">"#son"</span>,</span></span><br><span class="line">        data() &#123;</span><br><span class="line"><span class="actionscript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">                msg: <span class="string">"hello"</span></span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    Vue.component(<span class="string">"father"</span>, &#123;</span></span><br><span class="line"><span class="actionscript">        template: <span class="string">"#father"</span>,</span></span><br><span class="line">        methods: &#123;</span><br><span class="line"><span class="javascript">            <span class="keyword">get</span>() &#123;</span></span><br><span class="line"><span class="actionscript">                <span class="comment">// this.$children[0].msg  // 1、可以通过关系链（viewModel）去实现</span></span></span><br><span class="line"><span class="actionscript">                <span class="keyword">this</span>.$refs.s.msg <span class="comment">// 2、ref.b 即为 bbb组件</span></span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">"#app"</span></span></span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h2 id="④event-bus"><a href="#④event-bus" class="headerlink" title="④event-bus"></a>④event-bus</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">//1.创建一个公共的vue的实例 middle</span></span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> middle = <span class="keyword">new</span> Vue()</span></span><br><span class="line"><span class="actionscript">    Vue.component(<span class="string">'big-brother'</span>, &#123;</span></span><br><span class="line"><span class="actionscript">        template: <span class="string">'#big-brother'</span>,</span></span><br><span class="line">        data()&#123;</span><br><span class="line"><span class="actionscript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">                msg:<span class="string">'data'</span></span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line">            hitLittel()&#123;</span><br><span class="line"><span class="actionscript">                <span class="comment">//3.触发middle上的event1，并传参</span></span></span><br><span class="line"><span class="actionscript">                middle.$emit(<span class="string">"event1"</span>,<span class="keyword">this</span>.msg)</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="actionscript">    Vue.component(<span class="string">'littel-brother'</span>, &#123;</span></span><br><span class="line"><span class="actionscript">        template: <span class="string">'#littel-brother'</span>,</span></span><br><span class="line"><span class="actionscript">        mounted()&#123; <span class="comment">//生命周期钩子函数</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">//2.给middle绑定事件event1</span></span></span><br><span class="line"><span class="actionscript">            middle.$on(<span class="string">"event1"</span>,msg =&gt; &#123;</span></span><br><span class="line"><span class="actionscript">                <span class="comment">// 得到msg</span></span></span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="actionscript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el:<span class="string">"#app"</span></span></span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h2 id="⑤-attrs-listeners"><a href="#⑤-attrs-listeners" class="headerlink" title="⑤$attrs / $listeners"></a>⑤$attrs / $listeners</h2><p>　　$attrs：包含了父作用域中不被 prop 所获取)的特性绑定 (class 和 style 除外)。当一个组件没有声明任何 prop 时，这里会包含所有父作用域的绑定，并且可以通过 v-bind=”$attrs” 传入孙组件。通常配合 inheritAttrs 选项一起使用。<br>　　父组件在调用子组件时绑定了属性ABC，子组件的this.$attrs会包含ABC；<br>　　当子组件inheritAttrs:false，且用props接收属性A，this.$attrs里就只有BC<br>　　$listeners：包含了父作用域中的 (不含 .native 修饰器的) v-on 事件监听器。它可以通过 v-on=”$listeners” 传入内部组件</p>
<h2 id="⑥provide-inject"><a href="#⑥provide-inject" class="headerlink" title="⑥provide/inject"></a>⑥provide/inject</h2><p>不怎么用到，就没总结</p>
<h2 id="⑦vuex"><a href="#⑦vuex" class="headerlink" title="⑦vuex"></a>⑦vuex</h2><p>后面在项目里再总结</p>
]]></content>
      <categories>
        <category>vue</category>
      </categories>
  </entry>
  <entry>
    <title>项目部署到阿里云</title>
    <url>/jackhuang-haohua.github.io/2019/07/22/2020-04-%E9%A1%B9%E7%9B%AE%E4%B8%8A%E7%BA%BF/</url>
    <content><![CDATA[<h2 id="一、配置阿里云服务器"><a href="#一、配置阿里云服务器" class="headerlink" title="一、配置阿里云服务器"></a>一、配置阿里云服务器</h2><h3 id="1、买服务器"><a href="#1、买服务器" class="headerlink" title="1、买服务器"></a>1、买服务器</h3><p>参数：Centos(linux系统) 64位 7.6</p>
<h3 id="2、更改实例密码"><a href="#2、更改实例密码" class="headerlink" title="2、更改实例密码"></a>2、更改实例密码</h3><ul>
<li>①登录<a href="https://www.aliyun.com/?spm=5176.12901015.0.i12901015.7b7b525cFZq6b9" target="_blank">阿里云</a></li>
<li>②进入控制台=&gt;云服务器ESC=&gt;点击下面的实例ID=&gt;更多=&gt;重置实例密码=&gt;重启实例</li>
</ul>
<h3 id="3、配置安全组"><a href="#3、配置安全组" class="headerlink" title="3、配置安全组"></a>3、配置安全组</h3><ul>
<li>①控制台=&gt;云服务器ESC=&gt;点击下面的实例ID=&gt;本实例安全组=&gt;配置规则=&gt;添加安全组规则</li>
<li>②端口范围 1/60000 ；表示允许创建的端口范围，比如mongo的27017</li>
<li>③授权对象 0.0.0.0/0 ；表示允许所有IP访问</li>
</ul>
<h3 id="4、连接服务器"><a href="#4、连接服务器" class="headerlink" title="4、连接服务器"></a>4、连接服务器</h3><p>方法一：进入控制台=&gt;云服务ESC=&gt;点击下面的实例ID=&gt;远程连接<br>方法二：</p>
<ul>
<li>①cmd 或者 git</li>
<li>②<code>ssh root@47.104.70.xx</code></li>
<li>③输入密码，回车；提示Welcome表示成功</li>
</ul>
<h2 id="二、安装node"><a href="#二、安装node" class="headerlink" title="二、安装node"></a>二、安装node</h2><ul>
<li>①连接</li>
<li>②cd /</li>
<li>③<code>sudo yum install nodejs</code> =&gt; <code>node -v</code> 查看版本</li>
<li>④安装稳定版：<code>npm install -g n</code> =&gt; <code>n stable</code></li>
<li>⑤重新打开git</li>
</ul>
<h2 id="三、安装nginx"><a href="#三、安装nginx" class="headerlink" title="三、安装nginx"></a>三、安装nginx</h2><h3 id="安装依赖库"><a href="#安装依赖库" class="headerlink" title="安装依赖库"></a>安装依赖库</h3><p>参考<a href="https://www.linuxidc.com/Linux/2016-09/134907.htm" target="_blank">这篇博客</a></p>
<ul>
<li>①<code>yum install gcc-c++</code></li>
<li>②<code>yum install -y pcre pcre-devel</code></li>
<li>③<code>yum install -y zlib zlib-devel</code></li>
<li>④<code>yum install -y openssl openssl-devel</code></li>
</ul>
<h3 id="安装到服务器"><a href="#安装到服务器" class="headerlink" title="安装到服务器"></a>安装到服务器</h3><ul>
<li>①<a href="https://nginx.org/en/download.html" target="_blank">下载nginx</a>，我下载的是“nginx-1.10.3.tar.gz”</li>
<li>②windows需要FlashFXP连接服务器 =&gt; 打开FlashFXP.exe =&gt; 快速连接<br><img src="https://s1.ax1x.com/2020/04/27/JRGAjU.png" alt="JRGAjU.png"></li>
<li>③右边窗口 =&gt; 进入根目录 =&gt; 新建文件夹software =&gt; 传输“nginx-1.10.3.tar.gz” (左边窗口是本地目录，右边窗口是服务器目录)</li>
<li>④黑窗口 =&gt; cd software =&gt; <code>cd software tar -zxvf nginx-1.10.3.tar.gz</code>，此时software里多了个nginx-1.10.3文件夹，表示解压成功</li>
<li>⑤<code>cd nginx-1.10.3</code></li>
<li>⑥<code>./ configure</code> 执行默认配置</li>
<li>⑦<code>make</code> =&gt; <code>make install</code></li>
<li>⑧<code>whereis nginx</code>，显示“nginx：/usr/local/nginx”，表示安装成功</li>
</ul>
<h3 id="启动-停止-重启"><a href="#启动-停止-重启" class="headerlink" title="启动/停止/重启"></a>启动/停止/重启</h3><ul>
<li>①<code>cd /usr/local/nginx/sbin</code></li>
<li>②<code>./nginx</code>启动</li>
<li>③<code>./nginx -s stop</code>停止</li>
<li>④<code>./nginx -s reload</code>重启 (每次nginx配置文件更改后都需要重启)</li>
<li>⑤此时浏览器访问”47.104.70.xx”，就是/usr/local/nginx/html 下的内容</li>
<li>注意，每次发现服务器连不上了，第一步都要试试重启nginx</li>
</ul>
<h3 id="自动启动nginx"><a href="#自动启动nginx" class="headerlink" title="自动启动nginx"></a>自动启动nginx</h3><ul>
<li>①<code>cd /usr/local/nginx/sbin</code></li>
<li>②<code>vi /etc/rc.local</code>(进入文件)</li>
<li>③编辑这个文件：i(insert插入) =&gt; 键盘下键 =&gt; 最后一行增加”/usr/local/nginx/sbin/nginx” =&gt; Esc =&gt; :wq!(保存并退出) =&gt; <code>cat /etc/rc.local</code>(查看文件)</li>
</ul>
<h2 id="三、安装MongoDB"><a href="#三、安装MongoDB" class="headerlink" title="三、安装MongoDB"></a>三、安装MongoDB</h2><p><a href="https://www.cnblogs.com/web424/p/6928992.html" target="_blank">参考这篇博客</a> </p>
<h3 id="添加源文件"><a href="#添加源文件" class="headerlink" title="添加源文件"></a>添加源文件</h3><ul>
<li>①<code>cd /</code> =&gt; <code>vim /etc/yum.repos.d/mongodb-org-3.4.repo</code>(创建源文件)</li>
<li>②源文件中添加<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">[mongodb-org-3.4]  </span><br><span class="line">name&#x3D;MongoDB Repository  </span><br><span class="line">baseurl&#x3D;https:&#x2F;&#x2F;repo.mongodb.org&#x2F;yum&#x2F;redhat&#x2F;$releasever&#x2F;mongodb-org&#x2F;3.4&#x2F;x86_64&#x2F;  </span><br><span class="line">gpgcheck&#x3D;1  </span><br><span class="line">enabled&#x3D;1  </span><br><span class="line">gpgkey&#x3D;https:&#x2F;&#x2F;www.mongodb.org&#x2F;static&#x2F;pgp&#x2F;server-3.4.asc&quot;</span><br></pre></td></tr></table></figure></div>

</li>
</ul>
<h3 id="安装mongo"><a href="#安装mongo" class="headerlink" title="安装mongo"></a>安装mongo</h3><ul>
<li>①<code>yum -y install mongodb-org</code></li>
<li>②<code>whereis mongod</code>查看是否安装</li>
<li>启动mongodb ：<code>systemctl start mongod.service</code></li>
<li>停止mongodb ：<code>systemctl stop mongod.service</code></li>
<li>查看mongodb的状态：<code>systemctl status mongod.service</code></li>
</ul>
<h3 id="防火墙与开机自启动"><a href="#防火墙与开机自启动" class="headerlink" title="防火墙与开机自启动"></a>防火墙与开机自启动</h3><ul>
<li>停止firewall：<code>systemctl stop firewalld.service</code> </li>
<li>禁止firewall开机启动：<code>systemctl disable firewalld.service</code> </li>
<li>设置开机启动mongo：<code>systemctl enable mongod.service</code></li>
</ul>
<h3 id="设置mongodb可访问地址："><a href="#设置mongodb可访问地址：" class="headerlink" title="设置mongodb可访问地址："></a>设置mongodb可访问地址：</h3><p>编辑mongod.conf注释bindIp,并重启mongodb；</p>
<ul>
<li><code>vim /etc/mongod.conf</code> =&gt; i =&gt; 上下键找到bindIp，在前面添加”#”表示注释 =&gt; esc退出 =&gt; <code>:wq!</code>保存并退出 =&gt; <code>cat /etc/mongod.conf</code>查看文件</li>
<li>重启mongodb：<code>systemctl restart mongod.service</code></li>
</ul>
<p><img src="https://s1.ax1x.com/2020/04/27/JRYeYR.png" alt="JRYeYR.png"></p>
<h3 id="访问远程mongo"><a href="#访问远程mongo" class="headerlink" title="访问远程mongo"></a>访问远程mongo</h3><p>黑窗口<code>mongo 47.104.70.xx:27017</code></p>
<h2 id="四、将node接口部署到线上"><a href="#四、将node接口部署到线上" class="headerlink" title="四、将node接口部署到线上"></a>四、将node接口部署到线上</h2><h3 id="测试接口"><a href="#测试接口" class="headerlink" title="测试接口"></a>测试接口</h3><p>之前用node+express写过一个接口，现在先启动<code>npm start</code>，连接mongo<code>mongo</code>，postman测试一下能不能用；</p>
<h3 id="安装到线上"><a href="#安装到线上" class="headerlink" title="安装到线上"></a>安装到线上</h3><ul>
<li>FlashFXP.exe =&gt; 快速连接(之前连接过的话有历史记录)</li>
<li>③右边窗口 =&gt; 进入根目录 =&gt; 新建文件夹node-pro =&gt; 把下面的文件传输到node-pro(注意node_modules不用传输)<br><img src="https://s1.ax1x.com/2020/04/27/JfujFP.png" alt="JfujFP.png"></li>
<li>安装node_modules:进入node-pro文件夹，<code>npm i</code></li>
<li>安装nodemon，<code>npm i nodemon -g</code></li>
<li>启动：<code>npm start</code><br>此时”http:// 47.104.70.xx:3000”就能访问到接口了，但是黑窗口一关闭就无法访问，所有要让接口自动挂起</li>
</ul>
<h3 id="自动挂起服务"><a href="#自动挂起服务" class="headerlink" title="自动挂起服务"></a>自动挂起服务</h3><p>使用pm2挂起,</p>
<ul>
<li>进入node-pro文件夹</li>
<li>安装，<code>npm i pm2 -g</code></li>
<li>查看pm2列表，<code>pm2 list</code></li>
<li>启动服务ID，`pm2 start ./bin/www –name “接口名称”</li>
<li>停止服务ID，<code>pm2 stop 0</code></li>
<li>删除服务ID，<code>pm2 delete 0</code> </li>
<li>重启服务ID，<code>pm2 restart</code></li>
</ul>
<h3 id="测试线上接口"><a href="#测试线上接口" class="headerlink" title="测试线上接口"></a>测试线上接口</h3><p>现在随时可以访问node-pro里面的接口了；我们还可以直接把数据放到线上数据库里：</p>
<ul>
<li><code>mongo 47.104.70.xx:27017</code>连接线上数据库</li>
<li>newsapp库下的user表，包含用户信息：<code>show dbs</code> =&gt; <code>use newsapp</code> =&gt; <code>db.getCollectionNames</code> =&gt; <code>db.user.find()</code> =&gt; 注册之后user里面就有用户信息了</li>
<li>现在我们创建home表，导入文章信息：<code>db.createCollection(&quot;home&quot;)</code> =&gt; <code>db.home.insert([数据])</code> =&gt; 提示“BulkWriteResult({插入信息})” =&gt; <code>db.home.find()</code>查看home表</li>
</ul>
<h2 id="五、项目上线"><a href="#五、项目上线" class="headerlink" title="五、项目上线"></a>五、项目上线</h2><ul>
<li>FlashFXP.exe =&gt; 把打包好的项目文件传到”/usr/local/nginx/html”</li>
</ul>
<h3 id="配置代理"><a href="#配置代理" class="headerlink" title="配置代理"></a>配置代理</h3><p>①vue项目中是在vue.config.js里配置代理，但是上线后下面的配置就没用了：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    open: <span class="literal">true</span>, <span class="comment">// 默认开启浏览器</span></span><br><span class="line">    port: <span class="number">8000</span>, <span class="comment">// 更改默认端口号为8000</span></span><br><span class="line">    <span class="comment">// 代理配置</span></span><br><span class="line">    proxy: &#123;</span><br><span class="line">      <span class="string">'/design'</span>: &#123;</span><br><span class="line">        target: <span class="string">'https://m.wowdsgn.com'</span>,</span><br><span class="line">        changeOrigin: <span class="literal">true</span>,</span><br><span class="line">        pathRewrite: &#123;</span><br><span class="line">          <span class="string">'^/design'</span>: <span class="string">'https://m.wowdsgn.com'</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">'/node'</span>: &#123;</span><br><span class="line">        target: <span class="string">'http://47.104.70.xx:3000'</span>,</span><br><span class="line">        changeOrigin: <span class="literal">true</span>,</span><br><span class="line">        pathRewrite: &#123;</span><br><span class="line">          <span class="string">'^/node'</span>: <span class="string">'http://47.104.70.xx:3000'</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>②现在我们要在线上配置代理</p>
<ul>
<li>FlashFXP.exe =&gt; /usr/local/nginx/conf/nginx.conf =&gt; 传输到本地</li>
<li>nginx.conf =&gt; server =&gt; <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    ………………</span><br><span class="line">    location &#x2F;design&#x2F;v2 &#123;</span><br><span class="line">        proxy_pass https:&#x2F;&#x2F;m.wowdsgn.com&#x2F;v2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location &#x2F;design&#x2F;pages &#123;</span><br><span class="line">        proxy_pass https:&#x2F;&#x2F;m.wowdsgn.com&#x2F;pages;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
=&gt; 重启- FlashFXP =&gt; <code>cd /usr/local/nginx/sbin</code> =&gt; <code>./nginx -s reload</code></li>
<li>/design/v2 就会变成 https:// m.wowdsgn.com/v2，注意一定要留一个标识符(后面的v2)<br>项目里这么请求：<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">axios</span><br><span class="line">    .get(&quot;&#x2F;design&#x2F;v2&#x2F;page?pageId&#x3D;1&amp;tabId&#x3D;10006&amp;currentPage&#x3D;1&amp;pageSize&#x3D;8&quot;)</span><br><span class="line">    .then(res &#x3D;&gt; &#123;&#125;);</span><br></pre></td></tr></table></figure></div></li>
</ul>
]]></content>
      <categories>
        <category>node</category>
      </categories>
  </entry>
  <entry>
    <title>ES6一些新特性</title>
    <url>/jackhuang-haohua.github.io/2020/03/22/2020-05-ES6/</url>
    <content><![CDATA[<h2 id="es6是什么"><a href="#es6是什么" class="headerlink" title="es6是什么"></a>es6是什么</h2><ul>
<li>ECMAScript 6（以下简称ES6）是JavaScript语言的某一代标准，已经在2015年6月正式发布了。Mozilla公司将在这个标准的基础上，推出JavaScript 2.0。</li>
<li>ECMAScript和JavaScript到底是什么关系？<br>简单来说：ECMAScript是JavaScript语言的国际标准，JavaScript是ECMAScript的实现。</li>
</ul>
<h2 id="es6中定义变量"><a href="#es6中定义变量" class="headerlink" title="es6中定义变量"></a>es6中定义变量</h2><p>我们以前都是使用 <code>var</code> 关键字来声明变量的，在 ES6 的时候，多了两个关键字 <code>let</code> 和 <code>const</code>，也是用来声明变量的；</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul>
<li>let 和 const的相同点：<ul>
<li>声明的变量不会经历预解析</li>
<li>声明的变量不允许有相同的变量名</li>
<li>声明的变量必须先声明再使用</li>
<li>在{}中声明的时候，只能在{}内能使用</li>
</ul>
</li>
<li>let 和 const的区别：<ul>
<li>let声明的是变量，后期可以更改值，可以先声明不赋值</li>
<li>const声明的是常量，后期不可以更这个常量名的值，声明的时候必须赋值</li>
</ul>
</li>
</ul>
<h3 id="let-const-var-的区别"><a href="#let-const-var-的区别" class="headerlink" title="let/const/var 的区别"></a>let/const/var 的区别</h3><ol>
<li><p><code>let</code> 和 <code>const</code> 不允许重复声明变量</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用 var 的时候重复声明变量是没问题的，只不过就是后面会把前面覆盖掉</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">100</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">200</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 let 重复声明变量的时候就会报错了</span></span><br><span class="line"><span class="keyword">let</span> num = <span class="number">100</span></span><br><span class="line"><span class="keyword">let</span> num = <span class="number">200</span> <span class="comment">// 这里就会报错了</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 const 重复声明变量的时候就会报错</span></span><br><span class="line"><span class="keyword">const</span> num = <span class="number">100</span></span><br><span class="line"><span class="keyword">const</span> num = <span class="number">200</span> <span class="comment">// 这里就会报错了</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p><code>let</code> 和 <code>const</code> 声明的变量不会在预解析的时候解析（也就是没有变量提升）</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 因为预解析（变量提升）的原因，在前面是有这个变量的，只不过没有赋值</span></span><br><span class="line"><span class="built_in">console</span>.log(num) <span class="comment">// undefined</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 因为 let 不会进行预解析（变量提升），所以直接报错了</span></span><br><span class="line"><span class="built_in">console</span>.log(num) <span class="comment">// undefined</span></span><br><span class="line"><span class="keyword">let</span> num = <span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 因为 const 不会进行预解析（变量提升），所以直接报错了</span></span><br><span class="line"><span class="built_in">console</span>.log(num) <span class="comment">// undefined</span></span><br><span class="line"><span class="keyword">const</span> num = <span class="number">100</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p><code>let</code> 和 <code>const</code> 声明的变量会被所有代码块限制作用范围</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// var 声明的变量只有函数能限制其作用域，其他的不能限制</span></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line"><span class="keyword">var</span> num = <span class="number">100</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(num) <span class="comment">// 100</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// let 声明的变量，除了函数可以限制，所有的代码块都可以限制其作用域（if/while/for/...）</span></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line"><span class="keyword">let</span> num = <span class="number">100</span></span><br><span class="line"><span class="built_in">console</span>.log(num) <span class="comment">// 100</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(num) <span class="comment">// 报错</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// const 声明的变量，除了函数可以限制，所有的代码块都可以限制其作用域（if/while/for/...）</span></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line"><span class="keyword">const</span> num = <span class="number">100</span></span><br><span class="line"><span class="built_in">console</span>.log(num) <span class="comment">// 100</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(num) <span class="comment">// 报错</span></span><br></pre></td></tr></table></figure></div>

</li>
</ol>
<h3 id="let-和-const-的区别"><a href="#let-和-const-的区别" class="headerlink" title="let 和 const 的区别"></a><code>let</code> 和 <code>const</code> 的区别</h3><ol>
<li><p><code>let</code> 声明的变量的值可以改变，<code>const</code> 声明的变量的值不可以改变</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> num = <span class="number">100</span></span><br><span class="line">num = <span class="number">200</span></span><br><span class="line"><span class="built_in">console</span>.log(num) <span class="comment">// 200</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> num = <span class="number">100</span></span><br><span class="line">num = <span class="number">200</span> <span class="comment">// 这里就会报错了，因为 const 声明的变量值不可以改变（我们也叫做常量）</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p><code>let</code> 声明的时候可以不赋值，<code>const</code> 声明的时候必须赋值</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> num</span><br><span class="line">num = <span class="number">100</span></span><br><span class="line"><span class="built_in">console</span>.log(num) <span class="comment">// 100</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> num <span class="comment">// 这里就会报错了，因为 const 声明的时候必须赋值</span></span><br></pre></td></tr></table></figure></div>

</li>
</ol>
<h2 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h2><p>箭头函数也是一种函数，是对函数表达式的一种简写；</p>
<h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><p>格式：<code>let fun = () =&gt;{}</code>；</p>
<ul>
<li>箭头函数的使用规则：<ul>
<li>形参写在 圆括号里面</li>
<li>当形参只有一个的时候，可以忽略圆括号</li>
<li>当函数体只有一句话的时候，可以忽略花括号</li>
</ul>
</li>
<li>箭头函数的注意点<ul>
<li>箭头函数里面没有 this 的指向</li>
<li>箭头函数没有arguments 对象</li>
</ul>
</li>
</ul>
<h3 id="箭头函数实例"><a href="#箭头函数实例" class="headerlink" title="箭头函数实例"></a>箭头函数实例</h3><p>箭头函数是 ES6 里面一个简写函数的语法方式， <strong>只能简写函数表达式，不能简写声明式函数</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;&#125; <span class="comment">// 不能简写</span></span><br><span class="line"><span class="keyword">const</span> fun = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125; <span class="comment">// 可以简写</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    fn: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125; <span class="comment">// 可以简写</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>语法：<code>(函数的行参) =&gt; { 函数体内要执行的代码 }</code></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fn = <span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a)</span><br><span class="line">    <span class="built_in">console</span>.log(b)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 可以使用箭头函数写成</span></span><br><span class="line"><span class="keyword">const</span> fun = <span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a)</span><br><span class="line">    <span class="built_in">console</span>.log(b)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    fn: <span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(a)</span><br><span class="line">        <span class="built_in">console</span>.log(b)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 可以使用箭头函数写成</span></span><br><span class="line"><span class="keyword">const</span> obj2 = &#123;</span><br><span class="line">    fn: <span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(a)</span><br><span class="line">        <span class="built_in">console</span>.log(b)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h3 id="箭头函数的特殊性"><a href="#箭头函数的特殊性" class="headerlink" title="箭头函数的特殊性"></a>箭头函数的特殊性</h3><p><strong>箭头函数内部没有 this，箭头函数的 this 是上下文的 this</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在箭头函数定义的位置往上数，这一行是可以打印出 this 的</span></span><br><span class="line"><span class="comment">// 因为这里的 this 是 window</span></span><br><span class="line"><span class="comment">// 所以箭头函数内部的 this 就是 window</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    fn: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 这个位置是箭头函数的上一行，但是不能打印出 this</span></span><br><span class="line">    fun: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 箭头函数内部的 this 是书写箭头函数的上一行一个可以打印出 this 的位置</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">obj.fn()</span><br><span class="line">obj.fun()</span><br></pre></td></tr></table></figure></div>
<p>按照我们以前的 this 指向来判断，谁调用就指向谁，两个都应该指向 obj；<br>但是 fun 因为是箭头函数，所以 this 不指向 obj，而是指向 fun 的外层，就是 window。</p>
<p><strong>箭头函数内部没有 <code>arguments</code> 这个参数集合</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    fn: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">arguments</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    fun: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">arguments</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.fn(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>) <span class="comment">// 会打印一个伪数组 [1, 2, 3]</span></span><br><span class="line">obj.fun(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>) <span class="comment">// 会直接报错</span></span><br></pre></td></tr></table></figure></div>

<p><strong>函数的行参只有一个的时候可以不写 <code>()</code> 其余情况必须写</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    fn: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'没有参数，必须写小括号'</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    fn2: <span class="function"><span class="params">a</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'一个行参，可以不写小括号'</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    fn3: <span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'两个或两个以上参数，必须写小括号'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>函数体只有一行代码的时候，可以不写 <code>{}</code> ，并且会自动 return</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    fn: <span class="function"><span class="params">a</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> a + <span class="number">10</span></span><br><span class="line">    &#125;,</span><br><span class="line">    fun: <span class="function"><span class="params">a</span> =&gt;</span> a + <span class="number">10</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(fn(<span class="number">10</span>)) <span class="comment">// 20</span></span><br><span class="line"><span class="built_in">console</span>.log(fun(<span class="number">10</span>)) <span class="comment">// 20</span></span><br></pre></td></tr></table></figure></div>

<h2 id="函数的默认值"><a href="#函数的默认值" class="headerlink" title="函数的默认值"></a>函数的默认值</h2><p>我们在定义函数的时候，有的时候需要一个默认值出现；就是当我们不传递参数的时候，使用默认值，传递参数了就使用传递的参数</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">    a = a || <span class="number">10</span></span><br><span class="line">    <span class="built_in">console</span>.log(a)</span><br><span class="line">&#125;</span><br><span class="line">fn()   <span class="comment">// 不传递参数的时候，函数内部的 a 就是 10</span></span><br><span class="line">fn(<span class="number">20</span>) <span class="comment">// 传递了参数 20 的时候，函数内部的 a 就是 20</span></span><br></pre></td></tr></table></figure></div>

<p><strong>在 ES6 中我们可以直接把默认值写在函数的行参位置</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">a = <span class="number">10</span></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a)</span><br><span class="line">&#125;</span><br><span class="line">fn()   <span class="comment">// 不传递参数的时候，函数内部的 a 就是 10</span></span><br><span class="line">fn(<span class="number">20</span>) <span class="comment">// 传递了参数 20 的时候，函数内部的 a 就是 20</span></span><br></pre></td></tr></table></figure></div>

<p><strong>这个默认值的方式箭头函数也可以使用</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fn = <span class="function">(<span class="params">a = <span class="number">10</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a)</span><br><span class="line">&#125;</span><br><span class="line">fn()   <span class="comment">// 不传递参数的时候，函数内部的 a 就是 10</span></span><br><span class="line">fn(<span class="number">20</span>) <span class="comment">// 传递了参数 20 的时候，函数内部的 a 就是 20</span></span><br></pre></td></tr></table></figure></div>
<p>注意：箭头函数如果你需要使用默认值的话，那么一个参数的时候也需要写()</p>
<h2 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h2><p>解构赋值，就是快速的从对象或者数组中取出成员的一个语法方式</p>
<h3 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h3><ul>
<li>解构赋值之对象 <code>let {name} = obj</code></li>
<li>解构赋值之数组 <code>let [num1] = arr</code></li>
<li>交换两个变量 <code>var [x,y] = [y,x]</code></li>
</ul>
<h3 id="解构对象"><a href="#解构对象" class="headerlink" title="解构对象"></a>解构对象</h3><p>快速的从对象中获取成员</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ES5 的方法向得到对象中的成员</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    name: <span class="string">'Jack'</span>,</span><br><span class="line">    age: <span class="number">18</span>,</span><br><span class="line">    gender: <span class="string">'男'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> name = obj.name</span><br><span class="line"><span class="keyword">let</span> age = obj.age</span><br><span class="line"><span class="keyword">let</span> gender = obj.gender</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6解构赋值的方式从对象中获取成员</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    name: <span class="string">'Jack'</span>,</span><br><span class="line">    age: <span class="number">18</span>,</span><br><span class="line">    gender: <span class="string">'男'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 前面的 &#123;&#125; 表示我要从 obj 这个对象中获取成员了</span></span><br><span class="line"><span class="comment">// name age gender 都得是 obj 中有的成员</span></span><br><span class="line"><span class="comment">// obj 必须是一个对象</span></span><br><span class="line"><span class="keyword">let</span> &#123; name, age, gender &#125; = obj</span><br></pre></td></tr></table></figure></div>

<h3 id="解构数组"><a href="#解构数组" class="headerlink" title="解构数组"></a>解构数组</h3><p>快速的从数组中获取成员</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ES5 的方式从数组中获取成员</span></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="string">'Jack'</span>, <span class="string">'Rose'</span>, <span class="string">'Tom'</span>]</span><br><span class="line"><span class="keyword">let</span> a = arr[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">let</span> b = arr[<span class="number">1</span>]</span><br><span class="line"><span class="keyword">let</span> c = arr[<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用解构赋值的方式从数组中获取成员</span></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="string">'Jack'</span>, <span class="string">'Rose'</span>, <span class="string">'Tom'</span>]</span><br><span class="line"><span class="comment">// 前面的 [] 表示要从 arr 这个数组中获取成员了</span></span><br><span class="line"><span class="comment">// a b c 分别对应这数组中的索引 0 1 2</span></span><br><span class="line"><span class="comment">// arr 必须是一个数组</span></span><br><span class="line"><span class="keyword">let</span> [a, b, c] = arr</span><br></pre></td></tr></table></figure></div>


<h2 id="展开运算符"><a href="#展开运算符" class="headerlink" title="展开运算符"></a>展开运算符</h2><p>ES6 里面号新添加了一个运算符<code>...</code>，叫做展开运算符；</p>
<h3 id="展开数组"><a href="#展开数组" class="headerlink" title="展开数组"></a>展开数组</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="built_in">console</span>.log(...arr) <span class="comment">// 1 2 3 4 5</span></span><br></pre></td></tr></table></figure></div>

<h3 id="合并数组"><a href="#合并数组" class="headerlink" title="合并数组"></a>合并数组</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"><span class="keyword">let</span> arr2 = [...arr, <span class="number">5</span>]</span><br><span class="line"><span class="built_in">console</span>.log(arr2)</span><br></pre></td></tr></table></figure></div>

<h3 id="合并对象"><a href="#合并对象" class="headerlink" title="合并对象"></a>合并对象</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    name: <span class="string">'Jack'</span>,</span><br><span class="line">    age: <span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> obj2 = &#123;</span><br><span class="line">    ...obj,</span><br><span class="line">    gender: <span class="string">'男'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(obj2)</span><br></pre></td></tr></table></figure></div>

<h3 id="函数传递参数"><a href="#函数传递参数" class="headerlink" title="函数传递参数"></a>函数传递参数</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">a, b, c</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a)</span><br><span class="line">    <span class="built_in">console</span>.log(b)</span><br><span class="line">    <span class="built_in">console</span>.log(c)</span><br><span class="line">&#125;</span><br><span class="line">fn(...arr)</span><br><span class="line"><span class="comment">// 等价于 fn(1, 2, 3)</span></span><br></pre></td></tr></table></figure></div>

<h2 id="ES6中数组的方法"><a href="#ES6中数组的方法" class="headerlink" title="ES6中数组的方法"></a>ES6中数组的方法</h2><ul>
<li><code>includes(元素)</code>，检查数组中是否存在 指定的元素，存在就返回true，不存在就返回false</li>
<li><code>Array.from(likeArray)</code>，把伪数组数据转成数组</li>
<li><code>Array.of(参数1，参数2，参数3)</code>，根据参数列表来创建新的数组(消除new Array来创建数组的歧义问题)</li>
<li><code>find(callBack)</code>，从指定的数组中查找第一个满足条件的元素，如果找到那么就直接返回该元素，如果没有找到那么返回undefined </li>
<li><code>findIndex(callBack)</code>，从指定的数组中查找第一个满足条件的元素，如果找到那么就直接返回该元素的索引，如果没有找到那么返回-1</li>
</ul>
<h2 id="ES6中的for-of（结合了for和forEach的优点）"><a href="#ES6中的for-of（结合了for和forEach的优点）" class="headerlink" title="ES6中的for..of（结合了for和forEach的优点）"></a>ES6中的for..of（结合了for和forEach的优点）</h2><p>数组的遍历：</p>
<ol>
<li>for 循环<ul>
<li>优点：可以随时终止（break和continue）</li>
<li>缺点：需要知道循环的次数</li>
</ul>
</li>
<li>forEach<ul>
<li>优点：不需要知道循环的次数</li>
<li>缺点：不可以随时终止（break和continue）</li>
</ul>
</li>
<li>for of 遍历有迭代器的对象，不可以遍历对象<ul>
<li>优点：不需要知道循环的次数，可以随时终止（break和continue）</li>
</ul>
</li>
</ol>
<p>Tip：for in 用来遍历对象</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// es5的方法</span></span><br><span class="line">arr.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">item</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (item === <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>;i &lt; arr.length;i++)&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// es6的方法</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">of</span> arr) &#123;</span><br><span class="line"><span class="built_in">console</span>.log(key);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="生成器（Generators）"><a href="#生成器（Generators）" class="headerlink" title="生成器（Generators）"></a>生成器（Generators）</h2><ul>
<li>在函数的名字前面 + 一个 * 表示是一个生成器</li>
<li>生成器的好处就是可以暂停函数的执行</li>
<li>yield “任务一”  理解为暂停</li>
<li>next()用来调用函数  <ul>
<li>返回值：value ：yield的值  done状态</li>
<li>如果后面还有任务，那么done为false，如果后面没有任务了，done就为true</li>
</ul>
</li>
<li>注意：生成器中遇到return ，return后面的代码不会在执行</li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// es5</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'aaa'</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'任务一'</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'任务二'</span>);</span><br><span class="line">&#125;</span><br><span class="line">fun();</span><br><span class="line"></span><br><span class="line"><span class="comment">// es6生成器函数</span></span><br><span class="line"><span class="comment">// 主要作用就是暂停函数的执行</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">fun</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'开始任务'</span>);</span><br><span class="line">    <span class="keyword">yield</span> <span class="string">'开始还没有完成'</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'任务一'</span>);</span><br><span class="line">    <span class="keyword">yield</span> <span class="string">'任务一没有完成'</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'任务二'</span>);</span><br><span class="line">    <span class="keyword">yield</span> <span class="string">'任务二没有完成'</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'任务三'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> res = fun();</span><br><span class="line">res.next()</span><br></pre></td></tr></table></figure></div>

<h2 id="symbol符号类型（很像字符串）"><a href="#symbol符号类型（很像字符串）" class="headerlink" title="symbol符号类型（很像字符串）"></a>symbol符号类型（很像字符串）</h2><ul>
<li>概念：symbol的功能类似于一种标识唯一性的ID</li>
<li>symbol的基本使用：<ul>
<li>创建： Symbol()</li>
</ul>
</li>
<li>特点：<ul>
<li>在整个代码中所有的符号类型中数据都是唯一的</li>
<li>符号类型的键值对是私有变量，不能被枚举出来（遍历） </li>
<li>不可以跟其他的数据类型进行运算</li>
</ul>
</li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    Symbol 很像字符串的一种数据类型 symbol 唯一性，</span></span><br><span class="line"><span class="comment">    没创建出来的symbol对象都是唯一的</span></span><br><span class="line"><span class="comment">    一般用来创建对象的私有属性的时候</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">let</span> s1 = <span class="built_in">Symbol</span>(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">let</span> s2 = <span class="built_in">Symbol</span>(<span class="number">1</span>)</span><br><span class="line"><span class="built_in">console</span>.log(s1);</span><br><span class="line"><span class="built_in">console</span>.log(s2);</span><br><span class="line"><span class="built_in">console</span>.log(s1 == s2);</span><br><span class="line"><span class="built_in">console</span>.log(s1 + s2);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> m1 = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">m1.set(<span class="string">'name'</span>, <span class="string">'zs'</span>);</span><br><span class="line">m1.set(<span class="string">'age'</span>, <span class="number">19</span>)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> [key, value] <span class="keyword">of</span> m1) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(key);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>es6</category>
      </categories>
  </entry>
  <entry>
    <title>react基础梳理</title>
    <url>/jackhuang-haohua.github.io/2019/07/29/2020-04-react-%E5%9F%BA%E7%A1%80%E6%A2%B3%E7%90%86/</url>
    <content><![CDATA[<p>这篇先不用脚手架，只记录html文件里的react。</p>
<h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><blockquote>
<p>React不是一个完整的MVC框架，最多可以认为是MVC中的V（View），甚至React并不非常认可MVC开发模式；React构建页面UI的库。可以简单地理解为，React将界面分成了各个独立的小块，每一个块就是组件，这些组件之间可以组合、嵌套，就成了我们的页面。</p>
</blockquote>
<p><strong>1.虚拟DOM  ==&gt; 高性能</strong><br>　我们以前操作dom的方式是通过document.getElementById()的方式，这样的过程实际上是先去读取html的dom结构，将结构转换成变量，再进行操作；<br>　而reactjs定义了一套变量形式的dom模型，一切操作和换算直接在变量中，这样减少了操作真实dom，性能真实相当的高，和主流MVC框架有本质的区别，并不和dom打交道；</p>
<p><strong>2.组件系统  ===&gt; 高效率</strong><br>　react最核心的思想是将页面中任何一个区域或者元素都可以看做一个组件component；</p>
<p><strong>组件指的就是同时包含了html、css、js、image元素的聚合体</strong><br>　使用react开发的核心就是将页面拆分成若干个组件，并且react一个组件中同时耦合了css、js、image，这种模式整个颠覆了过去的传统的方式；</p>
<p><strong>3.单向数据流</strong><br>　其实reactjs的核心内容就是数据绑定，所谓数据绑定指的是只要将一些服务端的数据和前端页面绑定好，开发者只关注实现业务就行了  ；</p>
<p>​<strong>4.JSX  语法</strong><br>　在vue中，我们使用render函数来构建组件的dom结构性能较高，因为省去了查找和编译模板的过程，但是在render中利用createElement创建结构的时候代码可读性较低，较为复杂，此时可以利用jsx语法来在render中创建dom，解决这个问题，但是前提是需要使用工具来编译jsx；</p>
<h2 id="二、使用react"><a href="#二、使用react" class="headerlink" title="二、使用react"></a>二、使用react</h2><ul>
<li>npm init -y</li>
<li>npm i react -S (yarn add react)<ul>
<li>找到node_modules/react/umd目录 react.development.js文件</li>
</ul>
</li>
<li>npm i react-dom -S (yarn add react-dom)<ul>
<li>找到node_modules/react-dom/umd目录 react-dom.development.js文件</li>
</ul>
</li>
<li>npm i babel-standalone -S (yarn add babel-standalone)</li>
<li>页面当中的引入顺序JS文件：<ul>
<li>react.development.js</li>
<li>react-dom.development.js</li>
<li>babel.js</li>
</ul>
</li>
<li>script的type属性需要变成 type=”text/babel”，有以下作用：<ul>
<li>将es6的语法转换成es5的语法</li>
<li>解析jsx代码</li>
</ul>
</li>
</ul>
<blockquote>
<p>jsx(js+xml)的原理：通过 React.createElement(tag,{attrs},content) 的方式，类似底层创建了js内存对象（虚拟dom），在通过ReactDOM.render()渲染</p>
</blockquote>
<h2 id="三、基本语法"><a href="#三、基本语法" class="headerlink" title="三、基本语法"></a>三、基本语法</h2><h3 id="插值语法"><a href="#插值语法" class="headerlink" title="插值语法"></a>插值语法</h3><p>支持各种数据类型；事件必须放在render后面，即渲染后再添加，不过脚手架里就没这个限制了</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a=<span class="xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>hello world <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span> </span><br><span class="line"><span class="keyword">var</span> flag=<span class="literal">true</span></span><br><span class="line"><span class="keyword">var</span> arr=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="keyword">var</span> und=<span class="literal">undefined</span></span><br><span class="line"><span class="keyword">var</span> obj=&#123;<span class="attr">id</span>:<span class="number">123</span>&#125;</span><br><span class="line">ReactDOM.render(</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;div&gt;&#123;a&#125;&lt;<span class="regexp">/div&gt; =&gt; &lt;div&gt;&lt;h2&gt;hello world &lt;/</span>h2&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        &lt;p&gt;&#123;flag&#125;&lt;<span class="regexp">/p&gt; =&gt; &lt;p&gt;&lt;/</span>p&gt;</span><br><span class="line">        &lt;p&gt;&#123;arr&#125;&lt;<span class="regexp">/p&gt; =&gt; &lt;p&gt;&lt;/</span>p&gt;</span><br><span class="line">        &lt;p&gt;&#123;<span class="literal">undefined</span>&#125;&lt;<span class="regexp">/p&gt; =&gt; &lt;p&gt;&lt;/</span>p&gt;</span><br><span class="line">        &lt;p&gt;&#123;obj&#125;&lt;<span class="regexp">/p&gt; =&gt; 报错</span></span><br><span class="line"><span class="regexp">        &lt;p id="a" onClick=&#123;()=&gt;console.log(123)&#125;&gt;我是p标签&lt;/</span>p&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;,document</span></span><br><span class="line"><span class="regexp">.getElementById("box"))</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 事件必须放在render后面，即渲染后再添加，脚手架里就没这个限制了</span></span><br><span class="line"><span class="regexp">document.getElementById("a").onclick = function()&#123;</span></span><br><span class="line"><span class="regexp">    alert(111111111)</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure></div>

<h3 id="循环数组"><a href="#循环数组" class="headerlink" title="循环数组"></a>循环数组</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// map方法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showList1</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> arr.map(<span class="function">(<span class="params">item,index</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;index&#125;</span>&gt;</span>&#123;item&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 或者for循环(不推荐)</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showList2</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> tempArr=[]</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;arr.length;i++)&#123;</span><br><span class="line">        tempArr.push(<span class="xml"><span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;i&#125;</span>&gt;</span>&#123;arr[i]&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> tempArr</span><br><span class="line">&#125;</span><br><span class="line">ReactDOM.render(</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">        &#123;showList3(arr)&#125;</span><br><span class="line">    &lt;<span class="regexp">/ul&gt;,document</span></span><br><span class="line"><span class="regexp">.getElementById("box"))</span></span><br></pre></td></tr></table></figure></div>

<h3 id="添加类名"><a href="#添加类名" class="headerlink" title="添加类名"></a>添加类名</h3><p>react里基本都是驼峰写法</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> curIndex=<span class="number">0</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showList3</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">            &#123;arr.map(<span class="function">(<span class="params">item,index</span>)=&gt;</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">li</span></span></span></span><br><span class="line"><span class="xml">                            // 切换class</span></span><br><span class="line"><span class="xml">                            className=&#123;index===curIndex?'redClass':''&#125;</span></span><br><span class="line"><span class="xml">                            key=&#123;index&#125;</span></span><br><span class="line"><span class="xml">                            onClick=&#123;()=&gt;&#123;</span></span><br><span class="line"><span class="xml">                                curIndex=index</span></span><br><span class="line"><span class="xml">                                render()</span></span><br><span class="line"><span class="xml">                            &#125;&#125;</span></span><br><span class="line"><span class="xml">                        &gt;</span></span><br><span class="line"><span class="xml">                        &#123;item&#125;</span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">            &#125;)&#125;</span><br><span class="line">        &lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">function render()&#123;</span></span><br><span class="line"><span class="regexp">    ReactDOM.render(</span></span><br><span class="line"><span class="regexp">    &lt;ul&gt;</span></span><br><span class="line"><span class="regexp">        &#123;showList3(arr)&#125;</span></span><br><span class="line"><span class="regexp">    &lt;/u</span>l&gt;,<span class="built_in">document</span></span><br><span class="line">.getElementById(<span class="string">"box"</span>))</span><br><span class="line">&#125;</span><br><span class="line">render()</span><br></pre></td></tr></table></figure></div>

<h3 id="添加样式"><a href="#添加样式" class="headerlink" title="添加样式"></a>添加样式</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> sty=&#123;<span class="attr">background</span>:<span class="string">"red"</span>&#125;</span><br><span class="line">ReactDOM.render(</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            &lt;p style=&#123;sty&#125;&gt;我是p&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;,<span class="built_in">document</span></span><br><span class="line">.getElementById(<span class="string">"box"</span>))</span><br></pre></td></tr></table></figure></div>

<h2 id="四、react-cra"><a href="#四、react-cra" class="headerlink" title="四、react-cra"></a>四、react-cra</h2><h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><ul>
<li>npm i create-react-app -g</li>
<li>create-react-app –version</li>
<li>create-react-app 项目名称</li>
<li>cd 项目名称</li>
<li>yarn start 启动项目</li>
<li>看到react的Logo在转圈圈，表示成功启动了</li>
</ul>
<h3 id="自带的命令"><a href="#自带的命令" class="headerlink" title="自带的命令"></a>自带的命令</h3><ul>
<li>yarn start 启动项目</li>
<li>yarn build 生成压缩文件</li>
<li>yarn test  模块测试，可以正则匹配某些字符，或者查看报错在哪</li>
<li>yarn eject 弹出配置，比如跨域设置</li>
</ul>
<h3 id="引入本地图片"><a href="#引入本地图片" class="headerlink" title="引入本地图片"></a>引入本地图片</h3><p>把图片放在项目里，比如src/images，有两种方法：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 方法一</span></span><br><span class="line"><span class="keyword">import</span> Logo <span class="keyword">from</span> <span class="string">"../src/images/phone.png"</span></span><br><span class="line">    &lt;img src=&#123;Logo&#125;/&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法二</span></span><br><span class="line">&lt;img src=&#123;<span class="built_in">require</span>(<span class="string">"../src/images/phone.png"</span>)&#125;/&gt;</span><br></pre></td></tr></table></figure></div>

<h3 id="引入和导出"><a href="#引入和导出" class="headerlink" title="引入和导出"></a>引入和导出</h3><p>包括组件、方法、数据等</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.方法一</span></span><br><span class="line"><span class="keyword">const</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">const</span> b = <span class="number">2</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    a,b</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">import</span> a <span class="keyword">from</span> <span class="string">"./a.js"</span> ==&gt; &#123;<span class="attr">a</span>:<span class="number">1</span>,<span class="attr">b</span>:<span class="number">2</span>&#125; ===&gt; a</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.方法二</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> b = <span class="number">2</span></span><br><span class="line"><span class="keyword">import</span> &#123;a,b&#125; <span class="keyword">from</span> <span class="string">"./a"</span>  ==&gt; a:<span class="number">1</span>,<span class="attr">b</span>:<span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.方法三</span></span><br><span class="line"><span class="keyword">const</span> a = <span class="number">1</span></span><br><span class="line"><span class="keyword">const</span> b = <span class="number">2</span></span><br><span class="line"><span class="keyword">export</span> &#123;a,b&#125;</span><br><span class="line"><span class="keyword">import</span> &#123;a,b&#125; <span class="keyword">from</span> <span class="string">"./a"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 4.方法四</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    b:<span class="number">20</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">import</span> A,&#123;a&#125; <span class="keyword">from</span> <span class="string">"./a"</span>  ==&gt; <span class="built_in">console</span>.log(A,a)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5.方法五</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> b = <span class="number">2</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> c = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1000</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> A <span class="keyword">from</span> <span class="string">"./a"</span>  ==&gt; A.a  A.c</span><br></pre></td></tr></table></figure></div>

<h3 id="jsx一些规则"><a href="#jsx一些规则" class="headerlink" title="jsx一些规则"></a>jsx一些规则</h3><ul>
<li>jsx就是js+xml；</li>
<li>标签必须闭合</li>
<li>最外层只能有一个根元素</li>
<li>添加行内样式style = { { } }</li>
<li>驼峰命名className</li>
<li>受控组件，绑定value、onChange</li>
</ul>
<h2 id="五、router"><a href="#五、router" class="headerlink" title="五、router"></a>五、router</h2><h3 id="基本实现"><a href="#基本实现" class="headerlink" title="基本实现"></a>基本实现</h3><p>首先按步骤实现一下</p>
<h2 id="六、其他"><a href="#六、其他" class="headerlink" title="六、其他"></a>六、其他</h2><h3 id="定义组件"><a href="#定义组件" class="headerlink" title="定义组件"></a>定义组件</h3><p>定义组件有两种方式，function组件和class组件；<br>注意这是”定义组件”，组件的类型还有无状态组件等；<br><strong>function</strong><br>下面展示了函数组件，循环遍历数组</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/babel"</span>&gt;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> arr=[<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>]</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> visible=<span class="literal">true</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> List = <span class="function"><span class="params">props</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">return</span> (</span></span><br><span class="line"><span class="handlebars"><span class="xml">                <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span></span><br><span class="line">                    &#123;</span><br><span class="line"><span class="javascript">                        props.arr.map(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">                            <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;index&#125;</span>&gt;</span>&#123;item&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line">                        &#125;)</span><br><span class="line">                    &#125;</span><br><span class="line"><span class="handlebars"><span class="xml">                <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span></span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="function"><span class="keyword">function</span> <span class="title">App</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">return</span> (</span></span><br><span class="line"><span class="handlebars"><span class="xml">                <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="actionscript">                    <span class="comment">// 点击按钮显示隐藏</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span>=&gt;</span>&#123;visible=!visible;render()&#125;&#125;&gt;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span></span><br><span class="line"><span class="javascript">                    &#123;!visible||<span class="xml"><span class="tag">&lt;<span class="name">List</span> <span class="attr">arr</span>=<span class="string">&#123;arr&#125;/</span>&gt;</span>&#125;</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                    <span class="tag">&lt;<span class="name">List</span> <span class="attr">arr</span>=<span class="string">&#123;arr&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">List</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="function"><span class="keyword">function</span> <span class="title">render</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="javascript">            ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">App</span>/&gt;</span></span>,<span class="built_in">document</span>.getElementById(<span class="string">"box"</span>))</span></span><br><span class="line">        &#125;</span><br><span class="line">        render()</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p><strong>class</strong><br>下面展示了类组件，循环遍历对象</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/babel"</span>&gt;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> obj=&#123;a:<span class="number">1</span>,b:<span class="number">2</span>&#125;</span></span><br><span class="line"><span class="actionscript">        <span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</span></span><br><span class="line">            render()&#123;</span><br><span class="line"><span class="actionscript">                <span class="keyword">return</span> (</span></span><br><span class="line"><span class="handlebars"><span class="xml">                    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line">                        &#123;</span><br><span class="line"><span class="javascript">                            <span class="built_in">Object</span>.keys(obj).map(<span class="function"><span class="params">item</span>=&gt;</span>&#123; <span class="comment">//item=["a","b"]</span></span></span><br><span class="line"><span class="javascript">                                <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">key</span>=<span class="string">&#123;item&#125;</span>&gt;</span>&#123;item&#125;:&#123;obj[item]&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span> <span class="comment">//obj[item]=[1,2]</span></span></span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;    </span><br><span class="line"><span class="handlebars"><span class="xml">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line">                )</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="javascript">        ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">App</span>/&gt;</span></span>,<span class="built_in">document</span>.getElementById(<span class="string">"box"</span>))</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h3 id="受控于非受控组件"><a href="#受控于非受控组件" class="headerlink" title="受控于非受控组件"></a>受控于非受控组件</h3><p>受控与非受控组件：表单元素的值来自于state，那么这个组件就是受控组件，否则就是非受控组件。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/babel"</span>&gt;</span></span><br><span class="line">        </span><br><span class="line"><span class="actionscript">        <span class="comment">// 受控组件</span></span></span><br><span class="line">        在大多数情况下，推荐使用 受控组件 来处理表单数据。</span><br><span class="line"><span class="actionscript">        由于在表单元素上设置了 value 属性，因此显示的值将始终为 <span class="keyword">this</span>.state.value，</span></span><br><span class="line">        这使得 React 的 state 成为唯一数据源。由于 handlechange 在每次按键时都会执行并更新 React 的 state，</span><br><span class="line">        因此显示的值将随着用户输入而更新。</span><br><span class="line"><span class="actionscript">        <span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">constructor</span>()&#123;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">super</span>()</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">this</span>.state = &#123;</span></span><br><span class="line"><span class="actionscript">                    value:<span class="string">"111"</span></span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"><span class="javascript">            handleChange = <span class="function">(<span class="params">e</span>)=&gt;</span>&#123;</span></span><br><span class="line"><span class="actionscript">               <span class="keyword">this</span>.setState(&#123;</span></span><br><span class="line">                   value:e.target.value</span><br><span class="line">               &#125;) </span><br><span class="line">            &#125;</span><br><span class="line">            render()&#123;</span><br><span class="line"><span class="actionscript">                <span class="keyword">return</span> (</span></span><br><span class="line"><span class="handlebars"><span class="xml">                    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">value</span>=<span class="string">&#123;this.state.value&#125;</span> <span class="attr">onChange</span>=<span class="string">&#123;this.handleChange&#125;/</span>&gt;</span>   </span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                        <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;this.state.value&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line">                )</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="javascript">        ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">App</span>/&gt;</span></span>,<span class="built_in">document</span>.getElementById(<span class="string">"box"</span>)) *<span class="regexp">/</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="comment">// 非受控组件</span></span></span><br><span class="line">        这时候数据由DOM自身进行维护</span><br><span class="line">        要编写一个非受控组件，而不是为每个状态更新编写对应的数据处理函数，</span><br><span class="line">        可以使用ref来从DOM节点中获取表单数据。</span><br><span class="line"><span class="actionscript">        <span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</span></span><br><span class="line"><span class="javascript">            handleSubmit = <span class="function">(<span class="params">e</span>)=&gt;</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="keyword">this</span>.input.value)</span></span><br><span class="line">                e.preventDefault()</span><br><span class="line">            &#125;</span><br><span class="line">            render()&#123;</span><br><span class="line"><span class="actionscript">                <span class="keyword">return</span> (</span></span><br><span class="line"><span class="handlebars"><span class="xml">                    <span class="tag">&lt;<span class="name">form</span> <span class="attr">onSubmit</span>=<span class="string">&#123;this.handleSubmit&#125;</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">ref</span>=<span class="string">&#123;el</span>=&gt;</span>this.input=el&#125;/&gt;</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span>/&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span></span><br><span class="line">                )</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="javascript">        ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">App</span>/&gt;</span></span>,<span class="built_in">document</span>.getElementById(<span class="string">"box"</span>)) </span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h3 id="ref标记"><a href="#ref标记" class="headerlink" title="ref标记"></a>ref标记</h3><p>react中不能用getelement的方法获取节点，但是可以用ref的方式</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>ref字符串方式（不建议使用）</span><br><span class="line">    componentDidMount()&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.refs.input);</span><br><span class="line">    &#125;</span><br><span class="line">    &lt;input ref=<span class="string">"input"</span> type=<span class="string">"text"</span> /&gt;</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>回调函数方法</span><br><span class="line">    <span class="keyword">constructor</span>(props)&#123;</span><br><span class="line">        <span class="keyword">super</span>(props)</span><br><span class="line">    &#125;</span><br><span class="line">    componentDidMount()&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.input);</span><br><span class="line">    &#125;</span><br><span class="line">    &lt;input ref=&#123;el=&gt;<span class="keyword">this</span>.input=el&#125; type=<span class="string">"text"</span> /&gt;</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>React.creatRef方法(函数式组件不能用)</span><br><span class="line">    <span class="keyword">constructor</span>()&#123;</span><br><span class="line">        <span class="keyword">super</span>()</span><br><span class="line">        <span class="keyword">this</span>.input=React.creatRef()</span><br><span class="line">    &#125;</span><br><span class="line">    componentDidMount()&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.input.current);</span><br><span class="line">    &#125;</span><br><span class="line">    &lt;input ref=&#123;<span class="keyword">this</span>.input&#125; type=<span class="string">"text"</span> /&gt;</span><br></pre></td></tr></table></figure></div>

<h3 id="prevState"><a href="#prevState" class="headerlink" title="prevState"></a>prevState</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line">handleClick=<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    下面这种写法，最后一个setState会覆盖前面的</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">        count:<span class="keyword">this</span>.state.count+<span class="number">1</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">        count:<span class="keyword">this</span>.state.count+<span class="number">2</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">        count:<span class="keyword">this</span>.state.count+<span class="number">3</span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    这样子，三个setState就会按顺序执行</span><br><span class="line">    <span class="keyword">this</span>.setState(<span class="function">(<span class="params">prevState</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            count: prevState.count+<span class="number">1</span> </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">this</span>.setState(<span class="function">(<span class="params">prevState</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            count: prevState.count+<span class="number">2</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">this</span>.setState(<span class="function">(<span class="params">prevState</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            count: prevState.count+<span class="number">3</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="super"><a href="#super" class="headerlink" title="super"></a>super</h3><p>以前只知道react里要用super，但是一直不知道为什么…<br>下面是一个小案例，用来理解super：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>直接继承，浅拷贝，所以后面两个方法地址不一样</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,age</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.age = age</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype.say = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name+<span class="string">","</span>+<span class="keyword">this</span>.age</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> Person(<span class="string">"张三"</span>,<span class="number">18</span>)</span><br><span class="line"><span class="keyword">let</span> p2 = <span class="keyword">new</span> Person(<span class="string">"李四"</span>,<span class="number">18</span>)</span><br><span class="line"><span class="built_in">console</span>.log(p.say === p2.say) =&gt; <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>prototype继承，子实例可以更改父实例的数据</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,age</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.age = age</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype.say = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name+<span class="string">","</span>+<span class="keyword">this</span>.age</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> per = <span class="keyword">new</span> Person(<span class="string">"张四"</span>,<span class="number">38</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params">name,age,school</span>)</span>&#123; <span class="comment">//定义了三个数据</span></span><br><span class="line">    Person.call(<span class="keyword">this</span>,name,age)  <span class="comment">//借用构造函数实现继承</span></span><br><span class="line">    <span class="keyword">this</span>.school = school</span><br><span class="line">&#125;</span><br><span class="line">Student.prototype = Person.prototype;</span><br><span class="line">Student.prototype.marray = <span class="literal">true</span></span><br><span class="line"><span class="keyword">let</span> stu = <span class="keyword">new</span> Student(<span class="string">"张三"</span>,<span class="number">18</span>,<span class="string">"林科大"</span>)</span><br><span class="line"><span class="built_in">console</span>.log(per.marray) =&gt; 父实例原本没有marry方法，但是被子实例加上了</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>原型链继承</span><br><span class="line">Student.prototype = <span class="built_in">Object</span>.create(Person.prototype); <span class="comment">//实现了原型链继承</span></span><br><span class="line">Student.prototype.constructor = Student <span class="comment">//扭转Student.prototype的constuctor属性为Student</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">4.</span>es6中constuctor构造函数，<span class="keyword">super</span>继承</span><br><span class="line">就是让父类的构造函数执行一遍来去给子类赋值属性</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(name, age) &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    say() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name + <span class="string">","</span> + <span class="keyword">this</span>.age</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(name, age, school) &#123;</span><br><span class="line">        <span class="keyword">super</span>(name, age) <span class="comment">//es6中super必须放在构造函数第一行  </span></span><br><span class="line">        <span class="keyword">this</span>.school = school</span><br><span class="line">    &#125;</span><br><span class="line">    say() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.say() + <span class="string">","</span> + <span class="keyword">this</span>.school</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> per = <span class="keyword">new</span> Person(<span class="string">"张三"</span>, <span class="number">38</span>)</span><br><span class="line"><span class="keyword">let</span> stu = <span class="keyword">new</span> Student(<span class="string">"张四"</span>, <span class="number">18</span>, <span class="string">"林科大"</span>)</span><br><span class="line"><span class="built_in">console</span>.log(sper.say()) -&gt; 张三，<span class="number">38</span>岁</span><br><span class="line"><span class="built_in">console</span>.log(stu.say()) -&gt; 张思，<span class="number">18</span>，林科大</span><br></pre></td></tr></table></figure></div>

<h3 id="props验证"><a href="#props验证" class="headerlink" title="props验证"></a>props验证</h3><p>接收props时可以定制一些限制。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> PropTypes <span class="keyword">from</span> <span class="string">'prop-types'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">One</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 给props设置默认值，如果外面有传入的话就会覆盖</span></span><br><span class="line">    <span class="keyword">static</span> defaultProps=&#123;</span><br><span class="line">        num:<span class="number">100</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 验证</span></span><br><span class="line">    <span class="keyword">static</span> PropTypes=&#123;</span><br><span class="line">        <span class="comment">// this.num 必须为数字或字符串</span></span><br><span class="line">        num:PropTypes.oneOftype([PropTypes.number,PropTypes.string]),</span><br><span class="line"></span><br><span class="line">        <span class="comment">// this.userArr 必须为数组，数组里面包含id和sex</span></span><br><span class="line">        <span class="comment">// let userArr=[&#123;id:1&#125;,&#123;sex:'男'&#125;]</span></span><br><span class="line">        userArr:Prototypes.arrayOf(PropTypes.shape(&#123;</span><br><span class="line">            id:PropTypes.number.isRequired,</span><br><span class="line">            sex:PropTypes.string.isRequired</span><br><span class="line">        &#125;))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>react</category>
      </categories>
  </entry>
  <entry>
    <title>ajax请求</title>
    <url>/jackhuang-haohua.github.io/2018/06/19/2020-05-ajax/</url>
    <content><![CDATA[<h2 id="ajax是什么"><a href="#ajax是什么" class="headerlink" title="ajax是什么"></a>ajax是什么</h2><p>　ajax是js和php等后端交互的手段；<br>　js请求一个后端的地址，后端返回的内容会到js，如果想让内容显示再页面上，那么就需要开 js 去渲染，比如：<code>document.write</code>，<code>innerHTML</code>，<code>innerText</code>，<code>appendChild</code><br>　ajax 四个字母的含义：async + javascript + and + xml</p>
<h2 id="发送一个ajax请求"><a href="#发送一个ajax请求" class="headerlink" title="发送一个ajax请求"></a>发送一个ajax请求</h2><p>分为4个步骤</p>
<ol>
<li>创建一个 ajax 对象<ul>
<li><code>var xhr = new XMLHttpRequest</code>。实例化一个构造函数, 得到一个对象，得到的这个对象就能帮我们发送 ajax 请求；</li>
</ul>
</li>
<li>配置本次请求的信息<ul>
<li><code>xhr.open</code>(请求方式, 请求地址, 是否异步)。请求方式: GET/POST/PUT；请求地址: 你要请求哪一个 php 文件；是否异步: 默认是异步的, 可以改成同步；</li>
</ul>
</li>
<li>把这个请求发送出去<ul>
<li><code>xhr.send()</code>。这个方法一执行, 本次 ajax 请求就发送出去，后端接口收到；</li>
</ul>
</li>
<li>接受响应<ul>
<li>后端返回的内容不会直接显示在浏览器上，而是给了 js 或者说给了 xhr 对象，需要拿到这个响应内容(后端给前端的数据)</li>
<li>怎么接受响应？<code>xhr.onload = function () {}</code>。这个事件是 ajax 完成的时候触发，当本次请求完成以后, 就会触发后面的函数，xhr这个对象里面的responseText就是响应体</li>
</ul>
</li>
</ol>
<p><strong>代码示例：</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="code"><pre><span class="line">// 1. 创建一个 ajax 对象</span><br><span class="line">var xhr = new XMLHttpRequest()</span><br><span class="line"></span><br><span class="line">// 2. 配置一下本次请求的信息</span><br><span class="line">//    默认是一个异步的请求，即第三个参数默认为true</span><br><span class="line">xhr.open('GET', './ajax.php')</span><br><span class="line"></span><br><span class="line">// 3. 发送这个请求</span><br><span class="line">xhr.send()</span><br><span class="line"></span><br><span class="line">// 4. 接受响应</span><br><span class="line">xhr.onload = function () &#123;</span><br><span class="line">  // 会在 ajax 结束的时候触发</span><br><span class="line">  console.log(xhr.responseText)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="ajax的异步"><a href="#ajax的异步" class="headerlink" title="ajax的异步"></a>ajax的异步</h2><p>　在一个ajax请求中，从第三步开始后变为异步；<br>　但第二步open的参数为false时，第三步为同步，则必须把onload事件提前，但一般不允许出现这种情况；</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 创建 ajax 对象</span></span><br><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest() <span class="comment">// =&gt; 同步创建 ajax 对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 配置请求信息</span></span><br><span class="line">xhr.open(<span class="string">'GET'</span>, <span class="string">'./ajax.php'</span>, <span class="literal">false</span>) <span class="comment">// =&gt; 同步配置请求信息</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 接受响应</span></span><br><span class="line">xhr.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="comment">// =&gt; 同步绑定事件</span></span><br><span class="line">  <span class="built_in">console</span>.log(xhr.responseText) <span class="comment">// 响应体</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 发送请求</span></span><br><span class="line">xhr.send() <span class="comment">// =&gt; 根据 open 的第三个参数决定是同步还是异步</span></span><br></pre></td></tr></table></figure></div>

<h2 id="ajax的状态码"><a href="#ajax的状态码" class="headerlink" title="ajax的状态码"></a>ajax的状态码</h2><p>　http响应状态码：表示本次请求时成功还是失败；<br>　ajax状态码：描述当前处于ajax的哪一个步骤；通过<code>ajax对象.readyState</code>来获取状态码；<br>　当ajax的状态码就会改变时，会触发onreadystatechange事件；；<br><strong>常见状态码：</strong></p>
<ul>
<li>0: 表示你创建一个 ajax 对象成功了，<code>var xhr = new XMLHttpRequest()</code></li>
<li>1: 表示配置请求信息成功了(也就是执行完 open)，<code>xhr.open(&#39;GET&#39;, &#39;./ajax.php&#39;)</code></li>
<li>2: 表示响应体已经回到了浏览器, 但是还不能使用(因为此时还是一个响应报文)，<code>xhr.send()</code></li>
<li>3: 浏览器正在解析响应报文(把响应报文里面的响应体分离出来)，<code>xhr.send()</code></li>
<li>4: 浏览器分离响应体成功，已经可以正常使用了(本次请求结束了)，<code>xhr.send()</code></li>
</ul>
<h2 id="ajax的兼容处理"><a href="#ajax的兼容处理" class="headerlink" title="ajax的兼容处理"></a>ajax的兼容处理</h2><p>　兼容IE678浏览器；ajax 有两个地方不兼容</p>
<ol>
<li>创建 ajax 对象的时候不兼容<ul>
<li>new XMLHttpRequest =&gt; 标准浏览器使用</li>
<li>new ActiveXObject =&gt; IE 低版本使用</li>
</ul>
</li>
<li>接受响应的不兼容<ul>
<li>标准浏览器 =&gt; onload 事件</li>
<li>IE 低版本 =&gt; 没有 onload 事件<br>-&gt; IE 低版本只有 onreadstatechange 方法<br>-&gt; IE 低版本接受响应只能使用 onreadystatechange 这个事件</li>
<li>在这个事件里面进行判断<ul>
<li>判断 ajax 结束了 -&gt; ajax 状态码为 4 就是结束</li>
<li>判断 本次 http 请求时成功了的 -&gt; http 状态码时 200 ~ 299 之间<br>-&gt; xhr.status 就是本次请求的 http 状态码</li>
</ul>
</li>
</ul>
</li>
</ol>
<script>
  // 创建 ajax 对象
  // 标准浏览器 
  var xhr = new XMLHttpRequest()
  // IE 低版本 
  var xhr = new ActiveXObject('Micorsoft.XMLHTTP')

  // 配置请求信息
  xhr.open('GET', './ajax1.php')
  // 404 表示请求失败了, 不管请求成功还是失败都会变成 4

  // 接受响应
  // 下面这个代码再 标准浏览器 可以接受到响应体，但是再 IE 低版本浏览器里面接受不到响应体
  xhr.onload = function () {
    console.log(xhr.responseText)
  }

  // 接受响应
  // 兼容 IE 的接受响应, 就要使用这个事件
  xhr.onreadystatechange = function () {
    if (xhr.readyState === 4 && /^2\d{2}$/.test(xhr.status)) {
      console.log('确实状态码变成 4 了')
      console.log(xhr.status)
      console.log(xhr.responseText)
    }
  }

  // 发送请求
  xhr.send()
</script>

<h2 id="封装ajax的GET-POST"><a href="#封装ajax的GET-POST" class="headerlink" title="封装ajax的GET/POST"></a>封装ajax的GET/POST</h2><h3 id="GET"><a href="#GET" class="headerlink" title="GET"></a>GET</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getSend</span>(<span class="params">url, cb</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// cb 为callback</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 1. 创建 ajax 对象</span></span><br><span class="line">  <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 2. 配置请求信息</span></span><br><span class="line">  xhr.open(<span class="string">'GET'</span>, url)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 3. 接受响应</span></span><br><span class="line">  xhr.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    cb(xhr.responseText)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 4. 发送请求</span></span><br><span class="line">  xhr.send()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line">getSend(<span class="string">'./server/get.php?a=100&amp;b=200&amp;c=300'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'请求成功'</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(res)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div>

<h3 id="POST"><a href="#POST" class="headerlink" title="POST"></a>POST</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">postSend</span>(<span class="params">url, cb, data</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// data 就是 post 请求的时候, 需要传递到后端的数据</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 1. 创建 ajax 对象</span></span><br><span class="line">  <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 2. 配置请求信息</span></span><br><span class="line">  xhr.open(<span class="string">'POST'</span>, url)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 3. 接受响应</span></span><br><span class="line">  xhr.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    cb(xhr.responseText)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 4. 单独设置请求头</span></span><br><span class="line">  xhr.setRequestHeader(<span class="string">'content-type'</span>, <span class="string">'application/x-www-form-urlencoded'</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 5. 发送请求</span></span><br><span class="line">  xhr.send(data)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line">postSend(<span class="string">'./server/post.php'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'请求成功'</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(res)</span><br><span class="line">&#125;, <span class="string">'d=400&amp;e=500'</span>)</span><br></pre></td></tr></table></figure></div>

<h2 id="ajax-php完成一个简单的登录页面"><a href="#ajax-php完成一个简单的登录页面" class="headerlink" title="ajax+php完成一个简单的登录页面"></a>ajax+php完成一个简单的登录页面</h2><p><strong>JavaScript部分：</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span>&gt;</span>用户名或密码错误<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      用户名: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"username"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">      密码: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"password"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../ajax.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../cookie.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 0. 获取元素</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> nameInp = <span class="built_in">document</span>.querySelector(<span class="string">'.username'</span>)</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> passInp = <span class="built_in">document</span>.querySelector(<span class="string">'.password'</span>)</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> errorInfo = <span class="built_in">document</span>.querySelector(<span class="string">'span'</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// 1. 绑定事件</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> form = <span class="built_in">document</span>.querySelector(<span class="string">'form'</span>)</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 绑定表单提交事件</span></span></span><br><span class="line"><span class="actionscript">    form.onsubmit = <span class="function"><span class="keyword">function</span> <span class="params">(e)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">      e = e || <span class="built_in">window</span>.event</span></span><br><span class="line">      e.preventDefault()</span><br><span class="line"></span><br><span class="line"><span class="actionscript">      <span class="comment">// 2. 获取用户输入的内容</span></span></span><br><span class="line"><span class="actionscript">      <span class="keyword">var</span> uname = nameInp.value</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">var</span> upass = passInp.value</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">      <span class="comment">// 3. 表单验证</span></span></span><br><span class="line">      if (!uname || !upass) &#123;</span><br><span class="line"><span class="actionscript">        alert(<span class="string">'请完整填写表单'</span>)</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 这里表示没有完整填写表单, 后面的代码就没有必要执行了</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span></span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">      <span class="comment">// 4. 发送请求</span></span></span><br><span class="line"><span class="actionscript">      <span class="comment">//   把用户名和密码发送到后端</span></span></span><br><span class="line"><span class="actionscript">      postSend(<span class="string">'./login.php'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(res)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> result = <span class="built_in">JSON</span>.parse(res)</span></span><br><span class="line">        if (result.code === 0) &#123;</span><br><span class="line"><span class="actionscript">          errorInfo.style.display = <span class="string">'block'</span></span></span><br><span class="line"><span class="actionscript">        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="actionscript">          <span class="comment">// 登录成功</span></span></span><br><span class="line"><span class="actionscript">          setCookie(<span class="string">'login'</span>, <span class="number">1</span>, <span class="number">30</span>)</span></span><br><span class="line"><span class="javascript">          <span class="built_in">window</span>.location.href = <span class="string">'./cart.html'</span></span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">      &#125;, <span class="string">`username=<span class="subst">$&#123;uname&#125;</span>&amp;password=<span class="subst">$&#123;upass&#125;</span>`</span>)</span></span><br><span class="line">    &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p><strong>php部分：</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">  $uname = $_POST[<span class="string">'username'</span>];</span><br><span class="line">  $upass = $_POST[<span class="string">'password'</span>];</span><br><span class="line"></span><br><span class="line">  $link = mysqli_connect(<span class="string">'localhost'</span>, <span class="string">'root'</span>, <span class="string">'root'</span>, <span class="string">'test2'</span>);</span><br><span class="line"></span><br><span class="line">  $sql = <span class="string">"SELECT * FROM `login` WHERE `username`='$uname' AND `password`='$upass'"</span>;</span><br><span class="line">  $res = mysqli_query($link, $sql);</span><br><span class="line"></span><br><span class="line">  $row = mysqli_fetch_assoc($res);</span><br><span class="line"></span><br><span class="line">  mysqli_close($link);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ($row) &#123;</span><br><span class="line">    $arr = <span class="keyword">array</span>(<span class="string">"message"</span> =&gt; <span class="string">"登录成功"</span>, <span class="string">"code"</span> =&gt; <span class="number">1</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    $arr = <span class="keyword">array</span>(<span class="string">"message"</span> =&gt; <span class="string">"登录失败"</span>, <span class="string">"code"</span> =&gt; <span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 把这关联型数组返回</span></span><br><span class="line">  print_r(json_encode($arr));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>简单了解php</title>
    <url>/jackhuang-haohua.github.io/2020/04/12/2020-05-PHP/</url>
    <content><![CDATA[<h1 id="认识php"><a href="#认识php" class="headerlink" title="认识php"></a>认识php</h1><p>　PHP即“超文本预处理器”，是一种通用开源脚本语言。PHP是在服务器端执行的脚本语言，与C语言类似，是常用的网站编程语言。</p>
<h2 id="服务器环境"><a href="#服务器环境" class="headerlink" title="服务器环境"></a>服务器环境</h2><p>　主要有以下三类</p>
<ul>
<li>WAMP: windows + apache + mysql + php</li>
<li>MAMP: Mac OS + apache + mysql + php</li>
<li>LAMP: Linux + apache + mysql + php</li>
</ul>
<h2 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h2><h3 id="①文件名"><a href="#①文件名" class="headerlink" title="①文件名"></a>①文件名</h3><p>写在test.php文件里，不允许使用中文命名，格式为</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    echo &#39;hello world&#39;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></div>

<h3 id="②当行注释与多行注释"><a href="#②当行注释与多行注释" class="headerlink" title="②当行注释与多行注释"></a>②当行注释与多行注释</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 单行注释</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  2. 多行注释</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></div>

<h3 id="③输出"><a href="#③输出" class="headerlink" title="③输出"></a>③输出</h3><p>　三种输出语法的区别：</p>
<ol>
<li>echo<ul>
<li>只能输出基本数据类型, 复杂数据类型会报错</li>
<li>遇到布尔值的时候, true 会输出 1, false 会输出空白内容</li>
</ul>
</li>
<li>print_r()<ul>
<li>可以输出所有数据类型</li>
<li>遇到布尔值的时候, true 会输出 1, false 会输出空白内容</li>
</ul>
</li>
<li>var_dump()<ul>
<li>可以输出所有数据类型</li>
<li>遇到布尔值会正常输出 true 输出 true, false 输出 false</li>
<li>并且会带有数据的类型和数据的信息</li>
</ul>
</li>
</ol>
<h3 id="④变量"><a href="#④变量" class="headerlink" title="④变量"></a>④变量</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line">$num = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">echo</span> $num;</span><br></pre></td></tr></table></figure></div>

<h3 id="⑤字符串"><a href="#⑤字符串" class="headerlink" title="⑤字符串"></a>⑤字符串</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 单引号</span></span><br><span class="line">$age = <span class="number">18</span>;</span><br><span class="line">$s1 = <span class="string">'i am $age years old'</span>;</span><br><span class="line"><span class="keyword">echo</span> $s1;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 双引号</span></span><br><span class="line">$s2 = <span class="string">"i am $age years old"</span>;</span><br><span class="line"><span class="keyword">echo</span> $s2;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 字符串拼接</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">'hello world'</span> . <span class="string">'!'</span> . <span class="string">'你好 世界'</span>;</span><br></pre></td></tr></table></figure></div>

<h3 id="⑥识别中文"><a href="#⑥识别中文" class="headerlink" title="⑥识别中文"></a>⑥识别中文</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line">header(<span class="string">'content-type: text/html;charset=utf-8;'</span>);</span><br></pre></td></tr></table></figure></div>


<h3 id="⑦分支结构（branch）"><a href="#⑦分支结构（branch）" class="headerlink" title="⑦分支结构（branch）"></a>⑦分支结构（branch）</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 分支结构</span></span><br><span class="line"><span class="keyword">if</span> ($age &gt;= <span class="number">18</span>) &#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">'成年'</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">'未成年'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 循环结构</span></span><br><span class="line">$n = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> ($n &lt; <span class="number">10</span>) &#123;</span><br><span class="line">  <span class="keyword">echo</span> $n;</span><br><span class="line">  $n++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. for 循环</span></span><br><span class="line"><span class="keyword">for</span> ($i = <span class="number">10</span>; $i &lt; <span class="number">20</span>; $i++) &#123;</span><br><span class="line">  <span class="keyword">echo</span> $i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="⑧数组和对象的表示"><a href="#⑧数组和对象的表示" class="headerlink" title="⑧数组和对象的表示"></a>⑧数组和对象的表示</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 索引型数组</span></span><br><span class="line">$arr = <span class="keyword">array</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>); </span><br><span class="line">=&gt; 等价于 [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 关联型数组</span></span><br><span class="line">$arr = <span class="keyword">array</span>(<span class="string">'name'</span> =&gt; <span class="string">'Jack'</span>, <span class="string">"age"</span> =&gt; <span class="number">18</span>, <span class="string">'gender'</span> =&gt; <span class="string">'男'</span>, <span class="string">'boo'</span> =&gt; <span class="keyword">true</span>); </span><br><span class="line">=&gt; 等价于 &#123; name: <span class="string">'Jack'</span>, age: <span class="number">18</span> &#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="⑨转格式"><a href="#⑨转格式" class="headerlink" title="⑨转格式"></a>⑨转格式</h3><p>转json格式：<code>$jsonArr = json_encode($arr);</code><br>转php格式：<code>$newArr = json_decode($jsonArr);</code></p>
<h3 id="⑩导入php文件"><a href="#⑩导入php文件" class="headerlink" title="⑩导入php文件"></a>⑩导入php文件</h3><p><code>include &quot;./base.php&quot;;</code></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
  </entry>
  <entry>
    <title>ES6中的set和map</title>
    <url>/jackhuang-haohua.github.io/2020/03/22/2020-05-ES6-MAP%E5%92%8CSET/</url>
    <content><![CDATA[<p>SET 和 MAP 数据结构，是在 ES6 出现的两种数据结构</p>
<ul>
<li>SET 就是一个类似于 数组 的数据结构</li>
<li>MAP 就是一个类似于 对象 的数据结构</li>
</ul>
<h2 id="SET-数据结构"><a href="#SET-数据结构" class="headerlink" title="SET 数据结构"></a>SET 数据结构</h2><ul>
<li>是一个类似于 数组 的数据结构</li>
<li>创建数据的语法<ol>
<li>内置构造函数创建<br>=&gt; <code>var s1 = new Set()</code></li>
</ol>
</li>
<li>创建的时候可以直接向小括号里面添加数据<br>  =&gt; <code>var s1 = new Set([1, 2, 3, true, &#39;hello world&#39;, &#39;你好世界&#39;, function () {}, ...])</code></li>
<li>方法和属性<ol>
<li>size 属性 -&gt; 表示数据结构里面有多少数据<br>=&gt; 在数组里面使用 length<br>=&gt; 在 SET 数据结构里面使用 size</li>
<li>add() 方法 -&gt; 向该数据集合里面添加数据使用<br>=&gt; 添加重复数据的时候不会添加成功<br>=&gt; 语法: 该数据结构.add(要添加的内容)</li>
<li>delete() 方法 -&gt; 用来删除数据结构里面的某个数据<br>=&gt; 语法: 该数据结构.delete(要删除的数据)</li>
<li>clear() 方法 -&gt; 用来清除数据结构中的所有数据<br>=&gt; 语法: 该数据结构.clear()</li>
<li>has() 方法 -&gt; 用来判断该数据结构里面有没有某个数据<br>=&gt; 语法: 该数据结构.has(你要判断的数据)<br>=&gt; 返回值:<br> -&gt; true: 表示有<br> -&gt; false: 表示没有</li>
<li>forEach() 方法 -&gt; 用来遍历该数据结构<br>=&gt; 注意: 这个 forEach 不是数组常用方法, 是 Set 自己的方法<br>=&gt; 语法: 该数据结构.forEach(function () {})</li>
<li>… 运算符 -&gt; 把数据结构还原成一个数组<br>=&gt; 和 Array.from() 一样的功能<br>=&gt; 语法: …该数据结构<br>=&gt; 还原成一个数组</li>
</ol>
</li>
</ul>
<p>作用: 数组去重<br>    + 因为它可以把一个数组里面的重复数据都干掉<br>    + 因为它不接受重复数据<br>    + … 还可以还原成一个数组</p>
<h3 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [</span><br><span class="line">    [<span class="string">'num'</span>, <span class="number">10</span>],</span><br><span class="line">    [<span class="string">'boo'</span>, <span class="literal">true</span>],</span><br><span class="line">    [&#123; <span class="attr">name</span>: <span class="string">'Jack'</span> &#125;, &#123; <span class="attr">name</span>: <span class="string">'Rose'</span> &#125;],</span><br><span class="line">    [<span class="string">'num'</span>, <span class="number">20</span>]</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment">// Map 数据结构</span></span><br><span class="line"><span class="keyword">var</span> m1 = <span class="keyword">new</span> <span class="built_in">Map</span>(arr)</span><br><span class="line"></span><br><span class="line"><span class="comment">// set()</span></span><br><span class="line">m1.set(<span class="string">'num'</span>, <span class="number">1</span>)</span><br><span class="line">m1.set(<span class="string">'boo'</span>, <span class="literal">true</span>)</span><br><span class="line"><span class="keyword">var</span> a = &#123; <span class="attr">name</span>: <span class="string">'Jack'</span> &#125; <span class="comment">// a === xxff11</span></span><br><span class="line">m1.set(a, &#123; <span class="attr">name</span>: <span class="string">'Rose'</span> &#125;) <span class="comment">// 存储的时候使用的就是 xxff11</span></span><br><span class="line">m1.set([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">// get()</span></span><br><span class="line"><span class="built_in">console</span>.log(m1.get(<span class="string">'num'</span>))</span><br><span class="line"><span class="built_in">console</span>.log(m1.get(<span class="string">'boo'</span>))</span><br><span class="line">获取不到结果? 因为是复杂数据类型</span><br><span class="line"><span class="built_in">console</span>.log(m1.get(a)) <span class="comment">// 能不能获取到 &#123; name: 'Rose' &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// delete()</span></span><br><span class="line">m1.delete(<span class="string">'num'</span>)</span><br><span class="line">m1.delete(<span class="string">'boo'</span>)</span><br><span class="line">m1.delete(a) <span class="comment">// 能不能删除这一条数据, 删除的也是 xxff11</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// clear()</span></span><br><span class="line">m1.clear()</span><br><span class="line"></span><br><span class="line"><span class="comment">// has()</span></span><br><span class="line"><span class="built_in">console</span>.log(m1.has(<span class="string">'num'</span>))</span><br><span class="line"><span class="built_in">console</span>.log(m1.has(<span class="string">'boo'</span>))</span><br><span class="line"><span class="built_in">console</span>.log(m1.has(a))</span><br><span class="line"><span class="built_in">console</span>.log(m1.has([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])) <span class="comment">// 因为地址问题, 这个是没有的</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// forEach()</span></span><br><span class="line">m1.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">index, item, arr</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 最好不把形参写成 index, item, arr, 因为语义化不准确</span></span><br><span class="line">  <span class="comment">//   index 是每一项的 value 值</span></span><br><span class="line">  <span class="comment">//   item 是每一项的 key</span></span><br><span class="line">  <span class="comment">//   arr 是原始数据结构</span></span><br><span class="line">  <span class="comment">// 三个参数最好是写成 value key map</span></span><br><span class="line">  <span class="built_in">console</span>.log(index, <span class="string">'-----'</span>, item, <span class="string">'-----'</span>, arr)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">m1.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">value, key, map</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value)</span><br><span class="line">  <span class="built_in">console</span>.log(key)</span><br><span class="line">  <span class="built_in">console</span>.log(map)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'-----------------------------'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(m1)</span><br><span class="line"></span><br><span class="line"><span class="comment">// ... 运算符</span></span><br><span class="line"><span class="built_in">console</span>.log([...m1])</span><br><span class="line"></span><br><span class="line"><span class="comment">// Set 数组去重</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br><span class="line"><span class="built_in">console</span>.log(arr)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 放到 Set 数据结构里面</span></span><br><span class="line"><span class="keyword">var</span> s1 = <span class="keyword">new</span> <span class="built_in">Set</span>(arr)</span><br><span class="line"><span class="built_in">console</span>.log(s1)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 ... 运算符还原成一个新的数组</span></span><br><span class="line"><span class="keyword">var</span> newArr = [...new <span class="built_in">Set</span>(arr)]</span><br><span class="line"><span class="built_in">console</span>.log(newArr)</span><br></pre></td></tr></table></figure></div>


<h2 id="MAP-数据结构"><a href="#MAP-数据结构" class="headerlink" title="MAP 数据结构"></a>MAP 数据结构</h2><ul>
<li>是一个类似于 对象 的数据结构<br>  =&gt; 对象里面的 key 只能是 string 数据类型<br>  =&gt; Map 数据结构里面的 key 可以是复杂数据类型<br>  =&gt; 我们又管 Map 数据结构叫做 值=值 的数据结构<br>  =&gt; 不接受重复数据</li>
<li>创建<ol>
<li>内置构造函数创建<br>=&gt; var m1 = new Map()</li>
</ol>
</li>
<li>创建的时候直接写入一些数据<br>  =&gt; 写入需要写成一个二维数组的形式<br>  =&gt; var m1 = new Map([ [ 每一项的 key, 每一项的 value ], [ key, value ] ])</li>
<li>常用方法和属性<ol>
<li>size 属性 -&gt; 用来获取该数据结构的长度</li>
<li>set() 方法 -&gt; 用来向该数据结构里面添加成员的<br>=&gt; 语法: 该数据结构.set(key, value)<br>=&gt; 这个 set 是 Map 数据结构的方法 set<br> -&gt; 不是 Set 数据结构<br> -&gt; new Set([])</li>
<li>get() 方法 -&gt; 用来获取数据结构里面某一个成员的<br>=&gt; 语法: 该数据结构.get(你要获取的key)<br>=&gt; 返回值: 你获取这个 key 的 value</li>
<li>delete() 方法 -&gt; 用来删除数据结构里面的数据的<br>=&gt; 语法: 该数据结构.delete(你要删除的key)</li>
<li>clear() 方法 -&gt; 用来清除该数据结构的所有数据<br>=&gt; 语法: 该数据结构.clear()</li>
<li>has() 方法 -&gt; 用来检测有没有某个数据的<br>=&gt; 语法: 该数据结构.has(你要检测的 key)<br>=&gt; 返回值:<br> -&gt; true: 表示有<br> -&gt; false: 表示没有</li>
<li>forEach() 方法 -&gt; 用来遍历该数据结构的<br>=&gt; 使用的不是数组常用方法, 是自己的<br>=&gt; 语法: 该数据结构.forEach(function () {})</li>
<li>… 运算符 -&gt; 还原成一个数组<br>=&gt; 还原成一个 二维数组的样子<br>=&gt; 语法: […该数据结构]<br>=&gt; 里面每一个小数组都有两个成员<br> -&gt; [0] 就是数据结构里面的 key<br> -&gt; [1] 就是数据结构里面的 value</li>
</ol>
</li>
</ul>
<h3 id="代码示例-1"><a href="#代码示例-1" class="headerlink" title="代码示例"></a>代码示例</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Set 常用属性和方法</span></span><br><span class="line"><span class="comment">// 这个 aa 函数地址是 xxff11</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">aa</span>(<span class="params"></span>) </span>&#123; <span class="built_in">console</span>.log(<span class="number">1</span>) &#125;</span><br><span class="line"><span class="comment">// 2 号函数, 有一个地址, xxff22</span></span><br><span class="line"><span class="keyword">var</span> s1 = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="literal">true</span>, <span class="literal">false</span>, <span class="string">'hello'</span>, <span class="number">1</span>, <span class="number">2</span>, aa, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="built_in">console</span>.log(<span class="number">2</span>) &#125;])</span><br><span class="line"></span><br><span class="line"><span class="comment">// add()</span></span><br><span class="line">s1.add(<span class="number">3</span>)</span><br><span class="line">s1.add(<span class="literal">false</span>) <span class="comment">// 重复的数据添加不进来</span></span><br><span class="line">s1.add(<span class="string">'world'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// delete()</span></span><br><span class="line">s1.delete(<span class="literal">true</span>)</span><br><span class="line">s1.delete(<span class="string">'hello'</span>)</span><br><span class="line"><span class="comment">// 删除不掉, 因为是两个地址</span></span><br><span class="line"><span class="comment">//   引用数据类型必须要依靠地址删除</span></span><br><span class="line">s1.delete(aa)</span><br><span class="line"><span class="comment">// 这个函数也有一个地址存储, xxff33</span></span><br><span class="line"><span class="comment">//   和上面哪个函数长得一样, 但是是两个地址</span></span><br><span class="line"><span class="comment">//   你现在删除的是 xxff33 这个地址</span></span><br><span class="line"><span class="comment">//   原数据类型里面的 xxff22 这个地址不会被删除</span></span><br><span class="line">s1.delete(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="built_in">console</span>.log(<span class="number">2</span>) &#125;)</span><br><span class="line"></span><br><span class="line">clear()</span><br><span class="line">s1.clear()</span><br><span class="line"></span><br><span class="line"><span class="comment">// has()</span></span><br><span class="line"><span class="built_in">console</span>.log(s1.has(<span class="literal">true</span>))</span><br><span class="line"><span class="built_in">console</span>.log(s1.has(<span class="string">'hello'</span>))</span><br><span class="line"><span class="built_in">console</span>.log(s1.has(aa))</span><br><span class="line"><span class="built_in">console</span>.log(s1.has(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="built_in">console</span>.log(<span class="number">2</span>) &#125;)) <span class="comment">// 另一个地址, false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// forEach()</span></span><br><span class="line"><span class="comment">//   数据结构里面有多少数据, 就会执行多少次函数</span></span><br><span class="line">s1.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">index, item, arr</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 数组的常用方法接收三个参数 index, item , arr</span></span><br><span class="line">  <span class="comment">//   index 索引</span></span><br><span class="line">  <span class="comment">//   item 每一项</span></span><br><span class="line">  <span class="comment">//   arr 原始数组</span></span><br><span class="line">  <span class="comment">// Set 数据结构里面的没有索引的</span></span><br><span class="line">  <span class="comment">//   index 每一项</span></span><br><span class="line">  <span class="comment">//   item 每一项</span></span><br><span class="line">  <span class="comment">//   arr 原始数据结构</span></span><br><span class="line">  <span class="built_in">console</span>.log(index, item, arr)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// ... 运算符</span></span><br><span class="line"><span class="built_in">console</span>.log([...s1])</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(s1)</span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>es6</category>
      </categories>
  </entry>
  <entry>
    <title>css中遇到的一些问题</title>
    <url>/jackhuang-haohua.github.io/2019/01/13/2020-05-css%E7%9B%92%E6%A8%A1%E5%9E%8BBFC/</url>
    <content><![CDATA[<h2 id="盒模型"><a href="#盒模型" class="headerlink" title="盒模型"></a>盒模型</h2><p>　每一个元素都可以看作是一个盒子；<br><img src="https://s1.ax1x.com/2020/05/17/Y2L3Vg.png" alt="Y2L3Vg.png"></p>
<ol>
<li>W3C标准盒模型<br>盒子大小content+padding+border；width/height值得是content区域</li>
<li>IE盒模型<br>盒子大小content；width/height指的是content+padding+border</li>
</ol>
<p>　在ie8+浏览器中使用哪个盒模型可以由box-sizing控制，默认值为content-box，即标准盒模型；如果将box-sizing设为border-box则用的是怪异盒模型。如果在ie6,7,8中DOCTYPE缺失会触发怪异模式。<br>　box-sizing设为border-box后，无论我们怎么改border和padding盒子大小始终是定义的width和height，比如利用padding调整文字位置、border-bottom比content长</p>
<h2 id="BFC"><a href="#BFC" class="headerlink" title="BFC"></a>BFC</h2><p>　<a href="https://zhuanlan.zhihu.com/p/25321647" target="_blank">参考这篇知乎文章</a>；<br>　<strong>概念：</strong>具有 BFC 特性的元素可以看作是隔离了的独立容器，容器里面的元素不会在布局上影响到外面的元素，并且 BFC 具有普通容器所没有的一些特性。</p>
<p>　<strong>触发：</strong></p>
<ul>
<li>body 根元素</li>
<li>浮动元素：float 除 none 以外的值</li>
<li>绝对定位元素：position (absolute、fixed)</li>
<li>display 为 inline-block、table-cells、flex</li>
<li>overflow 除了 visible 以外的值 (hidden、auto、scroll)<br>　<strong>规则：</strong></li>
<li>页面上一个独立的容器，内部子元素不会影响外面元素</li>
<li>同一个BFC下外边距会发生折叠</li>
<li>清除浮动 (一般用overflow:hidden)</li>
<li>阻止元素被浮动元素覆盖，实现两列自定义布局<br>　<strong>作用：</strong></li>
</ul>
<ol>
<li>阻止margin重叠=&gt;同一BFC容器内两个元素A、Bmargin会重叠，取最大，可以用另一个BFC容器把A装起来，就解决了；</li>
<li>清除浮动=&gt;overflow：hidden；</li>
<li>阻止元素被浮动元素覆盖=&gt;A元素被浮动的B元素覆盖，A触发BFC，就不再被覆盖，会移到旁边；</li>
<li>自利用第3点的原理，可以做出自适应两栏布局，如下面代码；</li>
</ol>
<p><img src="https://s1.ax1x.com/2020/05/17/Y2Oizq.png" alt="Y2Oizq.png"></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">    .aside &#123;</span><br><span class="line">        width: 100px;</span><br><span class="line">        height: 150px;</span><br><span class="line">        float: left;</span><br><span class="line">        background: #f66;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .main &#123;</span><br><span class="line">        width: auto;</span><br><span class="line">        height: 200px;</span><br><span class="line">        overflow: hidden;</span><br><span class="line">        &#x2F;* 触发BFC *&#x2F;</span><br><span class="line">        background: #fcc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .text &#123;</span><br><span class="line">        width: 500px;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br><span class="line"></span><br><span class="line">&lt;div class&#x3D;&quot;aside&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;text&quot;&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;main&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure></div>

<h2 id="图片bug"><a href="#图片bug" class="headerlink" title="图片bug"></a>图片bug</h2><p>①img图片的bug<br>图片装在盒子里，底下会有3px左右的间距，无法铺满<br>解决：display:block</p>
<p>②img<br>图片装在a标签里，会出现一点点边框<br>解决：display:block</p>
<p>③表单元素高度不一致，或者没有挨在一起<br>比如搜索框+输入框，<br>解决：float:left（同时父元素要清除浮动）<br>原因：button 遵循的是怪异盒模型规则<br>建议，将表单元素的边框去掉，给父元素添加边框</p>
]]></content>
      <categories>
        <category>css</category>
      </categories>
  </entry>
  <entry>
    <title>面对对象基础</title>
    <url>/jackhuang-haohua.github.io/2020/04/02/2020-04-%E9%9D%A2%E5%AF%B9%E5%AF%B9%E8%B1%A1/</url>
    <content><![CDATA[<h1 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h1><p>　首先，我们要明确，面向对象不是语法，是一个思想，是一种 <strong>编程模式</strong>；</p>
<ul>
<li>面向过程：关注着过程的编程模式；面向对象：关注着对象的编程模式；面向对象就是对面向过程的封装；</li>
<li>我们以前的编程思想是，每一个功能，都按照需求一步一步的逐步完成</li>
<li>我们以后的编程思想是，每一个功能，都先创造一个 <strong>原型</strong>，这个 <strong>原型</strong> 能帮我们生产出多个 <strong>实例</strong>；</li>
</ul>
<h2 id="创建对象的方式"><a href="#创建对象的方式" class="headerlink" title="创建对象的方式"></a>创建对象的方式</h2><p>　面向对象就是一个找到对象的过程</p>
<h3 id="调用系统内置的构造函数创建对象"><a href="#调用系统内置的构造函数创建对象" class="headerlink" title="调用系统内置的构造函数创建对象"></a>调用系统内置的构造函数创建对象</h3><p>　js 给我们内置了一个 Object 构造函数</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 就能得到一个空对象</span></span><br><span class="line"><span class="keyword">var</span> o1 = <span class="keyword">new</span> <span class="built_in">Object</span>() </span><br><span class="line"></span><br><span class="line"><span class="comment">// 正常操作对象</span></span><br><span class="line">o1.name = <span class="string">'Jack'</span></span><br><span class="line">o1.age = <span class="number">18</span></span><br><span class="line">o1.gender = <span class="string">'男'</span></span><br></pre></td></tr></table></figure></div>

<h3 id="字面量的方式创建一个对象"><a href="#字面量的方式创建一个对象" class="headerlink" title="字面量的方式创建一个对象"></a>字面量的方式创建一个对象</h3><p>　直接使用字面量的形式，也就是直接写 <code>{}</code>；可以在写的时候就添加好成员，也可以动态的添加</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 字面量方式创建对象</span></span><br><span class="line"><span class="keyword">var</span> o1 = &#123;</span><br><span class="line">    name: <span class="string">'Jack'</span>,</span><br><span class="line">    age: <span class="number">18</span>,</span><br><span class="line">    gender: <span class="string">'男'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 再来一个</span></span><br><span class="line"><span class="keyword">var</span> o2 = &#123;&#125;</span><br><span class="line">o2.name = <span class="string">'Rose'</span></span><br><span class="line">o2.age = <span class="number">20</span></span><br><span class="line">o2.gender = <span class="string">'女'</span></span><br></pre></td></tr></table></figure></div>

<h3 id="使用工厂函数的方式创建对象"><a href="#使用工厂函数的方式创建对象" class="headerlink" title="使用工厂函数的方式创建对象"></a>使用工厂函数的方式创建对象</h3><p>　先书写一个工厂函数， 这个工厂函数里面可以创造出一个对象，并且给对象添加一些属性，还能把对象返回，使用这个工厂函数创造对象</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 先创建一个工厂函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createObj</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 手动创建一个对象</span></span><br><span class="line">    <span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 手动的向对象中添加成员</span></span><br><span class="line">    obj.name = <span class="string">'Jack'</span></span><br><span class="line">    obj.age = <span class="number">18</span></span><br><span class="line">    obj.gender = <span class="string">'男'</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 手动返回一个对象</span></span><br><span class="line">    <span class="keyword">return</span> obj</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 使用这个工厂函数创建对象</span></span><br><span class="line"><span class="keyword">var</span> o1 = createObj()</span><br><span class="line"><span class="keyword">var</span> o2 = createObj()</span><br></pre></td></tr></table></figure></div>

<h3 id="使用自定义构造函数创建对象"><a href="#使用自定义构造函数创建对象" class="headerlink" title="使用自定义构造函数创建对象"></a>使用自定义构造函数创建对象</h3><ul>
<li><p>工厂函数需要经历三个步骤</p>
<ul>
<li>手动创建对象</li>
<li>手动添加成员</li>
<li>手动返回对象</li>
</ul>
</li>
<li><p>构造函数会比工厂函数简单</p>
<ul>
<li>自动创建对象</li>
<li>手动添加成员</li>
<li>自动返回对象</li>
</ul>
</li>
</ul>
<p>　先书写一个构造函数 -&gt; 在构造函数内向对象添加一些成员 -&gt; 使用这个构造函数创造一个对象（和 new 连用） -&gt; 构造函数可以创建对象，并且创建一个带有属性和方法的对象 -&gt; 面向对象就是要想办法找到一个有属性和方法的对象 -&gt; 面向对象就是我们自己制造 <strong>构造函数</strong> 的过程</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 先创造一个构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, gender</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.age = <span class="number">18</span></span><br><span class="line">    <span class="keyword">this</span>.name = name</span><br><span class="line">    <span class="keyword">this</span>.gender = gender</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 使用构造函数创建对象</span></span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> Person(<span class="string">'Jack'</span>, <span class="string">'man'</span>)</span><br><span class="line"><span class="keyword">var</span> p2 = <span class="keyword">new</span> Person(<span class="string">'Rose'</span>, <span class="string">'woman'</span>)</span><br></pre></td></tr></table></figure></div>

<h2 id="构造函数详解"><a href="#构造函数详解" class="headerlink" title="构造函数详解"></a>构造函数详解</h2><p>　我们的构造函数就能创造对象，所以接下来我们就详细看看<strong>构造函数</strong></p>
<h3 id="构造函数的基本使用"><a href="#构造函数的基本使用" class="headerlink" title="构造函数的基本使用"></a>构造函数的基本使用</h3><ul>
<li>和普通函数一样，只不过 <strong>调用的时候要和 new 连用</strong>，不然就是一个普通函数调用</li>
<li>首字母大写</li>
<li>当调用的时候如果不需要传递参数可以不写 <code>()</code>，建议都写上</li>
<li>构造函数内部的 this，由于和 new 连用的关系，是指向当前实例对象的</li>
<li>因为构造函数会自动返回一个对象，所以构造函数内部不要写 return</li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> o1 = <span class="keyword">new</span> Person()  <span class="comment">// 能得到一个空对象，this =&gt; o1</span></span><br><span class="line"><span class="keyword">var</span> o2 = Person()      <span class="comment">// 什么也得不到，这个就是普通函数调用</span></span><br></pre></td></tr></table></figure></div>

<h3 id="使用构造函数创建一个对象"><a href="#使用构造函数创建一个对象" class="headerlink" title="使用构造函数创建一个对象"></a>使用构造函数创建一个对象</h3><p>　在使用构造函数的时候，可以通过一些代码和内容来向当前的对象中添加一些属性和方法</p>
<h4 id="添加属性"><a href="#添加属性" class="headerlink" title="添加属性"></a>添加属性</h4><ul>
<li>下面得到的两个对象里面都有自己的成员 <strong>name</strong> 和 <strong>age</strong></li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = <span class="string">'Jack'</span></span><br><span class="line">    <span class="keyword">this</span>.age = <span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> o1 = <span class="keyword">new</span> Person()</span><br><span class="line"><span class="keyword">var</span> o2 = <span class="keyword">new</span> Person()</span><br></pre></td></tr></table></figure></div>

<h4 id="添加方法"><a href="#添加方法" class="headerlink" title="添加方法"></a>添加方法</h4><ul>
<li>也可以添加一些方法进去</li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = <span class="string">'Jack'</span></span><br><span class="line">    <span class="keyword">this</span>.age = <span class="number">18</span></span><br><span class="line">    <span class="keyword">this</span>.sayHi = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'hello constructor'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> o1 = <span class="keyword">new</span> Person()</span><br><span class="line"><span class="keyword">var</span> o2 = <span class="keyword">new</span> Person()</span><br></pre></td></tr></table></figure></div>

<p>　上面的的代码中，我们的到的两个对象中都有 <code>sayHi</code> 这个函数，<strong>但是这样会有一些缺点</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = <span class="string">'Jack'</span></span><br><span class="line">    <span class="keyword">this</span>.age = <span class="number">18</span></span><br><span class="line">    <span class="keyword">this</span>.sayHi = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'hello constructor'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第一次 new 的时候， Person 这个函数要执行一遍</span></span><br><span class="line"><span class="comment">// 执行一遍就会创造一个新的函数，并且把函数地址赋值给 this.sayHi</span></span><br><span class="line"><span class="keyword">var</span> o1 = <span class="keyword">new</span> Person()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二次 new 的时候， Person 这个函数要执行一遍</span></span><br><span class="line"><span class="comment">// 执行一遍就会创造一个新的函数，并且把函数地址赋值给 this.sayHi</span></span><br><span class="line"><span class="keyword">var</span> o2 = <span class="keyword">new</span> Person()</span><br></pre></td></tr></table></figure></div>
<ul>
<li>两个对象内的 <code>sayHi</code> 函数就是一个代码一模一样，功能一摸一样</li>
<li>但是是两个空间函数，占用两个内存空间</li>
<li>也就是说 <code>o1.sayHi</code> 是一个地址，<code>o2.sayHi</code> 是一个地址</li>
<li>所以我们执行 <code>console.log(o1 === o2.sayHi)</code> 的到的结果是 <code>false</code></li>
<li><strong>一摸一样的函数出现了两次，占用了两个空间地址</strong></li>
</ul>
<p>　解决这个问题呢，就需要用到一个东西，叫做<strong>原型</strong></p>
<h2 id="原型"><a href="#原型" class="headerlink" title="原型"></a>原型</h2><p>　原型的出现，就是为了解决 <strong>构造函数的缺点</strong>，也就是给我们提供了一个给对象添加函数的方法</p>
<h3 id="prototype"><a href="#prototype" class="headerlink" title="prototype"></a>prototype</h3><p>　<strong>每一个函数天生自带一个成员，叫做 prototype，是一个对象空间</strong>；构造函数也是函数，构造函数也有这个对象空间；这个 <code>prototype</code> 对象空间可以由函数名来访问；<br>　<strong>在函数的 prototype 里面存储的内容，不是给函数使用的，是给函数的每一个实例化对象使用的</strong>；</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">Person.prototype.name = <span class="string">'prototype'</span></span><br><span class="line">Person.prototype.sayHi = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="proto"><a href="#proto" class="headerlink" title="proto"></a><strong>proto</strong></h3><p>　<strong>每一个对象都天生自带一个成员，叫做 <code>__proto__</code>，是一个对象空间</strong>；实例化对象也是对象，那么每一个实例化对象也有这个成员；这个 <code>__proto__</code> 对象空间是给每一个对象使用的</p>
<ul>
<li>关于<code>__proto__</code><ul>
<li>如果这个对象自己本身有这个成员，那么就会直接给你结果</li>
<li>如果没有，就会去 <code>__proto__</code> 这个对象空间里面找，里面有的话就给你结果</li>
<li>这个对象是由哪个构造函数 new 出来的</li>
<li>那么这个对象的 <code>__proto__</code> 就指向这个构造函数的 <code>prototype</code></li>
</ul>
</li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">Person.prototype.sayHi = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'hello Person'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> Person()</span><br><span class="line">p1.sayHi()</span><br></pre></td></tr></table></figure></div>
<ul>
<li><p>在上面的代码中：</p>
<ul>
<li><code>p1</code> 自己没有 <code>sayHi</code> 方法，就会去自己的 <code>__proto__</code> 中查找</li>
<li><code>p1.__proto__</code> 就是 <code>Person.prototype</code></li>
<li>我们又向 <code>Person.prototype</code> 中添加了 <code>sayHi</code> 方法</li>
<li>所以 <code>p1.sayHi</code> 就可以执行了</li>
</ul>
</li>
<li><p>当我们实例化多个对象的时候，每个对象里面都没有方法，都是去所属的构造函数的 <code>protottype</code> 中查找，那么每一个对象使用的函数，其实都是同一个函数，那么就解决了我们构造函数的缺点；</p>
</li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">Person.prototype.sayHi = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'hello'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> Person()</span><br><span class="line"><span class="keyword">var</span> p2 = <span class="keyword">new</span> Person()</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(p1.sayHi === p2.sayHi)</span><br></pre></td></tr></table></figure></div>
<ul>
<li>在以上代码中：<ul>
<li><code>p1</code> 是 <code>Person</code> 的一个实例</li>
<li><code>p2</code> 是 <code>Person</code> 的一个实例</li>
<li>也就是说 <code>p1.__proto__</code> 和 <code>p2.__proto__</code> 指向的都是 <code>Person.prototype</code></li>
<li>当 <code>p1</code> 去调用 <code>sayHi</code> 方法的时候是去 <code>Person.prototype</code> 中找</li>
<li>当 <code>p2</code> 去调用 <code>sayHi</code> 方法的时候是去 <code>Person.prototype</code> 中找</li>
<li>那么两个实例化对象就是找到的一个方法，也是执行的一个方法</li>
</ul>
</li>
</ul>
<p>　我们可以得到结论：当我们写构造函数的时候，<strong>属性我们直接写在构造函数体内</strong>，<strong>方法我们写在原型上</strong></p>
<h2 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h2><p>　构造函数的 <code>prototype</code> 是一个对象，每一个对象都天生自带一个 <code>__proto__</code> 属性，那么<strong>构造函数的 prototype</strong>里面的 <code>__proto__</code> 属性又指向哪里呢？</p>
<h3 id="一个对象所属的构造函数"><a href="#一个对象所属的构造函数" class="headerlink" title="一个对象所属的构造函数"></a>一个对象所属的构造函数</h3><ul>
<li>每一个对象都有一个自己所属的构造函数，比如数组，数组所属的构造函数就是 <code>Array</code>：</li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 数组本身也是一个对象</span></span><br><span class="line"><span class="keyword">var</span> arr = []</span><br><span class="line"><span class="keyword">var</span> arr2 = <span class="keyword">new</span> <span class="built_in">Array</span>()</span><br></pre></td></tr></table></figure></div>

<ul>
<li>比如所属的构造函数就是 <code>Function</code>：</li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 函数本身也是一个对象</span></span><br><span class="line"><span class="keyword">var</span> fn = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="keyword">var</span> fun = <span class="keyword">new</span> <span class="built_in">Function</span>()</span><br></pre></td></tr></table></figure></div>

<h3 id="constructor-NaN"><a href="#constructor-NaN" class="headerlink" title="constructor"></a>constructor</h3><p>　对象的 <code>__proto__</code> 里面也有一个成员叫做 <strong><code>constructor</code></strong>，这个属性就是指向当前这个对象所属的构造函数；</p>
<h3 id="链状结构"><a href="#链状结构" class="headerlink" title="链状结构"></a>链状结构</h3><p>　当一个对象我们不知道准确的是谁构造的时候，就把它看成 <code>Object</code> 的实例化对象；<br>　也就是说，<strong>构造函数 的 prototype 的 <code>__proto__</code></strong> 指向的是 <code>Object.prototype</code>；<br>　那么 <code>Object.prototype</code> 也是个对象，那么它的 <code>__proto__</code> 又指向谁呢？<br>　因为 <code>Object</code> 的 js 中的顶级构造函数，有一句话叫 <strong>万物皆对象</strong>；<br>　所以 <code>Object.prototype</code> 就到顶了，<code>Object.prototype</code> 的 <code>__proto__</code> 就是 null。</p>
<h3 id="原型链的访问原则"><a href="#原型链的访问原则" class="headerlink" title="原型链的访问原则"></a>原型链的访问原则</h3><p>　我们之前说过，访问一个对象的成员的时候，自己没有就会去 <code>__proto__</code> 中找；<br>　接下来就是，如果 <code>__proto__</code> 里面没有就再去 <code>__proto__</code> 里面找；<br>　一直找到 <code>Object.prototype</code> 里面都没有，那么就会返回 <code>undefiend</code>。</p>
<h3 id="对象的赋值"><a href="#对象的赋值" class="headerlink" title="对象的赋值"></a>对象的赋值</h3><p>　赋值的时候，不会按照原型链的规则来，而是直接给对象自己本身赋值，如果原先有就是修改，原先没有就是添加，不会和 <code>__proto__</code> 有关系。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li>到了这里，我们就发现了面向对象的思想模式了<ul>
<li>想完成一个功能的时候；</li>
<li>先看看内置构造函数有没有提供一个完成功能对象的能力；</li>
<li>如果没有，我们就自己写一个构造函数，能创造出一个完整功能的对象；</li>
<li>然后在用我们写的构造函数 new 一个对象出来。</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>javaScript</category>
      </categories>
  </entry>
  <entry>
    <title>jQuery知识点-第一部分</title>
    <url>/jackhuang-haohua.github.io/2018/03/20/2020-05-jquery1/</url>
    <content><![CDATA[<h2 id="是什么"><a href="#是什么" class="headerlink" title="是什么"></a>是什么</h2><p>　jQuery，是一个前端类库（方法库，工具库），封装了js中各种操作DOM的方法，95%以上都是方法<br>　所以jQuery没什么难的知识点，就是更方便的使用js而已；</p>
<ul>
<li>插件 =&gt; 为了实现页面某一个单一类功能而封装的代码<br>=&gt; swiper 滑动类效果(网页 PPT 效果, 跑马灯, 轮播图, …)</li>
<li>类库 =&gt; 把我们常用的操作封装成一个一个的方法, 供我们使用<br>=&gt; jQuery (封装了各种各样的 DOM 操作)</li>
<li>框架 =&gt; 一套有自己完整生态系统的东西<br>=&gt; 所有东西都准备好了, 你只要按照规则调用<br>=&gt; Vue / React / Angular</li>
</ul>
<h2 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h2><p>选择器占了jq一大半…</p>
<h3 id="基本选择器"><a href="#基本选择器" class="headerlink" title="基本选择器"></a>基本选择器</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// jQuery 的选择器</span></span><br><span class="line"><span class="built_in">console</span>.log($(<span class="string">'ul'</span>)) <span class="comment">// 获取页面中所有的 ul 标签</span></span><br><span class="line"><span class="built_in">console</span>.log($(<span class="string">'ul li'</span>)) <span class="comment">// 获取页面中所有的 ul 下的 li 标签</span></span><br><span class="line"><span class="built_in">console</span>.log($(<span class="string">'ul &gt; li'</span>)) <span class="comment">// ul 的子元素中的 li</span></span><br><span class="line"><span class="built_in">console</span>.log($(<span class="string">'ul &gt; li:nth-child(1)'</span>)) <span class="comment">// ul 的子元素中的 li 中的第一个</span></span><br><span class="line"><span class="built_in">console</span>.log($(<span class="string">'ul &gt; li:last-child'</span>)) <span class="comment">// ul 的子元素中的 li 中的最后一个</span></span><br><span class="line"><span class="built_in">console</span>.log($(<span class="string">'ul &gt; li.a'</span>)) <span class="comment">// 获取 ul 下面所有的 li 里面类名为 a 的</span></span><br><span class="line"><span class="built_in">console</span>.log($(<span class="string">'#aaa'</span>)) <span class="comment">// 通过 id 获取元素</span></span><br><span class="line"><span class="built_in">console</span>.log($(<span class="string">'li:nth-child(odd)'</span>)) <span class="comment">// li 里面的第奇数个</span></span><br><span class="line"></span><br><span class="line">简单认识一下 jQuery 的选择器</span><br><span class="line"><span class="comment">// 原生 js 通过类名获取元素</span></span><br><span class="line"><span class="keyword">var</span> box = <span class="built_in">document</span>.getElementsByClassName(<span class="string">'box'</span>)</span><br><span class="line"><span class="comment">// 原生 js 通过标签名获取元素</span></span><br><span class="line"><span class="keyword">var</span> box2 = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'div'</span>)</span><br><span class="line"><span class="comment">// 原生 js 通过 id 名获取元素</span></span><br><span class="line"><span class="keyword">var</span> box3 = <span class="built_in">document</span>.getElementById(<span class="string">'box'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// jQuery 通过类名获取元素</span></span><br><span class="line"><span class="built_in">console</span>.log($(<span class="string">'.box'</span>)) <span class="comment">// 有多少获取多少</span></span><br><span class="line"><span class="comment">// jQuery 通过标签名获取元素</span></span><br><span class="line"><span class="built_in">console</span>.log($(<span class="string">'div'</span>)) <span class="comment">// 有多少获取多少</span></span><br><span class="line"><span class="comment">// jQuery 通过 id 名获取元素</span></span><br><span class="line"><span class="built_in">console</span>.log($(<span class="string">'#box'</span>)) <span class="comment">// 一个组合, 但是里面只有一个</span></span><br></pre></td></tr></table></figure></div>

<h3 id="特殊选择器"><a href="#特殊选择器" class="headerlink" title="特殊选择器"></a>特殊选择器</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line">/</span><br><span class="line">    <span class="number">1.</span> :first</span><br><span class="line">      =&gt; 获取第一个</span><br><span class="line">    <span class="number">2.</span> :last</span><br><span class="line">      =&gt; 获取最后一个</span><br><span class="line">    <span class="number">3.</span> :eq(数字)</span><br><span class="line">      =&gt; 获取索引为 n 的那一个</span><br><span class="line">    <span class="number">4.</span> :odd</span><br><span class="line">      =&gt; 获取索引为 奇数 的哪些</span><br><span class="line">    <span class="number">5.</span> :even</span><br><span class="line">      =&gt; 获取索引为 偶数 的哪些</span><br><span class="line">*<span class="regexp">/</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">console.log($('li:first')) /</span><span class="regexp">/ 获取 li 里面的第一个</span></span><br><span class="line"><span class="regexp">console.log($('li:last')) /</span><span class="regexp">/ 获取 li 里面的最后一个</span></span><br><span class="line"><span class="regexp">console.log($('li:eq(3)')) /</span><span class="regexp">/ 获取 li 里面的第四个</span></span><br><span class="line"><span class="regexp">console.log($('li:odd')) /</span><span class="regexp">/ 获取所有索引为 奇数的 li</span></span><br><span class="line"><span class="regexp">console.log($('li:even')) /</span><span class="regexp">/ 获取所有索引为 偶数的 li</span></span><br></pre></td></tr></table></figure></div>

<h3 id="筛选选择器"><a href="#筛选选择器" class="headerlink" title="筛选选择器"></a>筛选选择器</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"a1"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"a2"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>5<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>我是一个 span 元素<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>6<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>7<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>8<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"a9"</span>&gt;</span>9<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"a10"</span>&gt;</span>10<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./jquery/jquery.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">    /</span><br><span class="line">      jQuery 的筛选器</span><br><span class="line">        + 用在 jQuery 选择的元素集合后面</span><br><span class="line">        + 都是方法, 为了对已经选择出来的元素进行二次筛选</span><br><span class="line"></span><br><span class="line">      筛选器：</span><br><span class="line">        1. first()</span><br><span class="line">          =&gt; 筛选出来一个元素集合里面的第一个</span><br><span class="line">        2. last()</span><br><span class="line">          =&gt; 筛选出来一个元素集合里面的最后一个</span><br><span class="line">        3. eq(n)</span><br><span class="line">          =&gt; 筛选出来一个元素集合里面的索引为 n 的那一个</span><br><span class="line">        4. next()</span><br><span class="line">          =&gt; 筛选出元素的下一兄弟元素</span><br><span class="line">        5. nextAll()</span><br><span class="line">          =&gt; 筛选出元素的后面的所有兄弟元素</span><br><span class="line">          =&gt; nextAll(选择器)</span><br><span class="line">          =&gt; 拿到下面所有兄弟元素中符合选择器要求的元素</span><br><span class="line">        6. nextUntil(选择器)</span><br><span class="line">          =&gt; 筛选出元素后面所有的兄弟元素直到选择器元素为止</span><br><span class="line">        7. prev()</span><br><span class="line">          =&gt; 筛选出元素的上一个兄弟元素</span><br><span class="line">        8. prevAll()</span><br><span class="line">          =&gt; 筛选出元素的上面所有兄弟元素</span><br><span class="line">          =&gt; prevAll(选择器)</span><br><span class="line">          =&gt; 拿到上面所有兄弟元素中符合选择器条件的</span><br><span class="line">        9. prevUntil(选择器)</span><br><span class="line">          =&gt; 筛选出元素上面的所有兄弟元素直到选择器元素为止</span><br><span class="line">        10. parent()</span><br><span class="line">          =&gt; 筛选出元素的父元素</span><br><span class="line">        11. parents()</span><br><span class="line">          =&gt; 筛选出元素的所有祖先元素, 直到 html 元素为止</span><br><span class="line">          =&gt; parents(选择器)</span><br><span class="line">          =&gt; 找到所有祖先元素中满足选择器的那一个</span><br><span class="line">        12. parentsUntil(选择器)</span><br><span class="line">          =&gt; 筛选出元素的所有祖先元素, 直到 选择器 元素为止</span><br><span class="line">        13. children()</span><br><span class="line">          =&gt; 筛选出元素所有的子级元素</span><br><span class="line">          =&gt; children(选择器)</span><br><span class="line">          =&gt; 筛选出所有子元素里面符合选择器条件的元素</span><br><span class="line">        14. siblings()</span><br><span class="line">          =&gt; 筛选出所有的兄弟元素</span><br><span class="line">          =&gt; 自己不算</span><br><span class="line">          =&gt; siblings(选择器)</span><br><span class="line">          =&gt; 拿到所有兄弟元素中满足选择器要求的元素</span><br><span class="line">        15. find(选择器)</span><br><span class="line">          =&gt; 一个是在元素集合里面查找 ?</span><br><span class="line">          =&gt; 一个是在所有子元素里面查找</span><br><span class="line">            -&gt; 只要后代元素里面有就可以, 就能找得到</span><br><span class="line">        16. index()</span><br><span class="line">          =&gt; 获取到元素的索引位置</span><br><span class="line">          =&gt; 不是元素集合里面的第几个</span><br><span class="line">          =&gt; 找到他是该父元素下的第几个元素</span><br><span class="line">          =&gt; 拿到的是一个数字</span><br><span class="line">    */</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log($(<span class="string">'li'</span>).first()) <span class="comment">// 元素集合里面的第一个</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log($(<span class="string">'li'</span>).last()) <span class="comment">// 元素集合里面的第一个</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log($(<span class="string">'li'</span>).eq(<span class="number">3</span>)) <span class="comment">// 元素集合里面的索引为 3 的那一个</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// 拿到 span 的下一个兄弟元素</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log($(<span class="string">'span'</span>).next())</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 拿到 span 的后面的所有兄弟元素</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log($(<span class="string">'span'</span>).nextAll())</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 拿到 sapn 后面所有兄弟元素, 直到 .a10 元素为止, 不包含 .a10 元素</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log($(<span class="string">'span'</span>).nextUntil(<span class="string">'.a10'</span>))</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// 拿到 span 的上一个兄弟元素</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log($(<span class="string">'span'</span>).prev())</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// // 拿到 span 的上面所有的兄弟元素</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log($(<span class="string">'span'</span>).prevAll())</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// // 拿到 span 上面的所有兄弟元素, 直到 .a1 元素为止, 不包含 .a1 元素</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log($(<span class="string">'span'</span>).prevUntil(<span class="string">'.a1'</span>))</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// 拿到 span 的父元素</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log($(<span class="string">'span'</span>).parent())</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 拿到 span 的所有祖先元素, 直到 html 元素</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log($(<span class="string">'span'</span>).parents())</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 拿到 span 的所有祖先元素中的 body 元素</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log($(<span class="string">'span'</span>).parents(<span class="string">'body'</span>))</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 拿到 span 的所有祖先元素, 直到 body 为止, 不包含 body</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log($(<span class="string">'span'</span>).parentsUntil(<span class="string">'html'</span>))</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// 拿到 ul 的所有子元素</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log($(<span class="string">'ul'</span>).children())</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 拿到 ul 的所有子元素里面标签名为 span 的</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log($(<span class="string">'ul'</span>).children(<span class="string">'span'</span>))</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 拿到 ul 的所有子元素里面类名为 a9 的元素</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log($(<span class="string">'ul'</span>).children(<span class="string">'.a9'</span>))</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// 拿到 span 的所有兄弟元素</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log($(<span class="string">'span'</span>).siblings())</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 拿到 span 所有的兄弟元素中类名为 a9 的元素</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log($(<span class="string">'span'</span>).siblings(<span class="string">'.a9'</span>))</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// 找到 ul 所有后代元素中的 span</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log($(<span class="string">'ul'</span>).find(<span class="string">'.a9'</span>))</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// 拿到 span 在其父元素的第几个</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log($(<span class="string">'span'</span>).index())</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h2 id="操作元素"><a href="#操作元素" class="headerlink" title="操作元素"></a>操作元素</h2><h3 id="文本内容"><a href="#文本内容" class="headerlink" title="文本内容"></a>文本内容</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line">/</span><br><span class="line">  jQuery 操作文本内容</span><br><span class="line">    + html()</span><br><span class="line">      =&gt; 一个读写的方法</span><br><span class="line">      =&gt; 不传递参数的时候, 就是获取元素内部的超文本内容</span><br><span class="line">      =&gt; 传递一个参数的时候, 就是设置元素内部的超文本内容</span><br><span class="line">    + text()</span><br><span class="line">      =&gt; 一个读写的方法</span><br><span class="line">      =&gt; 不传递参数的时候, 就是获取元素内部的文本内容</span><br><span class="line">      =&gt; 传递一个参数的时候, 就是设置元素内部的文本内容</span><br><span class="line">    + val()</span><br><span class="line">      =&gt; 一个读写的方法, 操作 input 标签</span><br><span class="line">      =&gt; 不传递参数的时候, 就是获取标签的 value 值</span><br><span class="line">      =&gt; 传递一个参数的时候, 就是设置标签的 value 值</span><br><span class="line">  总结</span><br><span class="line">    + 获取</span><br><span class="line">      =&gt; html() 只能获取第一个元素的超文本内容</span><br><span class="line">      =&gt; text() 能获取元素集合内所有元素的文本内容合</span><br><span class="line">      =&gt; val()  只能获取第一个元素的 value 值</span><br><span class="line">    + 设置</span><br><span class="line">      =&gt; html() 给元素集合内所有元素设置超文本内容</span><br><span class="line">      =&gt; text() 给元素集合内所有元素设置文本内容</span><br><span class="line">      =&gt; val()  给元素集合内所有元素设置 value 值</span><br><span class="line">*<span class="regexp">/</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 获取 div 元素下的超文本内容</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/   前面这个选择器能获取到 两个 div 元素</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/   应该是获取所有 div 里面的文本内容</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/   但实际上: 获取的时候, 只能获取元素集合里面的第一个元素的 超文本内容</span></span><br><span class="line"><span class="regexp">console.log($('div').html())</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 设置的时候</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ $('div') 也是能获取到多个 div 元素</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 能获取多少, 就设置多少</span></span><br><span class="line"><span class="regexp">$('div').html('&lt;span&gt;我是后来的 span &lt;/</span>span&gt;<span class="string">')</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// 获取 div 内部的文本内容</span></span><br><span class="line"><span class="string">//   前面的 $('</span>div<span class="string">') 选择器能获取多个 div 元素</span></span><br><span class="line"><span class="string">//   注意: 获取多少个 div, 就能拿到多少个 div 里面的文本内容</span></span><br><span class="line"><span class="string">console.log($('</span>div<span class="string">').text())</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// 设置 div 内部的文本内容</span></span><br><span class="line"><span class="string">//   前面能获取多少div 就给多少 div 设置内容</span></span><br><span class="line"><span class="string">$('</span>div<span class="string">').text('</span>我是一段后来的文本<span class="string">')</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// 获取 input 元素的 value 值</span></span><br><span class="line"><span class="string">//   前面这个 $('</span>input<span class="string">') 能获取多个元素</span></span><br><span class="line"><span class="string">//   val() 只获取元素集合里面第一个元素的 value 值</span></span><br><span class="line"><span class="string">console.log($('</span>input<span class="string">').val())</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// 设置 input 元素的 value 值</span></span><br><span class="line"><span class="string">//    能获取多少个就设置多少个</span></span><br><span class="line"><span class="string">$('</span>input<span class="string">').val('</span>我是自己手动书写的一段文本<span class="string">')</span></span><br></pre></td></tr></table></figure></div>

<h3 id="元素类名"><a href="#元素类名" class="headerlink" title="元素类名"></a>元素类名</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">'.add'</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 给 div 元素添加类名</span></span><br><span class="line">  $(<span class="string">'div'</span>).addClass(<span class="string">'box'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">$(<span class="string">'.del'</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 移除 div 元素的类名</span></span><br><span class="line">  $(<span class="string">'div'</span>).removeClass(<span class="string">'box'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">$(<span class="string">'.toggle'</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 切换 div 元素的类名</span></span><br><span class="line">  $(<span class="string">'div'</span>).toggleClass(<span class="string">'container'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">$(<span class="string">'.has'</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 判断有没有 box 类名</span></span><br><span class="line">  <span class="built_in">console</span>.log($(<span class="string">'div'</span>).hasClass(<span class="string">'box'</span>))</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div>

<h3 id="元素样式"><a href="#元素样式" class="headerlink" title="元素样式"></a>元素样式</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// $('div') 能获取多个元素</span></span><br><span class="line"><span class="comment">//   这个获取样式只能获取元素集合里面第一个元素的样式</span></span><br><span class="line"><span class="built_in">console</span>.log($(<span class="string">'div'</span>).css(<span class="string">'width'</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置元素的样式</span></span><br><span class="line"><span class="comment">//   能获取多少个就设置多少个</span></span><br><span class="line">$(<span class="string">'div'</span>)</span><br><span class="line">  .css(<span class="string">'width'</span>, <span class="number">300</span>)</span><br><span class="line">  .css(<span class="string">'height'</span>, <span class="number">400</span>)</span><br><span class="line">  .css(<span class="string">'opacity'</span>, <span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 批量设置样式</span></span><br><span class="line">$(<span class="string">'div'</span>)</span><br><span class="line">  .css(&#123;</span><br><span class="line">    width: <span class="number">200</span>,</span><br><span class="line">    height: <span class="string">'300px'</span>,</span><br><span class="line">    opacity: <span class="number">0.8</span>,</span><br><span class="line">    float: <span class="string">'left'</span></span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure></div>

<h3 id="元素属性"><a href="#元素属性" class="headerlink" title="元素属性"></a>元素属性</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line">/</span><br><span class="line">  jQuery 操作元素属性</span><br><span class="line">    + attr() 和 removeAttr()</span><br><span class="line">      =&gt; attr: attribute</span><br><span class="line">      =&gt; attr()</span><br><span class="line">        -&gt; 是一个读写的方法</span><br><span class="line">        -&gt; attr(要读取的属性名): 传递一个参数的时候是读取</span><br><span class="line">        -&gt; attr(属性名, 属性值): 传递两个参数的时候是设置</span><br><span class="line">      =&gt; removeAttr()</span><br><span class="line">        -&gt; 专门用来移除属性的</span><br><span class="line">    + attr 这套方法的注意:</span><br><span class="line">      =&gt; 所有的属性都会显示在标签上(原生属性和自定义属性)</span><br><span class="line">      =&gt; 不管你设置的是什么数据类型, 都会给你变成字符串</span><br><span class="line">      =&gt; removeAttr 删除 attr 设置的属性, 有多少删除多少(针对自定义属性)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    + prop() 和 removeProp()</span><br><span class="line">      =&gt; prop: property</span><br><span class="line">      =&gt; prop()</span><br><span class="line">        -&gt; 一个读写的方法</span><br><span class="line">        -&gt; prop(要读取的属性名): 传递一个参数的时候是读取</span><br><span class="line">        -&gt; prop(属性名, 属性值): 传递两个参数的时候是设置</span><br><span class="line">      =&gt; removeProp()</span><br><span class="line">        -&gt; 专门用来移除属性的</span><br><span class="line">    + prop 这套方法的注意:</span><br><span class="line">      =&gt; 非原生属性, 不会显示在标签上, 但是你可以获取使用</span><br><span class="line">      =&gt; 你存储的是什么数据类型, 获取的时候就是什么数据类型</span><br><span class="line">      =&gt; removeProp 删除 prop 设置的属性, 有多少删除多少(针对自定义属性)</span><br><span class="line">      =&gt; removeProp() 不能删除原生属性 id <span class="class"><span class="keyword">class</span> <span class="title">style</span> 这样的</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">    + <span class="title">data</span>() 和 <span class="title">removeData</span>()</span></span><br><span class="line">      + data: data</span><br><span class="line">      =&gt; data()</span><br><span class="line">        -&gt; 一个读写的方法</span><br><span class="line">        -&gt; data(要读取的属性名): 传递一个参数的时候是读取</span><br><span class="line">        -&gt; data(属性名, 属性值): 传递两个参数的时候是设置</span><br><span class="line">      =&gt; removeData()</span><br><span class="line">        -&gt; 专门用来删除数据的</span><br><span class="line">    + data 这套方法的注意:</span><br><span class="line">      =&gt; 和元素的原生属性没有关系, 可以设置 id, 但是和元素的 id 没关系</span><br><span class="line">      =&gt; 就是在元素身上给你开辟一个地方, 存储一些数据</span><br><span class="line">      =&gt; 你设置的是什么数据类型, 拿到的就是什么数据类型</span><br><span class="line">      =&gt; removeData 删除 data 设置的属性</span><br><span class="line">      =&gt; data() 方法也能读取写在标签上的 H5 标准自定义属性</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">三个方法存储内容</span><br><span class="line">  + attr 设置的自定义属性存储在标签身上</span><br><span class="line">  + prop 设置的自定义属性存储在元素对象里面</span><br><span class="line">  + data 设置的自定义属性存储在元素对象里面单独开辟的一个对象</span><br><span class="line">*<span class="regexp">/</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ data 一套</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/   给 div 设置一个自定义属性叫做 id, 值是 box3</span></span><br><span class="line"><span class="regexp">$('div').data('id', 'box3')</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 读取 div 身上的写好的 H5 标准的自定义属性 data-id</span></span><br><span class="line"><span class="regexp">console.log($('div').data('id'))</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ prop 一套</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/   给 div 设置一个 hello 属性, 值是 world</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/   不是没设置上, 是不显示出来</span></span><br><span class="line"><span class="regexp">$('div').prop('hello', 'world')</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">$('div').prop('number', 888)</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 获取刚才设置的 number 属性</span></span><br><span class="line"><span class="regexp">console.log($('div').prop('number'))</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ attr 一套</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 给 div 设置一个 hello 属性, 值为 world</span></span><br><span class="line"><span class="regexp">$('div').attr('hello', 'world')</span></span><br><span class="line"><span class="regexp">$('div').attr('number', 666)</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 获取 div 的 number 属性</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 只能获取元素集合中的第一个元素的属性</span></span><br><span class="line"><span class="regexp">console.log($('div').attr('number'))</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">$('button').click(function () &#123;</span></span><br><span class="line"><span class="regexp">  $('div').removeAttr('number')</span></span><br><span class="line"><span class="regexp">&#125;)</span></span><br></pre></td></tr></table></figure></div>

<h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line">/</span><br><span class="line">  jQuery 绑定事件</span><br><span class="line">    + 给元素绑定一个事件</span><br><span class="line">    + on() 方法是专门用来绑定事件的</span><br><span class="line">      =&gt; jQuery 里面通用的事件绑定方式</span><br><span class="line">      =&gt; 通过传递不同的参数来达到不同的效果</span><br><span class="line">    + one() 方法是专门用来绑定一个只能执行一次的方法</span><br><span class="line">      =&gt; 传递的参数个数和意义 于 on 方法一摸一样</span><br><span class="line">      =&gt; 绑定上的事件只能执行一次</span><br><span class="line">    + off() 方法是专门用来解绑一个元素的事件的</span><br><span class="line">      =&gt; 有两种使用方式</span><br><span class="line">      =&gt; off(<span class="string">'事件类型'</span>) : 给该事件类型的所有事件处理函数解绑</span><br><span class="line">      =&gt; off(<span class="string">'事件类型'</span>, 事件处理函数) : 解绑指定事件处理函数</span><br><span class="line">      =&gt; on 和 one 绑定的事件它都能移除</span><br><span class="line">    + trigger() 方法是专门用来触发事件的方法</span><br><span class="line">      =&gt; 不通过点击, 通过代码把事件触发了</span><br><span class="line">      =&gt; trigger(<span class="string">'事件类型'</span>) : 把该元素的事件给触发了</span><br><span class="line">    + 常用事件</span><br><span class="line">      =&gt; jQuery 把一些常用事件直接做成了函数</span><br><span class="line">        -&gt; click()</span><br><span class="line">        -&gt; mouseover()</span><br><span class="line">      =&gt; 直接使用就可以了</span><br><span class="line">      =&gt; 使用 click 举一个例子</span><br><span class="line">        -&gt; click(事件处理函数)</span><br><span class="line">        -&gt; click(参数, 事件处理函数)</span><br><span class="line">        -&gt; 参数: 触发事件的时候传递到事件里面的数据</span><br><span class="line">    + hover()</span><br><span class="line">      =&gt; jQuery 里面唯一一个很特殊的事件函数</span><br><span class="line">      =&gt; 表示一个鼠标悬停动作</span><br><span class="line">      =&gt; 自己唯一的使用方式</span><br><span class="line">        -&gt; hover(鼠标移入的时候触发, 鼠标移出的时候触发)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  on 方法的各种参数描述</span><br><span class="line">    <span class="number">1.</span> on(<span class="string">'事件类型'</span>, 事件处理函数)</span><br><span class="line">      =&gt; 给元素集合内所有的元素绑定一个事件</span><br><span class="line">    <span class="number">2.</span> on(<span class="string">'事件类型'</span>, <span class="string">'事件委托'</span>, 事件处理函数)</span><br><span class="line">      =&gt; 把 事件委托 位置的元素的事件 委托给了前面的元素集合</span><br><span class="line">    <span class="number">3.</span> on(<span class="string">'事件类型'</span>, 复杂数据类型, 事件处理函数)</span><br><span class="line">      =&gt; 给每一个元素绑定一个事件, 复杂数据类型是触发事件的时候传递的参数</span><br><span class="line">    <span class="number">4.</span> on(<span class="string">'事件类型'</span>, <span class="string">'事件委托'</span>, 任意数据类型, 事件处理函数)</span><br><span class="line">      =&gt; 做一个事件委托的形式, 第三个参数位置的数据</span><br><span class="line">      =&gt; 是触发事件的时候, 可以传递进去的数据</span><br><span class="line">    <span class="number">5.</span> on(对象)</span><br><span class="line">      =&gt; 给一个元素绑定多个事件的方式</span><br><span class="line">*<span class="regexp">/</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ hover 事件</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/   如果你只传递一个函数, 那么移入移出都触发这一个函数</span></span><br><span class="line"><span class="regexp">$('ul')</span></span><br><span class="line"><span class="regexp">  .hover(</span></span><br><span class="line"><span class="regexp">    function () &#123; console.log('鼠标移入') &#125;,</span></span><br><span class="line"><span class="regexp">    function () &#123; console.log('鼠标移出') &#125;</span></span><br><span class="line"><span class="regexp">  )</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 常用事件</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 给 ul 绑定了一个点击事件</span></span><br><span class="line"><span class="regexp">$('ul').click([1, 2, 3, 4, true], function (e) &#123;</span></span><br><span class="line"><span class="regexp">  console.log('你好 世界')</span></span><br><span class="line"><span class="regexp">  console.log(e)</span></span><br><span class="line"><span class="regexp">&#125;)</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">$('ul').mouseover(function () &#123;</span></span><br><span class="line"><span class="regexp">  console.log('鼠标移入')</span></span><br><span class="line"><span class="regexp">&#125;)</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">function handlerA() &#123; console.log('我是事件处理函数 handlerA') &#125;</span></span><br><span class="line"><span class="regexp">function handlerB() &#123; console.log('我是事件处理函数 handlerB') &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 给 ul 的 click 绑定了两个事件处理函数</span></span><br><span class="line"><span class="regexp">$('ul').on('click', handlerA)</span></span><br><span class="line"><span class="regexp">$('ul').on('click', handlerB)</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ off 方法</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/   把 ul 身上 click 的事件处理函数全部移除</span></span><br><span class="line"><span class="regexp">$('ul').off('click')</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/   把 ul 身上 click 的事件处理函数 handlerA 给移除</span></span><br><span class="line"><span class="regexp">$('ul').off('click', handlerA)</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ trigger 方法</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/   触发 ul 的 click 行为</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/   就会导致 ul 的事件处理函数执行</span></span><br><span class="line"><span class="regexp">$('ul').trigger('click')</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ one 方法</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 给每一个 li 绑定了一个点击事件, 每一个 li 只有第一次点击的时候好使</span></span><br><span class="line"><span class="regexp">$('li').one('click', function () &#123;</span></span><br><span class="line"><span class="regexp">  console.log('我点击了')</span></span><br><span class="line"><span class="regexp">&#125;)</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ on 方法的各种参数</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 给一个元素绑定多个事件</span></span><br><span class="line"><span class="regexp">$('ul')</span></span><br><span class="line"><span class="regexp">  .on('click', function () &#123; console.log('点击事件') &#125;)</span></span><br><span class="line"><span class="regexp">  .on('mouseover', function () &#123; console.log('移入事件') &#125;)</span></span><br><span class="line"><span class="regexp">  .on('mouseout', function () &#123; console.log('移出事件') &#125;)</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 给 ul 同时绑定三个事件</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/   这个时候就不能传递参数了</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/   这个时候就不要贪图事件委托了</span></span><br><span class="line"><span class="regexp">$('ul').on(&#123;</span></span><br><span class="line"><span class="regexp">  click: function () &#123; console.log('点击事件') &#125;,</span></span><br><span class="line"><span class="regexp">  mouseover: function () &#123; console.log('移入事件') &#125;,</span></span><br><span class="line"><span class="regexp">  mouseout: function () &#123; console.log('移出事件') &#125;</span></span><br><span class="line"><span class="regexp">&#125;)</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 给 $('li') 获取到的所有元素绑定一个点击事件</span></span><br><span class="line"><span class="regexp">$('li').on('click', function () &#123;</span></span><br><span class="line"><span class="regexp">  console.log('我被点击了')</span></span><br><span class="line"><span class="regexp">&#125;)</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 给所有的 li 标签设置事件委托, 委托给了 ul</span></span><br><span class="line"><span class="regexp">$('ul').on('click', 'li', function () &#123;</span></span><br><span class="line"><span class="regexp">  console.log('我被点击了, 事件委托')</span></span><br><span class="line"><span class="regexp">&#125;)</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 给所有的 li 添加 一个点击事件</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/   每一个 li 点击的时候, 都能得到中间那个对象</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/   就是事件对象了面</span></span><br><span class="line"><span class="regexp">$('li').on('click', &#123; name: 'Jack', age: 18 &#125;, function (e) &#123;</span></span><br><span class="line"><span class="regexp">  console.log('我被点击了, li')</span></span><br><span class="line"><span class="regexp">  console.log(e)</span></span><br><span class="line"><span class="regexp">&#125;)</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 给 li 做一个事件委托, 委托给了 ul</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/   每一个 li 点击的时候都能得到一个传递进去的数据叫做 hello world</span></span><br><span class="line"><span class="regexp">$('ul').on('click', 'li', 'hello world', function (e) &#123;</span></span><br><span class="line"><span class="regexp">  console.log('我又被点击了')</span></span><br><span class="line"><span class="regexp">  console.log(e)</span></span><br><span class="line"><span class="regexp">  console.log(this) /</span><span class="regexp">/ 就是你点击的那一个 li</span></span><br><span class="line"><span class="regexp">&#125;)</span></span><br></pre></td></tr></table></figure></div>

<h2 id="操作节点"><a href="#操作节点" class="headerlink" title="操作节点"></a>操作节点</h2><p>创建，插入，删除，替换，克隆等…</p>
<h3 id="创建节点"><a href="#创建节点" class="headerlink" title="创建节点"></a>创建节点</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line">/</span><br><span class="line">  jQuery 创建节点</span><br><span class="line">    + $() 或者 jQuery()</span><br><span class="line">    + () 里面传递一个 html 格式文本的时候就是创建节点</span><br><span class="line"></span><br><span class="line">  $()</span><br><span class="line">    + () 里面传递一个选择器的时候, 就是获取页面中的 DOM 元素</span><br><span class="line">    + () 里面传递一个 html 格式文本的时候, 就是创建一个 DOM 元素</span><br><span class="line">*<span class="regexp">/</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">$('&lt;div&gt;我是一个创建出来的节点&lt;/</span>div&gt;<span class="string">')</span></span><br></pre></td></tr></table></figure></div>

<h3 id="插入节点"><a href="#插入节点" class="headerlink" title="插入节点"></a>插入节点</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line">/</span><br><span class="line">  jQuery 插入节点</span><br><span class="line">    + 内部插入(父子关系)</span><br><span class="line">      <span class="number">1.</span> append()</span><br><span class="line">        =&gt; 页面元素.append(要插入的元素)</span><br><span class="line">        =&gt; 放在页面元素的子元素位置, 放在末尾</span><br><span class="line">      <span class="number">2.</span> appendTo()</span><br><span class="line">        =&gt; 要插入的元素.appendTo(页面元素)</span><br><span class="line">        =&gt; 放在页面元素的子元素位置, 放在末尾</span><br><span class="line">      <span class="number">3.</span> prepend()</span><br><span class="line">        =&gt; 页面元素.prepend(要插入的元素)</span><br><span class="line">        =&gt; 放在页面元素的子元素位置, 放在最前</span><br><span class="line">      <span class="number">4.</span> prependTo()</span><br><span class="line">        =&gt; 要插入的元素.prependTo(页面元素)</span><br><span class="line">        =&gt; 放在页面元素的子元素位置, 放在最前</span><br><span class="line">    + 外部插入(兄弟关系)</span><br><span class="line">      <span class="number">5.</span> after()</span><br><span class="line">        =&gt; 页面元素.after(要插入的元素)</span><br><span class="line">        =&gt; 放在页面元素的下一个兄弟元素位置</span><br><span class="line">      <span class="number">6.</span> insertAfter()</span><br><span class="line">        =&gt; 要插入的元素.insertAfter(页面元素)</span><br><span class="line">        =&gt; 放在页面元素的下一个兄弟元素位置</span><br><span class="line">      <span class="number">7.</span> before()</span><br><span class="line">        =&gt; 页面元素.before(要插入的元素)</span><br><span class="line">        =&gt; 放在页面元素的上一个兄弟元素位置</span><br><span class="line">      <span class="number">8.</span> insertBefore()</span><br><span class="line">        =&gt; 要插入的元素.insertBefore(页面元素)</span><br><span class="line">        =&gt; 放在页面元素的上一个兄弟元素位置</span><br><span class="line">*<span class="regexp">/</span></span><br></pre></td></tr></table></figure></div>

<h3 id="删除节点"><a href="#删除节点" class="headerlink" title="删除节点"></a>删除节点</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line">/</span><br><span class="line">  jQuery 删除节点</span><br><span class="line">    <span class="number">1.</span> empty() 空</span><br><span class="line">      =&gt; 页面元素.empty()</span><br><span class="line">      =&gt; 把页面元素变成一个空标签</span><br><span class="line">      =&gt; 所有的子元素都干掉</span><br><span class="line">    <span class="number">2.</span> remove() 移除</span><br><span class="line">      =&gt; 页面元素.remove()</span><br><span class="line">      =&gt; 把自己从页面里面移除</span><br><span class="line">    + 没有删除某一个子节点的方法</span><br><span class="line">      =&gt; 想删除子节点怎么办</span><br><span class="line">      =&gt; JQ选择器 直接找到要删除的节点, remove()</span><br><span class="line"></span><br><span class="line">      例如：</span><br><span class="line">      $(<span class="string">'div'</span>).children(<span class="string">'p'</span>).remove()</span><br><span class="line">*<span class="regexp">/</span></span><br></pre></td></tr></table></figure></div>

<h3 id="替换节点"><a href="#替换节点" class="headerlink" title="替换节点"></a>替换节点</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line">/</span><br><span class="line">  jQuery 替换节点</span><br><span class="line">    + 把页面中某一个节点替换成一个其他节点</span><br><span class="line">    <span class="number">1.</span> replaceWith()</span><br><span class="line">      =&gt; 页面元素.replaceWith(替换元素)</span><br><span class="line">      =&gt; 用替换元素把页面元素换掉，有多少替换多少</span><br><span class="line"></span><br><span class="line">      <span class="keyword">var</span> $span = $(<span class="string">'&lt;span&gt;我是创建出来的 span 标签&lt;/span&gt;'</span>)</span><br><span class="line">      $(<span class="string">'div'</span>).replaceWith($span)</span><br><span class="line"></span><br><span class="line">    <span class="number">2.</span> replaceAll()</span><br><span class="line">      =&gt; 替换元素.replaceAll(页面元素)</span><br><span class="line">      =&gt; 页面元素被替换元素替换掉了，有多少替换多少</span><br><span class="line"></span><br><span class="line">      <span class="keyword">var</span> $span = $(<span class="string">'&lt;span&gt;我是创建出来的 span 标签&lt;/span&gt;'</span>)</span><br><span class="line">      $span.replaceAll($(<span class="string">'div'</span>))</span><br><span class="line">*<span class="regexp">/</span></span><br></pre></td></tr></table></figure></div>

<h3 id="克隆节点"><a href="#克隆节点" class="headerlink" title="克隆节点"></a>克隆节点</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line">/</span><br><span class="line">  jQuery 克隆节点</span><br><span class="line">    + 复制一份一摸一样的元素</span><br><span class="line">    <span class="number">1.</span> clone()</span><br><span class="line">      =&gt; 专门用来克隆节点的</span><br><span class="line">      =&gt; 页面元素.clone()</span><br><span class="line">      =&gt; 返回值: 就是克隆出来的元素集合, 集合里面有一个元素</span><br><span class="line">                  就是克隆好的节点</span><br><span class="line">      =&gt; 接收两个参数</span><br><span class="line">        -&gt; clone(布尔值, 布尔值)</span><br><span class="line">        -&gt; 第一个参数: 默认值是 <span class="literal">false</span>, 表示是否克隆元素的事件</span><br><span class="line">        -&gt; 第二个参数: 默认是跟随第一个, 表示是否克隆子节点的事件</span><br><span class="line">        -&gt; 注意: 当第一个参数为 <span class="literal">false</span> 的时候, 第二个参数没有意义</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> $cloneDiv = $(<span class="string">'div'</span>).clone(<span class="literal">true</span>, <span class="literal">true</span>)</span><br><span class="line"></span><br><span class="line">  回忆:</span><br><span class="line">    + cloneNode()</span><br><span class="line">      =&gt; <span class="literal">true</span> 表示克隆子节点</span><br><span class="line">      =&gt; <span class="literal">false</span> 表示不克隆子节点</span><br><span class="line">    + clone()</span><br><span class="line">      =&gt; 你传递不传递参数</span><br><span class="line">      =&gt; 都会克隆子节点</span><br><span class="line">*<span class="regexp">/</span></span><br></pre></td></tr></table></figure></div>

<h2 id="获取元素尺寸"><a href="#获取元素尺寸" class="headerlink" title="获取元素尺寸"></a>获取元素尺寸</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line">/</span><br><span class="line">  jQuery 获取元素尺寸</span><br><span class="line">    + 尺寸: 元素的占地面积</span><br><span class="line">      -&gt; width 和 height</span><br><span class="line">      -&gt; padding</span><br><span class="line">      -&gt; border</span><br><span class="line">      -&gt; margin</span><br><span class="line"></span><br><span class="line">    + 三套方法, 四种使用方式</span><br><span class="line">    + 这些方法都是不考虑盒模型的状态(不管是什么盒模型, 都是固定区域)</span><br><span class="line">      <span class="number">1.</span> width() 和 height()</span><br><span class="line">        =&gt; 获取元素的 内容 区域的尺寸</span><br><span class="line">      <span class="number">2.</span> innerWidth() 和 innerHeight()</span><br><span class="line">        =&gt; 获取元素的 内容 + padding 区域的尺寸</span><br><span class="line">      <span class="number">3.</span> outerWidth() 和 outerHeight()</span><br><span class="line">        =&gt; 获取元素的 内容 + padding + border 区域的尺寸</span><br><span class="line">      <span class="number">4.</span> outerWidth(<span class="literal">true</span>) 和 outerHeight(<span class="literal">true</span>)</span><br><span class="line">        =&gt; 获取元素的 内容 + padding + border + margin 区域的尺寸</span><br><span class="line">*<span class="regexp">/</span></span><br></pre></td></tr></table></figure></div>

<h2 id="获取元素位置"><a href="#获取元素位置" class="headerlink" title="获取元素位置"></a>获取元素位置</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line">/</span><br><span class="line">  jQuery 获取元素位置</span><br><span class="line">    + 获取元素相对于谁的位置关系</span><br><span class="line">    <span class="number">1.</span> offset() offset: 偏移量</span><br><span class="line">      =&gt; 是一个读写的属性</span><br><span class="line">      =&gt; 读取</span><br><span class="line">        -&gt; 不传递参数就是读取</span><br><span class="line">        -&gt; 读到的元素相对于页面的位置关系</span><br><span class="line">        -&gt; 返回值是一个对象 &#123; <span class="attr">left</span>: xxx, <span class="attr">top</span>: xxx &#125;</span><br><span class="line">      =&gt; 书写</span><br><span class="line">        -&gt; 传递一个对象就是写入 &#123; <span class="attr">left</span>: xxx, <span class="attr">top</span>: xxx &#125;</span><br><span class="line">        -&gt; 注意: **绝对写入**</span><br><span class="line">        -&gt; 不管你本身和页面的尺寸是什么样</span><br><span class="line">          =&gt; 我说写多少就是多少</span><br><span class="line">    <span class="number">2.</span> position() postition: 定位</span><br><span class="line">      =&gt; 只读的方法</span><br><span class="line">      =&gt; 读取:</span><br><span class="line">        -&gt; 元素相对于定位父级的位置关系</span><br><span class="line">        -&gt; 得到的也是一个对象 &#123; <span class="attr">left</span>: xxx,  <span class="attr">top</span>: xxx &#125;</span><br><span class="line">        -&gt; 如果你写的是 right 或者 bottom, 会自动计算成 left 和 top 值给你</span><br><span class="line">*<span class="regexp">/</span></span><br></pre></td></tr></table></figure></div>

<h2 id="jq循环遍历"><a href="#jq循环遍历" class="headerlink" title="jq循环遍历"></a>jq循环遍历</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line">/</span><br><span class="line">  jQuery 的方法</span><br><span class="line">    + ready() 事件</span><br><span class="line">      + 类似于 <span class="built_in">window</span>.onload 事件</span><br><span class="line">      + <span class="built_in">window</span>.onload -&gt; 会在页面所有资源加载完毕执行</span><br><span class="line">      + ready() -&gt; 会在页面 html 结构加载完毕后执行</span><br><span class="line">      + 也叫做 jQuery 的入口函数</span><br><span class="line">      + 有一个简写的形式</span><br><span class="line">        =&gt; $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;)</span><br><span class="line">    + each() 方法</span><br><span class="line">      + 类似于 forEach(), 遍历数组的</span><br><span class="line">      + jQuery 的元素集合, 是一个 jQuery 数组, 不是一个数组, 不能使用 forEach()</span><br><span class="line">      + forEach语法： forEach(<span class="function"><span class="keyword">function</span> (<span class="params">item, index</span>) </span>&#123;&#125;)</span><br><span class="line">      + 语法：           each(<span class="function"><span class="keyword">function</span> (<span class="params">index, item</span>) </span>&#123;&#125;)</span><br><span class="line">      + 比较少用到, 因为 jQuery 隐式迭代</span><br><span class="line">        =&gt; 自动遍历</span><br><span class="line">*<span class="regexp">/</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">jQuery 里面有一个 each 函数</span></span><br><span class="line"><span class="regexp">  专门用来遍历的</span></span><br><span class="line"><span class="regexp">$('div') =&gt; [div, div, div, div, div]</span></span><br><span class="line"><span class="regexp">  遍历时为了拿到数组里面的每一个</span></span><br><span class="line"><span class="regexp">$('div').each(function (index, item) &#123;</span></span><br><span class="line"><span class="regexp">  /</span><span class="regexp">/ index -&gt; 就是索引</span></span><br><span class="line"><span class="regexp">  /</span><span class="regexp">/ item -&gt; 就是每一项</span></span><br><span class="line"><span class="regexp">  console.log(index, item)</span></span><br><span class="line"><span class="regexp">&#125;)</span></span><br></pre></td></tr></table></figure></div>

<h2 id="获取scroll"><a href="#获取scroll" class="headerlink" title="获取scroll"></a>获取scroll</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line">/</span><br><span class="line">  jQuery 获取卷去的尺寸</span><br><span class="line">    + scrollTop()</span><br><span class="line">      =&gt; 原生 js 里面 <span class="built_in">document</span>.documentElement.scrollTop</span><br><span class="line">      =&gt; 读写的方法</span><br><span class="line">      =&gt; 不传递参数的时候就是获取卷去的高度</span><br><span class="line">      =&gt; 传递一个参数就是设置卷去的高度</span><br><span class="line">    + scrollLeft()</span><br><span class="line">      =&gt; 原生 js 里面 <span class="built_in">document</span>.documentElement.scrollLeft</span><br><span class="line">      =&gt; 读写的方法</span><br><span class="line">      =&gt; 不传递参数的时候就是获取卷去的宽度</span><br><span class="line">      =&gt; 传递一个参数的时候就是设置卷去的宽度</span><br><span class="line">    + 设置的时候不会滚动回去, 而是直接跳转到固定位置</span><br><span class="line">      =&gt; 一个是定时器</span><br><span class="line">      =&gt; 一个就是运动函数</span><br><span class="line">*<span class="regexp">/</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 获取浏览器卷去的高度, 最好是在滚动事件里面获取</span></span><br><span class="line"><span class="regexp">$(window).scroll(function () &#123;</span></span><br><span class="line"><span class="regexp">  /</span><span class="regexp">/ 事件就会随着浏览器的滚动触发</span></span><br><span class="line"><span class="regexp">  /</span><span class="regexp">/ console.log($(window).scrollTop())</span></span><br><span class="line"><span class="regexp">  /</span><span class="regexp">/ console.log($(window).scrollLeft())</span></span><br><span class="line"><span class="regexp">&#125;)</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 设置卷去的宽度和高度</span></span><br><span class="line"><span class="regexp">$('button').click(() =&gt; &#123;</span></span><br><span class="line"><span class="regexp">  /</span><span class="regexp">/ 卷去的高度设置为 0, 回到顶部</span></span><br><span class="line"><span class="regexp">  $(window).scrollTop(0)</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">  /</span><span class="regexp">/ 卷去的宽度设置为 0, 回到最左边</span></span><br><span class="line"><span class="regexp">  $(window).scrollLeft(0)</span></span><br><span class="line"><span class="regexp">&#125;)</span></span><br></pre></td></tr></table></figure></div>

<h2 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h2><p>主要分为5中：标准/折叠/渐隐渐现/综合/停止动画</p>
<h3 id="标准动画"><a href="#标准动画" class="headerlink" title="标准动画"></a>标准动画</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line">/</span><br><span class="line">  jQuery 的标准动画</span><br><span class="line">    <span class="number">1.</span> show() -&gt; 显示</span><br><span class="line">      =&gt; 语法: show(时间, 运动曲线, 运动结束的函数)</span><br><span class="line">    <span class="number">2.</span> hide() -&gt; 隐藏</span><br><span class="line">      =&gt; 语法: hide(时间, 运动曲线, 运动结束的函数)</span><br><span class="line">    <span class="number">3.</span> toggle() -&gt; 切换(如果是隐藏就显示, 如果是显示就隐藏)</span><br><span class="line">      =&gt; 语法: toggle(时间, 运动曲线, 运动结束的函数)</span><br><span class="line">    + 上面三个方法参数都是选填</span><br><span class="line">*<span class="regexp">/</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 点击这个按钮让 div 显示</span></span><br><span class="line"><span class="regexp">$('.show').click(() =&gt; &#123;</span></span><br><span class="line"><span class="regexp">  $('div').show(2000, 'linear', function () &#123;</span></span><br><span class="line"><span class="regexp">    console.log('显示结束')</span></span><br><span class="line"><span class="regexp">  &#125;)</span></span><br><span class="line"><span class="regexp">&#125;)</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 点击这个函数让 div 隐藏</span></span><br><span class="line"><span class="regexp">$('.hide').click(() =&gt; &#123;</span></span><br><span class="line"><span class="regexp">  $('div').hide(2000, 'linear', function () &#123;</span></span><br><span class="line"><span class="regexp">    console.log('隐藏结束')</span></span><br><span class="line"><span class="regexp">  &#125;)</span></span><br><span class="line"><span class="regexp">&#125;)</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 点击这个按钮让 div 切换显示和隐藏</span></span><br><span class="line"><span class="regexp">$('.toggle').click(() =&gt; &#123;</span></span><br><span class="line"><span class="regexp">  $('div').toggle(2000, 'linear', function () &#123;</span></span><br><span class="line"><span class="regexp">    console.log('切换结束')</span></span><br><span class="line"><span class="regexp">  &#125;)</span></span><br><span class="line"><span class="regexp">&#125;)</span></span><br></pre></td></tr></table></figure></div>

<h3 id="折叠动画"><a href="#折叠动画" class="headerlink" title="折叠动画"></a>折叠动画</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line">/</span><br><span class="line">  jQuery 的折叠动画</span><br><span class="line">    <span class="number">1.</span> slideDown() -&gt; 下滑显示</span><br><span class="line">      =&gt; 语法: slideDown(时间, 运动曲线, 运动结束的函数)</span><br><span class="line">    <span class="number">2.</span> slideUp() -&gt; 上滑隐藏</span><br><span class="line">      =&gt; 语法: slideUp(时间, 运动曲线, 运动结束的函数)</span><br><span class="line">    <span class="number">3.</span> slideToggle() -&gt; 切换滑动显示和隐藏</span><br><span class="line">      =&gt; 语法: slideToggle(时间, 运动曲线, 运动结束的函数)</span><br><span class="line">    + 上面三个方法的参数都可以不写</span><br><span class="line">*<span class="regexp">/</span></span><br></pre></td></tr></table></figure></div>

<h3 id="渐隐渐现动画"><a href="#渐隐渐现动画" class="headerlink" title="渐隐渐现动画"></a>渐隐渐现动画</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line">/</span><br><span class="line">  jQuery 的渐隐渐显动画</span><br><span class="line">    <span class="number">1.</span> fadeIn() -&gt; 渐渐的显示(贱贱的显示)</span><br><span class="line">      =&gt; 语法: fadeIn(时间, 运动曲线, 运动结束的函数)</span><br><span class="line">    <span class="number">2.</span> fadeOut() -&gt; 渐渐的消失</span><br><span class="line">      =&gt; 语法: fadeOut(时间, 运动曲线, 运动结束的函数)</span><br><span class="line">    <span class="number">3.</span> fadeToggle() -&gt; 渐渐的切换显示和消失</span><br><span class="line">      =&gt; 语法: fadeToggle(时间, 运动曲线, 运动结束的函数)</span><br><span class="line">    + 上面三个方法都有参数默认值</span><br><span class="line">    <span class="number">4.</span> fadeTo() -&gt; 去到一个你指定的透明度</span><br><span class="line">      =&gt; 语法: fadeTo(时间, 你指定的透明度, 运动曲线, 运动结束的函数)</span><br><span class="line">*<span class="regexp">/</span></span><br></pre></td></tr></table></figure></div>

<h3 id="综合动画"><a href="#综合动画" class="headerlink" title="综合动画"></a>综合动画</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line">/</span><br><span class="line">  jQuery 的综合动画</span><br><span class="line">    <span class="number">1.</span> animate()</span><br><span class="line">      =&gt; 基本上大部分的 css 样式都可以动画</span><br><span class="line">      =&gt; transform 不行, 颜色不行</span><br><span class="line">      =&gt; 语法: animate(&#123;&#125;, 时间, 运动曲线, 运动结束的函数)</span><br><span class="line">        -&gt; &#123;&#125; 里面就写你要运动的 css 属性</span><br><span class="line">      =&gt; 运动结束是否占位, 还是要看元素是否脱标</span><br><span class="line">*<span class="regexp">/</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">$('button').click(() =&gt; &#123;</span></span><br><span class="line"><span class="regexp">  $('div').animate(&#123;</span></span><br><span class="line"><span class="regexp">    width: 300,</span></span><br><span class="line"><span class="regexp">    height: 300,</span></span><br><span class="line"><span class="regexp">    left: 30,</span></span><br><span class="line"><span class="regexp">    top: 50,</span></span><br><span class="line"><span class="regexp">    borderRadius: '50%',</span></span><br><span class="line"><span class="regexp">    opacity: 0.5</span></span><br><span class="line"><span class="regexp">  &#125;, 2000, 'linear', () =&gt; console.log('运动结束'))</span></span><br><span class="line"><span class="regexp">&#125;)</span></span><br></pre></td></tr></table></figure></div>

<h3 id="停止动画"><a href="#停止动画" class="headerlink" title="停止动画"></a>停止动画</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line">/</span><br><span class="line">  jQuery 的停止动画</span><br><span class="line">    + 让当前的动画结束</span><br><span class="line">    + 因为 jQuery 的动画你一直点击, 他就一直触发</span><br><span class="line">      =&gt; 你点击 <span class="number">10</span> 次, 他就会触发 <span class="number">10</span> 次, 直到 <span class="number">10</span> 次全都完毕才结束</span><br><span class="line"></span><br><span class="line">    <span class="number">1.</span> stop()</span><br><span class="line">      =&gt; 当这个函数触发的时候, 就会让运动立刻停下来</span><br><span class="line">      =&gt; 你运动到哪一个位置了就停止在哪一个位置</span><br><span class="line">    <span class="number">2.</span> finish()</span><br><span class="line">      =&gt; 当这个函数触发的时候, 就会让运动立刻停下来</span><br><span class="line">      =&gt; 不管你运动到了哪一个位置, 瞬间到达运动完成位置</span><br><span class="line">*<span class="regexp">/</span></span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>jQuery</category>
      </categories>
  </entry>
  <entry>
    <title>mysql基本操作</title>
    <url>/jackhuang-haohua.github.io/2020/04/14/2020-05-mysql/</url>
    <content><![CDATA[<h2 id="了解数据库"><a href="#了解数据库" class="headerlink" title="了解数据库"></a>了解数据库</h2><ul>
<li><p>是什么</p>
<ul>
<li>整个数据库就是一个存储数据的 “大仓库”</li>
<li>在整个数据库里面包含有一个一个的 “小仓库”, 我们叫做 database</li>
<li>每一个 “小仓库” 里面还有若干的 “表格”，”表” 里面会有字段, 就是 “表头”，每一个 “表” 里面还会有行, 就是 “表体”，整个 “表” 结构就类似于 excel 表格</li>
</ul>
</li>
<li><p>例子：当你在一个服务器商运行两个网站的时候，所有的数据都存储在这一个电脑上，但是不能把两个网站的数据混合存储；当你存储数据的时候，商品信息和商品信息存储在一起，用户信息和用户信息存储在一起；</p>
</li>
</ul>
<p><strong>sql 语句的语法规范</strong></p>
<ol>
<li>sql 语句里面的关键字大写</li>
<li>表名和字段名尽可能使用反引号(键盘 tab 键上面那个按钮 ``)包裹<ul>
<li>注意: 这个不是 es6 的模板字符串, 是 sql 语法规范的一部分</li>
</ul>
</li>
<li>当你写一些文本内容的时候, 需要使用 引号 包裹, 表示是一个 字符串</li>
</ol>
<h2 id="常用sql语句"><a href="#常用sql语句" class="headerlink" title="常用sql语句"></a>常用sql语句</h2><ul>
<li>什么是 sql 语句，专门用来操作数据库的语句、，mysql 数据库只能依靠 sql 语句来操作</li>
<li>增删改 不需要解析结果, 因为结果就是 true 或者 false</li>
<li>查询 需要解析结果的, 因为查询到数据以后我们看不懂</li>
</ul>
<h2 id="phpstudy的数据库操作"><a href="#phpstudy的数据库操作" class="headerlink" title="phpstudy的数据库操作"></a>phpstudy的数据库操作</h2><ul>
<li>来到 phpstudy 可视窗口：点击 MySql 管理器，点击 mysql-front，来到整个数据库空间</li>
<li>创建一个小仓库：，在 localhost 上点击右键 -&gt; 新建 -&gt; 数据库 -&gt; 注意: 名称尽量不要使用中文</li>
<li>创建一个表格：在你想创建表的仓库上点击右键 -&gt; 新建 -&gt; 表 -&gt; 注意: 名称尽量不要使用中文</li>
<li>添加字段：选中你要添加字段的表 -&gt; 点击对象浏览器 -&gt; 空白地方右键单击 -&gt; 新建 -&gt; 字段(注意: 名称不要使用中文)</li>
<li>添加数据：在你想添加数据的表中, 点击数据浏览器,直接在表里面书写就可以了</li>
</ul>
<h2 id="php操作数据库"><a href="#php操作数据库" class="headerlink" title="php操作数据库"></a>php操作数据库</h2><h3 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    header(<span class="string">'content-type: text/html;charset=utf-8;'</span>);</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 连接</span></span><br><span class="line">    $link=mysqli_connect(<span class="string">'localhost'</span>,<span class="string">'root'</span>,<span class="string">'root'</span>,<span class="string">'test1'</span>);</span><br><span class="line"><span class="comment">// 操作（增删改查等）</span></span><br><span class="line">    $res = mysqli_query($link, <span class="string">'SELECT * FROM `users`'</span>);</span><br><span class="line"><span class="comment">// 解析</span></span><br><span class="line">    $res = mysqli_fetch_all($res,MYSQL_ASSOC);</span><br><span class="line"><span class="comment">// 打印解析结果</span></span><br><span class="line">    print_r($res);</span><br><span class="line"><span class="comment">// 断开连接</span></span><br><span class="line">    mysqli_close($link);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>

<h3 id="①插入"><a href="#①插入" class="headerlink" title="①插入"></a>①插入</h3><p>使用 INSERT 关键字，有两种语法：</p>
<ol>
<li>INSERT INTO <code>表名</code> VALUES(数据1, 数据2, 数据3, …);</li>
<li>INSERT INTO <code>表名</code> (字段1, 字段2, …) VALUES(数据1, 数据2, …);</li>
</ol>
<p>输出结果：</p>
<ul>
<li>$res 为 false 的时候，表示的是 sql 语句有错误<ul>
<li>第一中方式的时候, 必须要完全按照数据库里面的字段数量添加</li>
<li>第二种方式的时候, 字段和数据库里面不匹配的时候就会报错</li>
</ul>
</li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">  header(<span class="string">'content-type: text/html;charset=utf-8;'</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 连接</span></span><br><span class="line">  $link = mysqli_connect(<span class="string">'localhost'</span>, <span class="string">'root'</span>, <span class="string">'root'</span>, <span class="string">'test1'</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 执行一条插入的语句</span></span><br><span class="line">  <span class="comment">// $res = mysqli_query($link, 'INSERT INTO `users` VALUES(null, "管理员2", 20, "男", "1906")');</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 执行第二种插入的 sql 语句</span></span><br><span class="line">  $res = mysqli_query($link, <span class="string">'INSERT INTO `users` (`name`, `age`) VALUES("管理员2", 22)'</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 输出结果，true表示插入成功</span></span><br><span class="line">  var_dump($res);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>

<h3 id="②删除"><a href="#②删除" class="headerlink" title="②删除"></a>②删除</h3><p>使用 DELETE 关键字:</p>
<ol>
<li>DELETE FROM <code>表名</code> WHERE 条件</li>
</ol>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">  <span class="comment">// 从 users 这个表里面删除 username 为 admin 的一条数据</span></span><br><span class="line">  $res = mysqli_query($link, <span class="string">'DELETE FROM `users` WHERE `username`="admin"'</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 从 users 这个表里面删除 age 为 18 的数据</span></span><br><span class="line">  $res = mysqli_query($link, <span class="string">'DELETE FROM `users` WHERE `age`=18'</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 输出结果，true 表示成功</span></span><br><span class="line">  var_dump($res);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>

<h3 id="③修改"><a href="#③修改" class="headerlink" title="③修改"></a>③修改</h3><p>使用 UPDATE 关键字：</p>
<ol>
<li>UPDATE <code>表</code> SET 字段=新值 WHERE 条件</li>
<li>UPDATE <code>表</code> SET 字段=新值, 字段2=新值 WHERE 条件</li>
</ol>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">  $res = mysqli_query($link, <span class="string">'UPDATE `users` SET `age`=25 WHERE `Id`=4'</span>);</span><br><span class="line"></span><br><span class="line">  $res = mysqli_query($link, <span class="string">'UPDATE `users` SET `gender`="女", `class`="1906" WHERE `Id`=4'</span>);</span><br><span class="line"></span><br><span class="line">  var_dump($res);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>

<h3 id="④查询"><a href="#④查询" class="headerlink" title="④查询"></a>④查询</h3><p>使用 SELECT 关键字:</p>
<ol>
<li>SELECT * FROM <code>表</code>：查询这个表里面的所有数据</li>
<li>SELECT * FROM <code>表</code> WHERE 条件：根据我们的条件查询数据库里面的数据</li>
<li>SELECT * FROM <code>表</code> WHERE 条件1 AND 条件2：根据两个条件来查询, 两个条件必须都满足</li>
<li>SELECT * FROM <code>表</code> WHERE 条件1 OR 条件2：根据两个条件来查询, 两个条件满足一个就可以了</li>
<li>SELECT * FROM <code>表</code> WHERE 字段 LIKE ‘%关键字%’：查询数据里面指定字段包含某一个关键字的数据</li>
</ol>
<p><strong>关于单双引号：</strong></p>
<ul>
<li>在 php 里面 字符串分成两种<ul>
<li>单引号, 不能直接解析变量</li>
<li>双引号, 可以直接解析变量</li>
</ul>
</li>
<li>当你需要再字符串里面解析变量的时候, 就是用双引号</li>
<li>当你不需要再字符串里面解析变量的时候, 使用哪一个无所谓</li>
<li>字符串的嵌套, 外面使用双引号, 里面就要用单引号；外面使用单引号, 里面就要使用双引号</li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">  <span class="comment">// 处理中文乱码</span></span><br><span class="line">  header(<span class="string">'content-type: text/html;charset=utf-8;'</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 连接数据库</span></span><br><span class="line">  $link = mysqli_connect(<span class="string">'localhost'</span>, <span class="string">'root'</span>, <span class="string">'root'</span>, <span class="string">'test2'</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 查询 student 表里面所有年龄为 20 的数据</span></span><br><span class="line">  $sql = <span class="string">'SELECT * FROM `student` WHERE `age`=20'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 查询 student 表里面所有 年龄为 20 并且 性别为 男 的所有数据</span></span><br><span class="line">  $sql = <span class="string">'SELECT * FROM `student` WHERE `age`=20 AND `gender`="男"'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 查询 student 表里面所有 年龄小于 22 或者 年龄大于 28 的所有数据</span></span><br><span class="line">  $sql = <span class="string">'SELECT * FROM `student` WHERE `age`&lt;22 OR `age`&gt;28'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 查询 student 表里面所有 name 里面带有 三 字的数据</span></span><br><span class="line">  $sql = <span class="string">'SELECT * FROM `student` WHERE `name` LIKE "%三%"'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 定义变量</span></span><br><span class="line">  $n = <span class="string">'六'</span>;</span><br><span class="line">  $sql = <span class="string">"SELECT * FROM `student` WHERE `name` LIKE '%$n%'"</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 执行 sql 语句</span></span><br><span class="line">  $res = mysqli_query($link, $sql);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 因为是查询，结果需要解析</span></span><br><span class="line">  $data = mysqli_fetch_all($res, MYSQL_ASSOC); <span class="comment">// 若sql语句错误，$res为false</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 把数据转换成 json 格式输出</span></span><br><span class="line">  print_r(json_encode($data));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>后端</category>
      </categories>
  </entry>
  <entry>
    <title>cookie</title>
    <url>/jackhuang-haohua.github.io/2018/06/19/2020-05-cookie/</url>
    <content><![CDATA[<h2 id="了解cookie"><a href="#了解cookie" class="headerlink" title="了解cookie"></a>了解cookie</h2><ul>
<li>cookie 是一个存在再客户端的存储空间<br>=&gt; 浏览器是一个软件，当你运行浏览器的时候，一部分位置是来给页面运行的，还有一个小部分位置是专门用来存储数据的</li>
<li>这个 cookie 空间里面可以以字符串的形式存储一些数据<br>=&gt; 数据格式必须是 key=value，多条数据中间用<code>;</code>分隔， 每一个 cookie 信息还有可能包含过期时间</li>
</ul>
<h3 id="cookie的特点"><a href="#cookie的特点" class="headerlink" title="cookie的特点"></a>cookie的特点</h3><ol>
<li>按照域名存储<ul>
<li>你在哪一个域名下存储的内容, 就在哪一个域名下使用</li>
<li>其他域名都用不了</li>
<li>和资源路径地址没有关系</li>
</ul>
</li>
<li>存储大小有限制<ul>
<li>4KB 左右</li>
<li>50 条左右</li>
<li>或者的关系</li>
</ul>
</li>
<li>时效性<ul>
<li>默认是会话级别的时效性(关闭浏览器就没有了)</li>
<li>可以手动设置, 七天后, 两个小时以后</li>
</ul>
</li>
<li>请求自动携带<ul>
<li>当你的 cookie 空间里面有内容的时候</li>
<li>只要是当前域名下的任意一个请求, 都会自动携带 cookie 放在请求头里面<br>=&gt; cookie 里面有多少自动携带多少</li>
<li>如果 cookie 空间中没有内容, 就不会携带了</li>
</ul>
</li>
<li>前后端操作<ul>
<li>前端可以通过 js 操作 cookie 空间进行增删改查</li>
<li>后端也可以通过任何后端语言进行 cookie 空间的增删改查</li>
</ul>
</li>
</ol>
<h3 id="前端操作cookie"><a href="#前端操作cookie" class="headerlink" title="前端操作cookie"></a>前端操作cookie</h3><p>封装一个设置cookie的方法，一个<code>setCookie</code>方法用来设置，一个<code>getCookie</code>方法用来获取</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="function"><span class="keyword">function</span> <span class="title">setCookie</span><span class="params">(key, value, expires)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">//  key 是要设置的 cookie 属性名</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">//  value 是要设置的 cookie 属性值</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">//  expires 是要设置的 cookie 的过期时间, 单位为秒；expires 可以不传递, 不传递的时候默认使用 session</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// 如果传递了expires,执行if，加上过期时间</span></span></span><br><span class="line">    if (expires) &#123;</span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> time = <span class="keyword">new</span> <span class="built_in">Date</span>()</span></span><br><span class="line">      time.setTime(time.getTime() - 1000 * 60 * 60 * 8 + 1000 * expires)</span><br><span class="line"><span class="javascript">      <span class="built_in">document</span>.cookie = key + <span class="string">'='</span> + value + <span class="string">';expires='</span> + time</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="actionscript">    <span class="comment">// 如果没有传递expires,执行else，直接设置cooki，此时默认为会话时间</span></span></span><br><span class="line"><span class="actionscript">    <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">document</span>.cookie = key + <span class="string">'='</span> + value</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">  <span class="comment">// 例子，15s后过期</span></span></span><br><span class="line"><span class="actionscript">  setCookie(<span class="string">'a'</span>, <span class="string">'300'</span>, <span class="number">15</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">  <span class="comment">// 封装一个 getCookie</span></span></span><br><span class="line"><span class="actionscript">  <span class="function"><span class="keyword">function</span> <span class="title">getCookie</span><span class="params">(key)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">    str = <span class="string">''</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// document.cookie获取了全部cookie，使用“；”分割成单个 key=value 的形式</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> tmp = <span class="built_in">document</span>.cookie.split(<span class="string">'; '</span>)</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 遍历所有cookie</span></span></span><br><span class="line"><span class="actionscript">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; tmp.length; i++) &#123;</span></span><br><span class="line"><span class="actionscript">      <span class="comment">// 使用“=”分割key和value</span></span></span><br><span class="line"><span class="actionscript">      <span class="keyword">var</span> t = tmp[i].split(<span class="string">'='</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">      <span class="comment">// t[0] 为每一条 cookie 的 key</span></span></span><br><span class="line"><span class="actionscript">      <span class="comment">// t[1] 为每一条 cookie 的 value</span></span></span><br><span class="line"><span class="actionscript">      <span class="comment">// 如果 t[0] 和我传递进来的那个参数一样</span></span></span><br><span class="line"><span class="actionscript">      <span class="comment">// 当前 t[1] 就是我需要 对应的值</span></span></span><br><span class="line">      if (t[0] === key) &#123;</span><br><span class="line">        str = t[1]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// 把赋值好的 str 返回出去</span></span></span><br><span class="line"><span class="actionscript">    <span class="keyword">return</span> str</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> res = getCookie(<span class="string">'a'</span>) <span class="comment">// a=100，则res=100</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
<p><strong>上面的封装两个函数；</strong></p>
<ul>
<li>一个<code>setCookie</code>方法用来设置：例如设置一个15s后过期的cookie，<code>setCookie(&#39;a&#39;, &#39;300&#39;, 15)</code></li>
<li>一个<code>getCookie</code>方法用来获取：<code>var res = getCookie(&#39;a&#39;)</code>，a=100，则res=100</li>
</ul>
<h2 id="后端操作cookie"><a href="#后端操作cookie" class="headerlink" title="后端操作cookie"></a>后端操作cookie</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">  header(<span class="string">'content-type: text/html;charset=utf-8;'</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 后端操作 cookie</span></span><br><span class="line">  前后端都可以操作 cookie</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 后端进行增删改查</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 后端设置 cookie</span></span><br><span class="line">  php 里面有一个方法叫做 setcookie, 专门用来设置 cookie</span><br><span class="line">  语法: setcookie(key, value, 过期时间)</span><br><span class="line">  过期时间可以不写, 不写默认是会话界别的</span><br><span class="line">  setcookie(<span class="string">'php_a'</span>, <span class="string">'100'</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 后端获取时间对象使用 time() 方法</span></span><br><span class="line">  拿到的就是世界标准时间, 单位是 秒</span><br><span class="line">  time() + <span class="number">15</span> 当前时间 <span class="number">15</span> 秒以后</span><br><span class="line">  setcookie(<span class="string">'php_b'</span>, <span class="string">'200'</span>, time() + <span class="number">15</span>) <span class="comment">// 设置的这个 cookie 会在 15 秒以后过期</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 后端修改 cookie</span></span><br><span class="line">  也是使用 setcookie 这个方法</span><br><span class="line">  从新设置一次就可以了</span><br><span class="line">  setcookie(<span class="string">'a'</span>, <span class="string">'100'</span>);</span><br><span class="line">  setcookie(<span class="string">'a'</span>, <span class="string">'200'</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 后端删除 cookie</span></span><br><span class="line">  也是使用 setcookie 方法</span><br><span class="line">  只要把 cookie 的过期时间设置成当前时间以前就可以了</span><br><span class="line">  setcookie(<span class="string">'a'</span>, <span class="string">'我早上没吃饭'</span>, time() - <span class="number">1</span>); <span class="comment">// 让 a 这个 cookie 1 秒以前 过期, 删除</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 后端获取 cookie</span></span><br><span class="line">  php 有一个预定义变量叫做 $_COOKIE</span><br><span class="line">  一个关联型数组</span><br><span class="line">  里面存储的就是一个一个的 cookie 信息</span><br><span class="line">  你想要哪一个, 就直接从 $_COOKIE 这个关联型数组里面获取</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取 cookie 里面的 a 成员</span></span><br><span class="line">  $a = $_COOKIE[<span class="string">'a'</span>];</span><br><span class="line">  $b = $_COOKIE[<span class="string">'b'</span>];</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>其他</category>
      </categories>
  </entry>
  <entry>
    <title>jQuery知识点-第二部分</title>
    <url>/jackhuang-haohua.github.io/2018/03/22/2020-05-jquery2/</url>
    <content><![CDATA[<h2 id="jq发送请求"><a href="#jq发送请求" class="headerlink" title="jq发送请求"></a>jq发送请求</h2><p>jq已经有get/post/ajax的方法了。</p>
<h3 id="ajax请求"><a href="#ajax请求" class="headerlink" title="ajax请求"></a>ajax请求</h3><h4 id="一些知识点："><a href="#一些知识点：" class="headerlink" title="一些知识点："></a>一些知识点：</h4><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line">/</span><br><span class="line">  jQuery 发送一个 ajax 请求</span><br><span class="line">    <span class="number">1.</span> $.<span class="keyword">get</span>() -&gt; 专门用来发送 <span class="keyword">get</span> 请求的</span><br><span class="line">    2. $.post() -&gt; 专门用来发送 post 请求的</span><br><span class="line">    3. $.ajax() -&gt; 发送什么请求都可以(<span class="keyword">get</span>, post, put, delete)</span><br><span class="line">      =&gt; 并且还可以发送一个 jsonp 请求</span><br><span class="line"></span><br><span class="line">  jQuery 发送一个 GET 请求</span><br><span class="line">    + 语法: $.<span class="keyword">get</span>(请求地址, 需要携带到后端的参数, 成功的回调函数, 期望后端返回的数据类型)</span><br><span class="line">      =&gt; 请求地址: 你要请求的后端接口地址(必填)</span><br><span class="line">      =&gt; 携带参数: 你需要给后端传递的参数</span><br><span class="line">        -&gt; 可以是一个固定格式的字符串 'key=value&amp;key=value'</span><br><span class="line">        -&gt; 也可以是一个对象 &#123; a: <span class="number">100</span>, <span class="attr">b</span>: <span class="number">200</span> &#125;</span><br><span class="line">      =&gt; 成功回调: 当请求成功的时候会执行的函数</span><br><span class="line">      =&gt; 期望数据类型: 就是你是不是需要 jQuery 帮你解析响应体</span><br><span class="line">        -&gt; 默认是不解析</span><br><span class="line">        -&gt; 当你传递一个 <span class="string">'json'</span> 的时候, 会自动帮你执行 <span class="built_in">JSON</span>.parse()</span><br><span class="line"></span><br><span class="line">  jQuery 发送一个 POST 请求</span><br><span class="line">    + 语法: $.post(请求地址, 需要携带到后端的参数, 成功的回调函数, 期望后端返回的数据类型)</span><br><span class="line">      =&gt; 四个参数和 $.<span class="keyword">get</span> 是一摸一样的</span><br><span class="line"></span><br><span class="line">  jQuery 的 $.ajax 方法</span><br><span class="line">    + 用来发送综合 ajax 请求的(GET, POST, PUT, ...)</span><br><span class="line">    + 语法: $.ajax(对象)</span><br><span class="line">      =&gt; 对象是对本次请求的所有配置</span><br><span class="line">      =&gt; $.ajax(&#123;</span><br><span class="line">        url: <span class="string">''</span>, <span class="comment">// =&gt; 请求地址(必填)</span></span><br><span class="line">        type: <span class="string">''</span>, <span class="comment">// =&gt; 请求方式(GET, POST, ...) 默认是 GET</span></span><br><span class="line">        data: <span class="string">''</span>, <span class="comment">// =&gt; 携带到后端的参数</span></span><br><span class="line">        dataType: <span class="string">''</span>, <span class="comment">// =&gt; 期望后端返回的数据类型, 默认不解析</span></span><br><span class="line">        <span class="keyword">async</span>: <span class="literal">true</span>, <span class="comment">// =&gt; 是否异步, 默认是 true</span></span><br><span class="line">        success: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;, <span class="comment">// =&gt; 成功的回调</span></span><br><span class="line">        error: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;, <span class="comment">// =&gt; 失败的回调</span></span><br><span class="line">        timeout: 数字, <span class="comment">// 单位是 ms, 超时时间(超过你写的时间没有响应, 那么就算失败)</span></span><br><span class="line">        cache: <span class="literal">true</span>, <span class="comment">// 是否缓存, 默认是 true</span></span><br><span class="line">        context: 上下文, <span class="comment">// 改变回调函数里面的 this 指向</span></span><br><span class="line">        ...</span><br><span class="line">      &#125;)</span><br><span class="line"></span><br><span class="line">  $.ajax 里面失败的回调</span><br><span class="line">    =&gt; 不光是请求失败的时候会触发</span><br><span class="line">    =&gt; jQuery 认定失败就是失败</span><br><span class="line">      -&gt; 当 dataType 写成 json 的时候, jQuery 会帮我们执行 <span class="built_in">JSON</span>.parse()</span><br><span class="line">      -&gt; 当后端返回一个不是 json 格式的字符串的时候</span><br><span class="line">      -&gt; 执行 <span class="built_in">JSON</span>.parse() 就会报错</span><br><span class="line">      -&gt; 也会执行失败的回调, 请求虽然成功, 但是解析失败了, 也是失败</span><br><span class="line">    =&gt; <span class="built_in">JSON</span>.parse(<span class="string">'你好 世界'</span>) -&gt; 就会报错了</span><br><span class="line"></span><br><span class="line">  $.ajax 里面是否缓存的问题</span><br><span class="line">    =&gt; 当两次请求地址一样的时候, 就会缓存</span><br><span class="line">    =&gt; 如果你写成 <span class="literal">false</span>, 表示不要缓存</span><br><span class="line">    =&gt; jQuery 就会自动再你的请求后面加一个参数 _=时间戳</span><br><span class="line">      -&gt; 第一次请求 ./server/<span class="keyword">get</span>.php?_=11:10:01.325的时间戳</span><br><span class="line">      -&gt; 第二次请求 ./server/<span class="keyword">get</span>.php?_=11:10:02.326的时间戳</span><br><span class="line"></span><br><span class="line">  $.ajax 里面的回调 this 指向问题</span><br><span class="line">    =&gt; ajax 的回调里面默认 this 指向被 jQuery 加工过的 ajax 对象</span><br><span class="line">    =&gt; context 的值你写的是谁, 回调函数里面的 this 就时谁</span><br><span class="line"></span><br><span class="line">  $.ajax 里面的请求方式的问题</span><br><span class="line">    =&gt; $.ajax 这个方法里面, type 表示请求方式</span><br><span class="line">    =&gt; jQuery 还给了我们一个参数叫做 method</span><br><span class="line">    =&gt; 也表示请求方式</span><br><span class="line">      -&gt; 当你写请求方式的时候</span><br><span class="line">      -&gt; 可以写成 type: 'POST'</span><br><span class="line">      -&gt; 也可以写成 method: 'POST'</span><br><span class="line"></span><br><span class="line">  $.ajax 里面的接收响应的问题(2015年以后的版本才有 promise 的形式)</span><br><span class="line">    =&gt; jQuery 默认把 ajax 封装成了 promsie 的形式</span><br><span class="line">    =&gt; 你可以用 success 选项接收成功的回调</span><br><span class="line">    =&gt; 也可以用 .then() 的方式接收响应</span><br><span class="line">*/</span><br></pre></td></tr></table></figure></div>

<h4 id="实际例子："><a href="#实际例子：" class="headerlink" title="实际例子："></a>实际例子：</h4><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用 $.ajax() 方法发送一个请求</span></span><br><span class="line">$.ajax(&#123;</span><br><span class="line">  url: <span class="string">'./server/get.php'</span>,</span><br><span class="line">  type: <span class="string">'GET'</span>, <span class="comment">// 大小写无所谓, GET 请求可以不写</span></span><br><span class="line">  data: <span class="string">'a=100&amp;b=200'</span>, <span class="comment">// &#123; a: 100, b: 200 &#125;,</span></span><br><span class="line">  dataType: <span class="string">'json'</span>, <span class="comment">// jQuery 帮我们执行 JSON.parse()</span></span><br><span class="line">  <span class="keyword">async</span>: <span class="literal">true</span>, <span class="comment">// 是否异步</span></span><br><span class="line">  success: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123; <span class="comment">// 成功的回调</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'请求成功了'</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(res)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  error: <span class="function"><span class="keyword">function</span> (<span class="params">xhr, err, info</span>) </span>&#123; <span class="comment">// 失败的回调</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'请求失败'</span>)</span><br><span class="line">    <span class="comment">// xhr =&gt; ajax 对象</span></span><br><span class="line">    <span class="comment">// err =&gt; 错误信息, 一个简单描述</span></span><br><span class="line">    <span class="comment">// info =&gt; 详细的错误信息</span></span><br><span class="line">    <span class="built_in">console</span>.log(xhr)</span><br><span class="line">    <span class="built_in">console</span>.log(err)</span><br><span class="line">    <span class="built_in">console</span>.log(info)</span><br><span class="line">  &#125;,</span><br><span class="line">  timeout: <span class="number">1000</span>, <span class="comment">// 超时时间, 1000ms 后没有响应回来就失败了</span></span><br><span class="line">  cache: <span class="literal">false</span>, <span class="comment">// 不缓存, 就会自动添加一个参数叫做 _=时间戳</span></span><br><span class="line">  context: obj, <span class="comment">// 让回调函数里面的 this 指向 obj 这个对象</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div>

<h4 id="ajax钩子函数"><a href="#ajax钩子函数" class="headerlink" title="ajax钩子函数"></a>ajax钩子函数</h4><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line">/</span><br><span class="line">  jQuery 的 ajax 全局钩子函数</span><br><span class="line">    + 钩子: 挂在你的身上, 你的所有动作都和它有关系</span><br><span class="line">    + 这些全局函数都是挂在 ajax 身上的, 这个 ajax 的每一个动作都和全局函数有关系</span><br><span class="line">    + 全局的钩子函数</span><br><span class="line">      <span class="number">1.</span> ajaxStart()</span><br><span class="line">        =&gt; 会在同一个作用域下多个 ajax 的时候, 第一个 ajax 之前开始的时候触发</span><br><span class="line">        =&gt; 如果有多个 ajax 他只触发一次</span><br><span class="line">      <span class="number">2.</span> ajaxSend()</span><br><span class="line">        =&gt; 每一个 ajax 再发送出去之前, 都会触发一下</span><br><span class="line">        =&gt; xhr.send() 之前触发</span><br><span class="line">      <span class="number">3.</span> ajaxSuccess()</span><br><span class="line">        =&gt; 每一个 ajax 再成功的时候触发</span><br><span class="line">        =&gt; 只要有一个 ajax 成功了就会触发</span><br><span class="line">      <span class="number">4.</span> ajaxError()</span><br><span class="line">        =&gt; 每一个 ajax 再失败的时候触发</span><br><span class="line">        =&gt; 只要有一个 ajax 失败了就会触发</span><br><span class="line">      <span class="number">5.</span> ajaxComplete()</span><br><span class="line">        =&gt; 每一个 ajax 完成的时候触发</span><br><span class="line">        =&gt; 只要有一个 ajax 完成了, 不管成功还是失败, 都会触发</span><br><span class="line">      <span class="number">6.</span> ajaxStop()</span><br><span class="line">        =&gt; 会在同一个作用域内多个 ajax 的时候, 最后一个 ajax 完成以后触发</span><br><span class="line">        =&gt; 如果有多个 ajax 它只触发一次</span><br><span class="line">    + 作用: 通常用来做 loading 效果</span><br><span class="line">*<span class="regexp">/</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 提前准备 钩子函数</span></span><br><span class="line"><span class="regexp">$(window).ajaxStart(function () &#123;</span></span><br><span class="line"><span class="regexp">  console.log('第一个请求要开始了')</span></span><br><span class="line"><span class="regexp">&#125;)</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">$(window).ajaxSend(function () &#123;</span></span><br><span class="line"><span class="regexp">  console.log('有一个请求要发送出去了')</span></span><br><span class="line"><span class="regexp">&#125;)</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">$(window).ajaxSuccess(function () &#123;</span></span><br><span class="line"><span class="regexp">  console.log('有一个请求成功了')</span></span><br><span class="line"><span class="regexp">&#125;)</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">$(window).ajaxError(function () &#123;</span></span><br><span class="line"><span class="regexp">  console.log('有一个请求失败了')</span></span><br><span class="line"><span class="regexp">&#125;)</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">$(window).ajaxComplete(function () &#123;</span></span><br><span class="line"><span class="regexp">  /</span><span class="regexp">/ 不管成功还是失败, 只要完成了就触发</span></span><br><span class="line"><span class="regexp">  console.log('有一个请求完成了')</span></span><br><span class="line"><span class="regexp">&#125;)</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">$(window).ajaxStop(function () &#123;</span></span><br><span class="line"><span class="regexp">  console.log('最后一个请求结束了')</span></span><br><span class="line"><span class="regexp">&#125;)</span></span><br></pre></td></tr></table></figure></div>

<h4 id="loading"><a href="#loading" class="headerlink" title="loading"></a>loading</h4><p>利用钩子函数制作loading：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">/*</span><br><span class="line">  loading 效果</span><br><span class="line">    + 请求发送的时候的加载效果</span><br><span class="line">      =&gt; 当请求发送出去以后</span><br><span class="line">      =&gt; 页面上有一个小东西再转圈(从页面最左边到最右边有一个进度条)</span><br><span class="line">      =&gt; 当请求完成的时候</span><br><span class="line">      =&gt; 这个效果就消失了</span><br><span class="line">    + 利用 钩子函数 制作</span><br><span class="line"></span><br><span class="line">  业务逻辑</span><br><span class="line">    + 当点击 button 按钮的时候就会发送一个请求</span><br><span class="line">    + 每一个请求发送出去的时候就会触发 loading 效果, 图片显示出来</span><br><span class="line">    + 当请求完成对的时候, loading 效果消失, 图片再次隐藏起来</span><br><span class="line">      =&gt; 一定是 ajaxComplete(), 不管成功失败, 完成就触发</span><br><span class="line">      =&gt; 不能是 ajaxSuccess(), 只有成功会触发</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line"><span class="actionscript"><span class="comment">// 提前利用钩子函数准备 loading 效果</span></span></span><br><span class="line"><span class="actionscript"><span class="comment">// 每一次发送出去的时候都要显示图片</span></span></span><br><span class="line"><span class="javascript">$(<span class="built_in">window</span>).ajaxSend(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">  $(<span class="string">'img'</span>).show()</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="actionscript"><span class="comment">// 每一次完成的时候都要图片再隐藏起来</span></span></span><br><span class="line"><span class="javascript">$(<span class="built_in">window</span>).ajaxComplete(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">  $(<span class="string">'img'</span>).hide()</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="actionscript"><span class="comment">// 每次点击按钮的时候都会发送一个 ajax 请求</span></span></span><br><span class="line"><span class="javascript">$(<span class="string">'button'</span>).click(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="actionscript">  <span class="comment">// 发送一个 ajax 请求</span></span></span><br><span class="line"><span class="javascript">  $.ajax(&#123;</span></span><br><span class="line"><span class="actionscript">    url: <span class="string">'./server/get.php'</span>,</span></span><br><span class="line">    data: &#123;</span><br><span class="line">      a: 100,</span><br><span class="line">      b: 200</span><br><span class="line">    &#125;,</span><br><span class="line"><span class="actionscript">    dataType: <span class="string">'json'</span>,</span></span><br><span class="line"><span class="actionscript">    success: <span class="function"><span class="keyword">function</span> <span class="params">(res)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">'请求成功了'</span>)</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(res)</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php">  $a = $_GET[<span class="string">'a'</span>];</span></span><br><span class="line"><span class="php">  $b = $_GET[<span class="string">'b'</span>];</span></span><br><span class="line"></span><br><span class="line"><span class="php">  $arr = <span class="keyword">array</span>(</span></span><br><span class="line"><span class="php">    <span class="string">"message"</span> =&gt; <span class="string">"参数已经接收到, 给你带回去"</span>,</span></span><br><span class="line"><span class="php">    <span class="string">"a"</span> =&gt; $a,</span></span><br><span class="line"><span class="php">    <span class="string">"b"</span> =&gt; $b</span></span><br><span class="line"><span class="php">  );</span></span><br><span class="line"></span><br><span class="line"><span class="php">  <span class="keyword">echo</span> json_encode($arr);</span></span><br><span class="line"><span class="php"><span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure></div>

<h3 id="GET-POST请求"><a href="#GET-POST请求" class="headerlink" title="GET/POST请求"></a>GET/POST请求</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 打开页面就发送 POST 请求了</span></span><br><span class="line">$.post(<span class="string">'./server/post.php'</span>, <span class="string">'c=hello&amp;d=world'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(res)</span><br><span class="line">&#125;, <span class="string">'json'</span>)</span><br><span class="line"></span><br><span class="line">$.post(<span class="string">'./server/post.php'</span>, &#123;</span><br><span class="line">  c: <span class="string">'你好'</span>,</span><br><span class="line">  d: <span class="string">'世界'</span></span><br><span class="line">&#125;, res =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(res)</span><br><span class="line">&#125;, <span class="string">'json'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打开页面就发送 GET 请求了</span></span><br><span class="line">$.<span class="keyword">get</span>('./server/<span class="keyword">get</span>.php', 'a=100&amp;b=200', function (res) &#123;</span><br><span class="line">  <span class="comment">// res 就是后端返回的数据, 也就是响应体</span></span><br><span class="line">  <span class="comment">// console.log(JSON.parse(res))</span></span><br><span class="line">  <span class="built_in">console</span>.log(res)</span><br><span class="line">&#125;, <span class="string">'json'</span>)</span><br><span class="line"></span><br><span class="line">$.<span class="keyword">get</span>('./server/<span class="keyword">get</span>.php', &#123;</span><br><span class="line">  a: <span class="number">300</span>,</span><br><span class="line">  b: <span class="number">400</span></span><br><span class="line">&#125;, res =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(res)</span><br><span class="line">&#125;, <span class="string">'json'</span>)</span><br></pre></td></tr></table></figure></div>

<h3 id="jsonp"><a href="#jsonp" class="headerlink" title="jsonp"></a>jsonp</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line">/</span><br><span class="line">  jQuery 发送一个 jsonp 请求</span><br><span class="line">    + jQuery 也提供给我们发送 jsonp 请求的方式</span><br><span class="line">      =&gt; jsonp: 利用 script 标签的 src 属性来请求</span><br><span class="line">      =&gt; 返回值: 是一个字符串, 字符串里面写了一个 函数名(后端传递给前端的参数)</span><br><span class="line">    + 使用 $.ajax() 这个方法</span><br><span class="line">      =&gt; 必须写的: dataType: <span class="string">'jsonp'</span></span><br><span class="line">    + 发送 jsonp 请求</span><br><span class="line">      =&gt; jQuery 帮我们准备好了一个函数名, 并且以参数的形式带到了后端</span><br><span class="line">      =&gt; jQuery 帮我们带过去的 callback 参数, 就是它准备好的函数名</span><br><span class="line">      =&gt; 后端就应该返回一个 jQuery 准备好的函数名()</span><br><span class="line">    + 其他参数</span><br><span class="line">      =&gt; jsonp: <span class="string">''</span>, <span class="comment">// =&gt; 你带到后端表示你函数名的那个 key, 默认值是 callback</span></span><br><span class="line">      =&gt; cache: <span class="literal">false</span>, <span class="comment">// =&gt; 当 dataType === 'jsonp' 的时候, 默认 cache 就是 false</span></span><br><span class="line"></span><br><span class="line">  jQuery 准备好的函数名</span><br><span class="line">    + jQuery34108160883644340862_1582255906750</span><br><span class="line">    + 变量名包含 数字 字母 下划线 $</span><br><span class="line">    + <span class="function"><span class="keyword">function</span> <span class="title">jQuery34108160883644340862_1582255906750</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">*<span class="regexp">/</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 发送一个 jsonp 请求</span></span><br><span class="line"><span class="regexp">$.ajax(&#123;</span></span><br><span class="line"><span class="regexp">  url: 'http:/</span><span class="regexp">/127.0.0.1/</span>server/jsonp.php<span class="string">',</span></span><br><span class="line"><span class="string">  dataType: '</span>jsonp<span class="string">', // 表示我要发送一个 jsonp 请求</span></span><br><span class="line"><span class="string">  jsonp: '</span>cb<span class="string">', // 表示参数里面的 cb 属性时我准备好的函数名</span></span><br><span class="line"><span class="string">  cache: true, // 表示缓存本次请求</span></span><br><span class="line"><span class="string">  success: function (res) &#123;</span></span><br><span class="line"><span class="string">    console.log(res)</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;)</span></span><br></pre></td></tr></table></figure></div>

<h3 id="多库并存"><a href="#多库并存" class="headerlink" title="多库并存"></a>多库并存</h3><p>jq可以和其他类库并存，<code>$</code>是jq的标志，其实jq还可以交出<code>$</code>的控制权：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line">/</span><br><span class="line">  jQuery 的多库并存机制</span><br><span class="line">    + 因为 jQuery 引入页面以后, 向全局添加了两个名字</span><br><span class="line">      -&gt; 一个叫做 $</span><br><span class="line">      -&gt; 一个叫做 jQuery</span><br><span class="line">      -&gt; 万一有别的类库也起名叫做 jQuery 或者 $ 怎么办</span><br><span class="line">    + 当我两个库都需要使用的时候</span><br><span class="line">      -&gt; 因为向全局暴露的名字一样, 就会发生冲突了</span><br><span class="line">      -&gt; 谁的文件引再后面, 谁的名字就占主要位置了</span><br><span class="line">      -&gt; 两个只能选择一个使用</span><br><span class="line">    + jQuery 提供了一个方法</span><br><span class="line">      -&gt; 我可以不占用 $ 或者 jQuery 这个名字</span><br><span class="line">      -&gt; noConflict()</span><br><span class="line">      -&gt; 语法: $.noConflict() 或者 jQuery.noConflict()</span><br><span class="line">        =&gt; 当你执行了 noConflict() 以后, jQuery 就交出了 $ 的控制权</span><br><span class="line">        =&gt; jQuery 向全局暴露的不在有 $ 这个名字了</span><br><span class="line">        =&gt; 当你执行了 noConflict(<span class="literal">true</span>) 以后, jQuery 就交出了 $ 和 jQuery 的控制权</span><br><span class="line">        =&gt; 交出去以后, 我的 jQuery 就用不了</span><br><span class="line">      -&gt; noConflict() 的返回值: 就是一个新的控制权</span><br><span class="line">        =&gt; 你只要接收一个返回值, 你定好的变量是什么</span><br><span class="line">        =&gt; jQuery 的控制权就是什么</span><br><span class="line">*<span class="regexp">/</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 交出 $ 的控制权</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ $.noConflict()</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 交出 $ 和 jQuery 的控制权</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ $.noConflict(true)</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 改变 jQuery 的控制权</span></span><br><span class="line"><span class="regexp">var $$ = $.noConflict(true)</span></span><br></pre></td></tr></table></figure></div>

<h3 id="添加拓展插件"><a href="#添加拓展插件" class="headerlink" title="添加拓展插件"></a>添加拓展插件</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line">/</span><br><span class="line">  jQuery 的插件扩展机制</span><br><span class="line">    + jQuery 提供了很多的方法, 假如有 <span class="number">200</span> 个</span><br><span class="line">    + 基本上常用的就够用了</span><br><span class="line">    + 并不能保证对每一个项目的开发都全部够用</span><br><span class="line">    + jQuery 还提供给我们了一个机制, 就是你可以向 jQuery 里面扩展一些方法</span><br><span class="line"></span><br><span class="line">  两个方法</span><br><span class="line">    <span class="number">1.</span> $.extend()</span><br><span class="line">      =&gt; 扩展给 jQuery 本身使用的</span><br><span class="line">      =&gt; 语法: $.extend(&#123;</span><br><span class="line">        你要扩展的方法名: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;,</span><br><span class="line">        你要扩展的方法名: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;,</span><br><span class="line">        ...</span><br><span class="line">      &#125;)</span><br><span class="line">      =&gt; 使用的时候就是 $.你扩展的方法名()</span><br><span class="line">      =&gt; $.ajax()</span><br><span class="line">    <span class="number">2.</span> $.fn.extend() =&gt; $.extend($.fn, &#123; 你扩展的方面名 &#125;)</span><br><span class="line">      =&gt; 扩展给 jQuery 元素集合使用的</span><br><span class="line">      =&gt; $.fn.extend(&#123;</span><br><span class="line">        你要扩展的方法名: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;,</span><br><span class="line">        你要扩展的方法名: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;,</span><br><span class="line">        ...</span><br><span class="line">      &#125;)</span><br><span class="line">      =&gt; 使用的时候就是 $(选择器).你扩展的方法名()</span><br><span class="line">      =&gt; $(<span class="string">'div'</span>).html()</span><br><span class="line">*<span class="regexp">/</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 2. 扩展给元素集合</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/    扩展一个全选的方法</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/    方法一执行, 就能让 input checkbox 变成选中状态或者不选中状态</span></span><br><span class="line"><span class="regexp">$.fn.extend(&#123;</span></span><br><span class="line"><span class="regexp">  selectAll: function (type = true) &#123;</span></span><br><span class="line"><span class="regexp">    /</span><span class="regexp">/ type 就是你传递进来的选中或者不选中一个标志</span></span><br><span class="line"><span class="regexp">    /</span><span class="regexp">/   你不传递的时候, 我默认是 true, 你传递了就用你传递的</span></span><br><span class="line"><span class="regexp">    /</span><span class="regexp">/ console.log(this) /</span><span class="regexp">/ 就是你调用的时候前面的哪个元素集合</span></span><br><span class="line"><span class="regexp">    this.each(function (index, item) &#123;</span></span><br><span class="line"><span class="regexp">      /</span><span class="regexp">/ 让元素集合中的每一个 input 的 checked 属性为 true</span></span><br><span class="line"><span class="regexp">      item.checked = type</span></span><br><span class="line"><span class="regexp">    &#125;)</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    /</span><span class="regexp">/ return 这个元素集合, 达到一个链式编程的效果</span></span><br><span class="line"><span class="regexp">    return this</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;)</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">$('button').click(() =&gt; &#123;</span></span><br><span class="line"><span class="regexp">  /</span><span class="regexp">/ 让所有 input 框变成选中状态</span></span><br><span class="line"><span class="regexp">  console.log($('input').selectAll().attr('hello', 'world'))</span></span><br><span class="line"><span class="regexp">&#125;)</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 1. 扩展给 jQuery 本身</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/    jQuery 本身没有操作 cookie 的方法</span></span><br><span class="line"><span class="regexp">$.extend(&#123;</span></span><br><span class="line"><span class="regexp">  setCookie: function (key, value, expires) &#123;</span></span><br><span class="line"><span class="regexp">    /</span><span class="regexp">/ 写上设置 cookie 的方法</span></span><br><span class="line"><span class="regexp">    if (expires) &#123;</span></span><br><span class="line"><span class="regexp">      var time = new Date()</span></span><br><span class="line"><span class="regexp">      time.setTime(time.getTime() - 1000 * 60 * 60 * 8 + 1000 * expires)</span></span><br><span class="line"><span class="regexp">      document.cookie = `$&#123;key&#125;=$&#123;value&#125;;expires=$&#123;time&#125;`</span></span><br><span class="line"><span class="regexp">    &#125; else &#123;</span></span><br><span class="line"><span class="regexp">      document.cookie = `$&#123;key&#125;=$&#123;value&#125;`</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">  &#125;,</span></span><br><span class="line"><span class="regexp">  getCookie: function (key) &#123;</span></span><br><span class="line"><span class="regexp">    /</span><span class="regexp">/ ...</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;)</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 使用我们扩展的方法去设置 cookie</span></span><br><span class="line"><span class="regexp">$.setCookie('a', 100)</span></span><br><span class="line"><span class="regexp">$.setCookie('b', 200, 10)</span></span><br></pre></td></tr></table></figure></div>

<h3 id="拷贝对象"><a href="#拷贝对象" class="headerlink" title="拷贝对象"></a>拷贝对象</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line">/</span><br><span class="line">  jQuery 的拷贝对象问题</span><br><span class="line">    =&gt; 我们的 深浅拷贝</span><br><span class="line">    =&gt; $.extend()</span><br><span class="line">      -&gt; 传递一个对象的时候, 可以做到插件扩展机制</span><br><span class="line">      -&gt; 传递多个对象的时候, 可以将后面几个对象的内容复制到第一个对象里面</span><br><span class="line">    =&gt; 语法:</span><br><span class="line">      -&gt; $.extend(是否深拷贝, 对象<span class="number">1</span>, 对象<span class="number">2</span>, 对象<span class="number">3</span>, ...)</span><br><span class="line">        =&gt; 是否深拷贝: 默认是 <span class="literal">false</span>, 可以不写</span><br><span class="line">        =&gt; 从 对象<span class="number">2</span> 开始, 后面所有对象的内容都会被拷贝到 对象<span class="number">1</span> 里面</span><br><span class="line">        =&gt; 再拷贝的时候, 如果有重复的 key, 那么以写在后面的为准(后来者居上)</span><br><span class="line">*<span class="regexp">/</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">var o1 = &#123;</span></span><br><span class="line"><span class="regexp">  name: '我是 o1 对象',</span></span><br><span class="line"><span class="regexp">  a: 100,</span></span><br><span class="line"><span class="regexp">  b: 200</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">var o2 = &#123;</span></span><br><span class="line"><span class="regexp">  name: '我是 o2 对象',</span></span><br><span class="line"><span class="regexp">  c: 300,</span></span><br><span class="line"><span class="regexp">  d: 400,</span></span><br><span class="line"><span class="regexp">  data: &#123;</span></span><br><span class="line"><span class="regexp">    hello: 'world'</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">var o3 = &#123;</span></span><br><span class="line"><span class="regexp">  name: '我是 o3 对象',</span></span><br><span class="line"><span class="regexp">  e: 500,</span></span><br><span class="line"><span class="regexp">  f: 600</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 进行浅拷贝</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/   吧 o2 和 o3 的成员复制到 o1 里面</span></span><br><span class="line"><span class="regexp">$.extend(o1, o2, o3)</span></span><br><span class="line"><span class="regexp">o1.data.hello = '世界'</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 进行深拷贝</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/   把 o2 和 o3 深拷贝进入到 o1 里面</span></span><br><span class="line"><span class="regexp">$.extend(true, o1, o2, o3)</span></span><br><span class="line"><span class="regexp">o1.data.hello = '世界'</span></span><br><span class="line"><span class="regexp">o1.e = 191919119</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">var o1 = &#123;</span></span><br><span class="line"><span class="regexp">  a: 10,</span></span><br><span class="line"><span class="regexp">  b: 20,</span></span><br><span class="line"><span class="regexp">  data: &#123;</span></span><br><span class="line"><span class="regexp">    c: 30</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">var o2 = &#123;</span></span><br><span class="line"><span class="regexp">  a: o1.a,</span></span><br><span class="line"><span class="regexp">  b: o1.b,</span></span><br><span class="line"><span class="regexp">  data: o1.data</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ o2.data 和 o1.data 使用的是一个空间地址</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">var o2 = &#123;</span></span><br><span class="line"><span class="regexp">  a: o1.a,</span></span><br><span class="line"><span class="regexp">  b: o1.b,</span></span><br><span class="line"><span class="regexp">  data: &#123;</span></span><br><span class="line"><span class="regexp">    c: o1.data.c</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ o2.data 和 o1.data 使用的是两个空间地址</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">o2.data.c = 500</span></span><br></pre></td></tr></table></figure></div>

<h3 id="jq表单验证插件"><a href="#jq表单验证插件" class="headerlink" title="jq表单验证插件"></a>jq表单验证插件</h3><p>展示一下jq插件的用法：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 准备一个表单 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">"login"</span>&gt;</span></span><br><span class="line">  用户名: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">id</span>=<span class="string">"username"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  密码: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">id</span>=<span class="string">"password"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 引入文件 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 注意: 先引入 jQuery, 后引入 jquery-validate --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./jquery/jquery.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- jquery-validate 这个文件依赖的 jquery --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./jquery-validate/jquery.validate.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 引入中文信息提示包, 必须在 jquery-validate 的后面 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./jquery-validate/localization/messages_zh.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">  /</span><br><span class="line">    jQuery 的插件</span><br><span class="line">      + 基于 jQuery 使用的, 别人封装好的插件</span><br><span class="line">      + 我们拿来使用就可以了, 前提就是要有 jQuery</span><br><span class="line"></span><br><span class="line">      + 讲一个叫做 jquery-validate 的插件</span><br><span class="line">        + 专门用来做表单验证的</span><br><span class="line">        + 你输入的内容是不是符合规则</span><br><span class="line">      1. 下载</span><br><span class="line">      2. 引入文件</span><br><span class="line">      3. 去复制粘贴</span><br><span class="line">  */</span><br><span class="line"></span><br><span class="line"><span class="actionscript">  <span class="comment">// 选择到你要验证的表单的 form 标签</span></span></span><br><span class="line"><span class="actionscript">  <span class="comment">//   执行 validate 方法</span></span></span><br><span class="line"><span class="actionscript">  <span class="comment">//   &#123;&#125; 里面就写我们的验证规则</span></span></span><br><span class="line"><span class="javascript">  $(<span class="string">'#login'</span>).validate(&#123;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 你需要的验证规则</span></span></span><br><span class="line">    rules: &#123;</span><br><span class="line"><span class="actionscript">      <span class="comment">// key 就是你要验证的哪个 input 框的 name 属性</span></span></span><br><span class="line"><span class="actionscript">      username: <span class="string">'required'</span>, <span class="comment">// 用户名必填</span></span></span><br><span class="line"><span class="actionscript">      password: &#123; <span class="comment">// 一个字段可以写多个验证方式</span></span></span><br><span class="line"><span class="actionscript">        required: <span class="literal">true</span>,</span></span><br><span class="line"><span class="actionscript">        minlength: <span class="number">6</span>, <span class="comment">// 最少是六个</span></span></span><br><span class="line"><span class="actionscript">        maxlength: <span class="number">12</span>, <span class="comment">// 最多十二个</span></span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"><span class="actionscript">    <span class="comment">// 你自定义提示的文本内容</span></span></span><br><span class="line">    messages: &#123;</span><br><span class="line"><span class="actionscript">      <span class="comment">// key 就是你验证的哪个 input 框的 name 属性</span></span></span><br><span class="line"><span class="actionscript">      username: <span class="string">'请输入用户名! ^_^'</span>,</span></span><br><span class="line">      password: &#123;</span><br><span class="line"><span class="actionscript">        required: <span class="string">'请输入密码!'</span>,</span></span><br><span class="line"><span class="actionscript">        minlength: <span class="string">'最少要输入 6 个字符噢!'</span></span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"><span class="actionscript">    <span class="comment">// 表单的提交事件</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">//    这个函数会在表单验证通过以后执行</span></span></span><br><span class="line"><span class="actionscript">    submitHandler: <span class="function"><span class="keyword">function</span> <span class="params">(form)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">      <span class="comment">// form 接收的就是你的 form 标签</span></span></span><br><span class="line"><span class="actionscript">      <span class="comment">// console.log(form)</span></span></span><br><span class="line"><span class="actionscript">      <span class="comment">// console.log('表单验证通过了, 我需要使用 ajax 去提交数据了')</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">      <span class="comment">// 有一个 jQuery 的方法</span></span></span><br><span class="line"><span class="actionscript">      <span class="comment">// serialize() 快速获取表单输入的数据</span></span></span><br><span class="line"><span class="actionscript">      <span class="comment">//  $(form).serialize() 就能拿到这个 form 标签里面的表单数据</span></span></span><br><span class="line"><span class="actionscript">      <span class="comment">// console.log($(form).serialize())  // username=admin&amp;password=123456</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">      <span class="comment">// 发送请求到后端</span></span></span><br><span class="line"><span class="javascript">      $.post(<span class="string">'./server/login.php'</span>, $(form).serialize(), res =&gt; &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(res)</span></span><br><span class="line"><span class="actionscript">      &#125;, <span class="string">'json'</span>)</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>jQuery</category>
      </categories>
  </entry>
  <entry>
    <title>css布局</title>
    <url>/jackhuang-haohua.github.io/2019/01/11/2020-05-css%E5%B8%83%E5%B1%80/</url>
    <content><![CDATA[<h2 id="一、文档流display"><a href="#一、文档流display" class="headerlink" title="一、文档流display"></a>一、文档流display</h2><p>　不添加任何css，自然呈现的布局；按照文档的顺序一个一个显示出来，块元素独占一行，行内元素共享一行</p>
<h2 id="二、浮动布局float"><a href="#二、浮动布局float" class="headerlink" title="二、浮动布局float"></a>二、浮动布局float</h2><p>　使元素脱离文档流，相对于父元素，向左或向右浮动，但是会造成高度塌陷的bug<br>　高度塌陷：当元素设置浮动而父元素的宽高没有设置时，高度会塌缩为0。<br>　解决方案：父元素加高度，父元素overflow:hidden，空元素clear:both，父元素.clearfix样式</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSS"><figure class="iseeu highlight /css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">    <span class="attribute">visibility</span>: hidden;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">" "</span>;</span><br><span class="line">    <span class="attribute">clear</span>: both;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="三、定位position"><a href="#三、定位position" class="headerlink" title="三、定位position"></a>三、定位position</h2><p>　有static/relative/absolute/fixed几种：</p>
<ol>
<li>static：默认值，left、top等不起作用</li>
<li>relative：在原来位置上增加left、top</li>
<li>absolute：脱离文档流，元素的位置就是以他父代元素position不为static的元素作为参考，如果他的父代元素都是position:static，则以body作为参考</li>
<li>fixed：相对于屏幕的位置不变，用于小广告，回到顶部等</li>
</ol>
<p>　题目：父红色方块relative，index=1；子蓝色方块absolute；兄绿色方块relative。此时给蓝色方块设置index=-1，并不能去到下面 (涉及层叠上下文)。先给红色方块index不设置或等于auto，蓝色方块的index=-1才会生效<br><img src="https://s1.ax1x.com/2020/05/11/YJuaZj.png" alt="YJuaZj.png"></p>
<h2 id="四、flex-IE10-，移动端"><a href="#四、flex-IE10-，移动端" class="headerlink" title="四、flex(IE10+，移动端)"></a>四、flex(IE10+，移动端)</h2><p>①指定容器为flex布局：display: flex / inline-flex / -webkit-flex。设置后，子元素的float，clear，vertical-align失效<br>②基本概念：flex container容器，flex item项目，main axis水平主轴，cross axis垂直的交叉轴<br>③属性</p>
<h3 id="容器的属性"><a href="#容器的属性" class="headerlink" title="容器的属性"></a>容器的属性</h3><ol>
<li>flex-direction(主轴方向)：row(水平左边起)，row-reverse、column(垂直上边起)，column-reverse</li>
<li>flex-wrap(是否换行)：nowrap，wrap(换行，第一行在上方)，wrap-reverse(换行，第一行在下方)</li>
<li>flex-flow：<flex-direction> || <flex-wrap></li>
<li>justify-content(主轴水平方向的对齐)：flex-start / flex-end / center / space-between(两端) / space-around(每个项目两侧间隔相等)</li>
<li>align-items(交叉轴垂直方向的对齐)：flex-start / flex-end / center / baseline(以item第一行文字为基线)000000 / stretch(默认值，如果项目未设置高度或为auto，item将占满整个容器的高度)</li>
<li>align-content(多根轴线对齐)： flex-start / flex-end / center / space-between / space-around / stretch</li>
</ol>
<h3 id="项目的属性"><a href="#项目的属性" class="headerlink" title="项目的属性"></a>项目的属性</h3><ol>
<li>order(项目的顺序)：num  数值越小排序越靠前，默认为0</li>
<li>flex-grow(放大比例)：num  默认为0；如果一个项目未2，其他项目为1，则前者占据的空间比其他多一倍</li>
<li>flex-shrink(缩小比例)：num  默认为1；如果一个项目为0，其他项目都为1，则空间不足时，前者不缩小</li>
<li>flex-basis(基础占据空间)：num || auto  默认auto；定义了在分配多余空间之前，项目占据的主轴空间（main size），它可以设为跟width或height属性一样的值（比如350px），则项目将占据固定空间。</li>
<li>flex(前面三个的缩写)：auto</li>
<li>align-self(单个项目的特殊对齐方式)：auto / flex-start / flex-end / center / baseline / stretch</li>
</ol>
<p>④应用</p>
<ul>
<li><p>使元素水平垂直居中居中：display:flex ；justify-content:center ；align-item:center</p>
</li>
<li><p>容器内两端对齐<br>flex: auto =&gt; flex: 1,1,auto =&gt;<br><img src="https://s1.ax1x.com/2020/05/11/YJK379.png" alt="YJK379.png"></p>
</li>
</ul>
<p>flex: 1 =&gt; flex: 1,1,1 =&gt;<br><img src="https://s1.ax1x.com/2020/05/11/YJKYfx.png" alt="YJKYfx.png"></p>
<p>或者像下面这种布局，给左边的文字flex:1，就能自动占满：<br><img src="https://s1.ax1x.com/2020/05/11/YJKU1K.png" alt="YJKU1K.png"></p>
<h2 id="五、grid网格布局"><a href="#五、grid网格布局" class="headerlink" title="五、grid网格布局"></a>五、grid网格布局</h2><p>①概念：父元素为“容器”，子元素为“项目”，不对孙元素生效<br>②属性</p>
<h3 id="容器的属性-1"><a href="#容器的属性-1" class="headerlink" title="容器的属性"></a>容器的属性</h3><ul>
<li>display：grid / inline-grid 可以指定容器为行内元素</li>
</ul>
<p><strong>划分行和列：</strong></p>
<ul>
<li>grid-template-columns：100px 100px 10px</li>
<li>grid-template-columns：33.33%  33.33%  33.33%</li>
<li>grid-template-columns：repeat(3，33.33%)</li>
<li>grid-template-columns：repeat(2,100px  20px  80px)=&gt;6列，100  20  80重复两次</li>
<li>grid-template-columns：repeat(auto-fill，100px)=&gt;每列宽100px，填充满容器</li>
<li>grid-template-columns：1fr  2fr  =&gt;填充满容器，第二列宽度是第一列两倍</li>
<li>grid-template-columns：1fr  1fr  minmax(100px，1fr)</li>
<li>grid-template-columns：[c1]  100px  [c2]  100px  [c3]  auto  [c4]=&gt;给网格线命名</li>
<li>row-gap：20px  行间距</li>
<li>grid-auto-flow：column  ，项目按照从上到下，从左到右的方式排列</li>
</ul>
<p><strong>行缩进</strong></p>
<ul>
<li>grid-auto-flow：row ，所有元素按顺序排，地方太小就空着，不会占满；</li>
<li>grid-auto-flow：row dense ，会打乱原来的顺序，把后面的元素提到前面来，直到占满空间；</li>
</ul>
<p><strong>自定义区域：</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">container &#123; 指定“区域”</span><br><span class="line">    display: grid;</span><br><span class="line">    grid-template-areas: </span><br><span class="line">        &#39;a b c&#39;</span><br><span class="line">        &#39;d e f&#39;</span><br><span class="line">        &#39;g h i&#39;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>项目内部元素的对齐：</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">.container &#123;</span><br><span class="line">    justify-items: start | end | center | stretch;</span><br><span class="line">    align-items: start | end | center | stretch;</span><br><span class="line">    place-items: start end;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>容器内部项目的对齐：</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">.container &#123;</span><br><span class="line">    justify-content: start | end | center | stretch | space-around | space-between | space-evenly;</span><br><span class="line">    align-content: start | end | center | stretch | space-around | space-between | space-evenly;</span><br><span class="line">    place-content: &lt;align-content&gt; &lt;justify-content&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>


<p><strong>自动占位：</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">.container &#123;</span><br><span class="line">    display: grid;</span><br><span class="line">    grid-template-columns: 100px 100px 100px;</span><br><span class="line">    grid-template-rows: 100px 100px 100px;</span><br><span class="line">    grid-auto-rows: 50px; 当指定一些元素离开原来的位置时，会自动创建列来占位</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>指定特殊位置：</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">.item-8 &#123;</span><br><span class="line">  background-color: #d0e4a9;</span><br><span class="line">  grid-row-start: 4;</span><br><span class="line">  grid-column-start: 2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p><img src="https://s1.ax1x.com/2020/05/11/YJYMXq.png" alt="YJYMXq.png"></p>
<h3 id="项目的属性-1"><a href="#项目的属性-1" class="headerlink" title="项目的属性"></a>项目的属性</h3><p><strong>通过网格线，指定某个子元素的位置</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">.item-1 &#123;</span><br><span class="line">    grid-column-start: 1;</span><br><span class="line">    grid-column-end: 3;</span><br><span class="line">    grid-row-start: 2;</span><br><span class="line">    grid-row-end: 4;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p><img src="https://s1.ax1x.com/2020/05/11/YJYxbV.png" alt="YJYxbV.png"></p>
<p><strong>通过span指定子元素占多少位置</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">.item-1 &#123;</span><br><span class="line">    grid-column-start: span 2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p><img src="https://s1.ax1x.com/2020/05/11/YJtBxs.png" alt="YJtBxs.png"></p>
<p><strong>通过网格线指定位置，更方便的写法</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">.item-1 &#123;</span><br><span class="line">    background: #b03532;</span><br><span class="line">    grid-column: 1 &#x2F; 3;</span><br><span class="line">    grid-row: 1 &#x2F; 3;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;* 等同于 *&#x2F;</span><br><span class="line">.item-1 &#123;</span><br><span class="line">    background: #b03532;</span><br><span class="line">    grid-column: 1 &#x2F; span 2;</span><br><span class="line">    grid-row: 1 &#x2F; span 2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p><img src="https://s1.ax1x.com/2020/05/11/YJN6ld.png" alt="YJN6ld.png"></p>
<h3 id="一个小案例"><a href="#一个小案例" class="headerlink" title="一个小案例"></a>一个小案例</h3><p>　知识点：<code>grid-template-rows</code> 设置为 auto 时，slider 和 content 的高度是一致的，并且会根据其内的高度自适应；<br><img src="https://s1.ax1x.com/2020/05/11/YJNbXn.png" alt="YJNbXn.png"></p>
<h2 id="六、水平垂直居中"><a href="#六、水平垂直居中" class="headerlink" title="六、水平垂直居中"></a>六、水平垂直居中</h2><ul>
<li>flex：justify-content：center；align-item：center</li>
<li>grid：justify-item：center；align-item：center</li>
<li>定位：position：absolute；top：50%；left：50%；transform：translate(50%，50%)</li>
<li>文字/行内元素：text-align：center；lineheight：等于父元素</li>
</ul>
<h2 id="七、圣杯布局"><a href="#七、圣杯布局" class="headerlink" title="七、圣杯布局"></a>七、圣杯布局</h2><p>①flex实现：中间的加上flex：auto<br>②position实现：中间padding：0 200px，两边绝对定位<br>③margin-left实现：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">.container&#123;</span><br><span class="line">    padding: 0 200px;</span><br><span class="line">&#125;</span><br><span class="line">.middle&#123;</span><br><span class="line">    width: 100%;</span><br><span class="line">    background: paleturquoise;</span><br><span class="line">    height: 200px;</span><br><span class="line">    float: left;</span><br><span class="line">&#125;</span><br><span class="line">.left&#123;</span><br><span class="line">    background: palevioletred;</span><br><span class="line">    width: 200px;</span><br><span class="line">    height: 200px;</span><br><span class="line">    float: left;</span><br><span class="line">    font-size: 40px;</span><br><span class="line">    color: #fff;</span><br><span class="line">    &#x2F;* 这里的margin-left是相对于父元素 *&#x2F;</span><br><span class="line">    margin-left:-100%;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">.right&#123;</span><br><span class="line">    width: 200px;</span><br><span class="line">    height: 200px;</span><br><span class="line">    background: purple;</span><br><span class="line">    font-size: 40px;</span><br><span class="line">    float: left;</span><br><span class="line">    color: #fff;</span><br><span class="line">    margin-left:-200px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="双飞翼布局"><a href="#双飞翼布局" class="headerlink" title="双飞翼布局"></a>双飞翼布局</h2><p>　圣杯布局和双飞翼布局解决问题的方案在前一半是相同的，也就是三栏全部float浮动，但左右两栏加上负margin让其跟中间栏div并排，以形成三栏布局。<br>　不同在于解决”中间栏div内容不被遮挡“问题的思路不一样：圣杯布局，为了中间div内容不被遮挡，将中间div设置了左右padding-left和padding-right后，将左右两个div用相对布局position: relative并分别配合right和left属性，以便左右两栏div移动后不遮挡中间div。<br>　双飞翼布局，为了中间div内容不被遮挡，直接在中间div内部创建子div用于放置内容，在该子div里用margin-left和margin-right为左右两栏div留出位置。</p>
]]></content>
      <categories>
        <category>css</category>
      </categories>
  </entry>
  <entry>
    <title>react利用生命周期优化性能</title>
    <url>/jackhuang-haohua.github.io/2019/08/25/2020-05-react-%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<p>之前在总结react生命周期的知识时，在更新阶段有这么一个函数：</p>
<p><strong>shouldComponentUpdate(nextProps,nextState)</strong></p>
<ul>
<li>询问组件是否进行更新操作，默认返回true，代表组件要render更新了，</li>
<li>有两个参数nextProps和nextState，表示新的属性和变化之后的state，</li>
</ul>
<p>　当时并不知道具体用法，不久前逛论坛看到这么一句话：<strong>我们应该尽量使用shouldComponentUpdate</strong>，为什么要这么做呢？今天查完资料才知道可以优化性能，在这里总结一下！<br>　共三种方法；</p>
<h2 id="shouldComponentUpdate"><a href="#shouldComponentUpdate" class="headerlink" title="shouldComponentUpdate"></a>shouldComponentUpdate</h2><p>　我们需要将this.props与nextProps以及this.state与nextState进行比较来决定是否返回false，来减少重新渲染，例如：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line">shouldComponentUpdate(nextProps, nextState)&#123;</span><br><span class="line">    <span class="comment">// 之前的属性值与最新的属性值如果不一样的话才会返回true</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.props.flag !== nextProps.flag)&#123; </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="PureComponent"><a href="#PureComponent" class="headerlink" title="PureComponent"></a>PureComponent</h2><p>　如果不用should函数，可以使用PureComponent 或 React.memo优化性能，<br><strong>使用：</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">index</span> <span class="keyword">extends</span> <span class="title">PureComponent</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure></div>
<p><strong>原理：</strong><br>　PureComponent通过prop和state的浅比较来实现shouldComponentUpdate，<br>　比如用来展示组件，<strong>this.state中的数据都是 字符串，数字，布尔值，这些基本数据类型值改变就算变化了</strong>，<br>　<strong>如果state中数据含有数组/对象，使用extends PureComponent后，数组/对象的值改变，地址不会变，所以this.state.arr也没有更新，this.setState()不触发，后续的render也不会触发</strong>，</p>
<p>　比如下面的代码，使用了PureComponent后，arr值改变了地址不变，组件不会因此更新</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line">changeState = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> &#123; arr &#125; = <span class="keyword">this</span>.state;</span><br><span class="line">    arr.push(<span class="string">'2'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">        arr</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>　可以用扩展运算符，相当于重新定义了一个新的arr，地址改变了，组件也会更新</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line">changeState = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> &#123; arr &#125; = <span class="keyword">this</span>.state;</span><br><span class="line">    arr.push(<span class="string">'2'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">        arr: [...arr, <span class="string">'2'</span>]</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>注意：</strong></p>
<ol>
<li>如果prop和state每次都会变，那么PureComponent的效率还不如Component，因为进行浅比较也是需要时间</li>
<li>若有shouldComponentUpdate，则执行它，若没有这个方法会判断是不是PureComponent，若是，进行浅比较</li>
</ol>
<h2 id="memo高阶组件"><a href="#memo高阶组件" class="headerlink" title="memo高阶组件"></a>memo高阶组件</h2><p>　一种高阶组件，可以接受2个参数，第一个为函数式组件，第二个用于对比props控制是否刷新，类似shouldComponentUpdate：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child</span>(<span class="params">&#123;seconds&#125;</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;div&gt;I am update every &#123;seconds&#125; seconds&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">function areEqual(prevProps, nextProps) &#123;</span></span><br><span class="line"><span class="regexp">    if(prevProps.seconds===nextProps.seconds)&#123;</span></span><br><span class="line"><span class="regexp">        return true</span></span><br><span class="line"><span class="regexp">    &#125;else &#123;</span></span><br><span class="line"><span class="regexp">        return false</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default React.memo(Child,areEqual)</span></span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>react</category>
      </categories>
  </entry>
  <entry>
    <title>react做一个小demo</title>
    <url>/jackhuang-haohua.github.io/2019/09/03/2020-05-react-%E5%90%8E%E5%8F%B0%E9%A1%B9%E7%9B%AE/</url>
    <content><![CDATA[<h2 id="一、cra搭建项目"><a href="#一、cra搭建项目" class="headerlink" title="一、cra搭建项目"></a>一、cra搭建项目</h2><ol>
<li>npm i create-react-app -g</li>
<li>create-react-app –version</li>
<li>create-react-app 项目名称</li>
<li>cd 项目名称</li>
<li>yarn start 启动项目</li>
</ol>
<h2 id="二、配置路由"><a href="#二、配置路由" class="headerlink" title="二、配置路由"></a>二、配置路由</h2><h3 id="①首先要有组件，-src文件夹下："><a href="#①首先要有组件，-src文件夹下：" class="headerlink" title="①首先要有组件，/src文件夹下："></a>①首先要有组件，/src文件夹下：</h3><p><img src="https://s1.ax1x.com/2020/05/06/YVNDPg.png" alt="YVNDPg.png"></p>
<h3 id="②src-views-index-js-中汇总组件"><a href="#②src-views-index-js-中汇总组件" class="headerlink" title="②src/views/index.js 中汇总组件"></a>②src/views/index.js 中汇总组件</h3><p>使用了懒加载插件，yarn add react-loadable</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 直接引入组件</span></span><br><span class="line"><span class="comment">// import Article from "./article"</span></span><br><span class="line"><span class="comment">// import ArticleEdit from "./article/Edit"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 懒加载插件</span></span><br><span class="line"><span class="keyword">import</span> Loadable <span class="keyword">from</span> <span class="string">'react-loadable'</span>;</span><br><span class="line"><span class="keyword">import</span> Loading <span class="keyword">from</span> <span class="string">'../components/loading'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Article = Loadable(&#123;</span><br><span class="line">    loader: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'./article'</span>),</span><br><span class="line">    loading: Loading,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">const</span> ArticleEdit = Loadable(&#123;</span><br><span class="line">    loader: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'./article/Edit'</span>),</span><br><span class="line">    loading: Loading,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">    Article,</span><br><span class="line">    ArticleEdit,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="③分类"><a href="#③分类" class="headerlink" title="③分类"></a>③分类</h3><p>把组件和路由信息单独放在一个文件了，方便修改；给每个组件分类并配置路由，如下代码；因为太多没有把代码全部粘过来，但是这么个形式：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span>  &#123;</span><br><span class="line">    Article,</span><br><span class="line">    ArticleEdit,</span><br><span class="line">    Login,</span><br><span class="line">    Notfound,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">"../views"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 登录和404页面</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> mainRoute = [</span><br><span class="line">    &#123;</span><br><span class="line">        pathname:<span class="string">"/login"</span>,</span><br><span class="line">        component:Login</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        pathname:<span class="string">"/404"</span>,</span><br><span class="line">        component:Notfound</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 侧边栏页面</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> admainRoute = [</span><br><span class="line">    &#123;</span><br><span class="line">        pathname:<span class="string">"/admin/article"</span>,</span><br><span class="line">        component:Article</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        pathname:<span class="string">"/admin/article/edit/:id"</span>,</span><br><span class="line">        component:ArticleEdit</span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure></div>

<h3 id="④src-index中生成路由"><a href="#④src-index中生成路由" class="headerlink" title="④src/index中生成路由"></a>④src/index中生成路由</h3><p>总入口文件中：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">'react-dom'</span>;</span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App'</span>;</span><br><span class="line"><span class="comment">// 路由</span></span><br><span class="line"><span class="keyword">import</span> &#123;HashRouter <span class="keyword">as</span> Router,Route,Redirect,Switch&#125; <span class="keyword">from</span> <span class="string">"react-router-dom"</span></span><br><span class="line"><span class="keyword">import</span> &#123;mainRoute&#125; <span class="keyword">from</span> <span class="string">"./routes"</span></span><br><span class="line"><span class="comment">// App的样式</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">"./index.less"</span></span><br><span class="line"><span class="comment">// redux</span></span><br><span class="line"><span class="keyword">import</span> &#123;Provider&#125; <span class="keyword">from</span> <span class="string">"react-redux"</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">"./store"</span></span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">  &lt;Provider store=&#123;store&#125;&gt;</span><br><span class="line">    &lt;Router&gt;</span><br><span class="line">      &lt;Switch&gt;</span><br><span class="line">        &#123;<span class="comment">/* App是主页面 */</span>&#125;</span><br><span class="line">        &lt;Route path=<span class="string">"/admin"</span> render=&#123;(routeProps)=&gt;&#123;   </span><br><span class="line">          <span class="keyword">return</span> localStorage.getItem(<span class="string">"token"</span>)? <span class="xml"><span class="tag">&lt;<span class="name">App</span>/&gt;</span></span> : <span class="xml"><span class="tag">&lt;<span class="name">Redirect</span> <span class="attr">to</span>=<span class="string">"/login"</span> /&gt;</span></span></span><br><span class="line"><span class="xml">        &#125;&#125;/&gt; </span></span><br><span class="line"></span><br><span class="line">        &#123;/* 循环数组，生成&lt;Route path="" component=""/&gt; */&#125;</span><br><span class="line">        &#123;</span><br><span class="line">          mainRoute.map(route=&gt;&#123;</span><br><span class="line">            return &lt;Route key=&#123;route.pathname&#125; path=&#123;route.pathname&#125; component=&#123;route.component&#125;/&gt;</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        &#123;/* 重定向 */&#125;</span><br><span class="line">        &lt;Redirect to="/admin" from="/" exact/&gt;  </span><br><span class="line">        &lt;Redirect to="/404" /&gt;</span><br><span class="line">      &lt;/Switch&gt;</span><br><span class="line">    &lt;/Router&gt;</span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">Provider</span>&gt;</span></span></span><br><span class="line"><span class="xml">  ,</span></span><br><span class="line"><span class="xml">  document.getElementById('root')</span></span><br><span class="line"><span class="xml">);</span></span><br></pre></td></tr></table></figure></div>
<ul>
<li>这里表示生成了三个路由：/login，/404，/admin，因为包裹了switch，所以每次只能进去一个路由</li>
<li>provider是reducer相关，上一篇文章讲过了</li>
<li><code>localStorage.getItem(&quot;token&quot;)</code>是一个简单的鉴权认证，表示有token才能去到/admin路由</li>
</ul>
<h3 id="④子路由"><a href="#④子路由" class="headerlink" title="④子路由"></a>④子路由</h3><p>App是主页面，即/admin是主页面，在这个主路由下还有几个子路由；</p>
<p>不过在此之前我们要给这个App页面布局；<br><strong>使用antd布局</strong><br>　上面的Frame是主页面，用的antd来布局；<br>　安装antd就不说了…<br>　新建一个组件src/components/frame/index.js；<br>　在官网把layout布局复制进去；</p>
<p>之后，在src/App.js中配置；把Frame放在最外层，/admin就会显示Frame组件，</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> &#123;admainRoute&#125; <span class="keyword">from</span> <span class="string">"./routes"</span></span><br><span class="line"><span class="keyword">import</span> &#123;Route,Redirect,Switch&#125; <span class="keyword">from</span> <span class="string">"react-router-dom"</span></span><br><span class="line"><span class="keyword">import</span> Frame <span class="keyword">from</span> <span class="string">"./components/frame"</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;Frame&gt;</span><br><span class="line">        &lt;Switch&gt;</span><br><span class="line">          &#123;</span><br><span class="line">            admainRoute.map(<span class="function"><span class="params">route</span>=&gt;</span>&#123;</span><br><span class="line">              <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">Route</span> <span class="attr">key</span>=<span class="string">&#123;route.pathname&#125;</span> <span class="attr">path</span>=<span class="string">&#123;route.pathname&#125;</span> <span class="attr">component</span>=<span class="string">&#123;route.component&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="xml">            &#125;)</span></span><br><span class="line"><span class="xml">          &#125;</span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">Redirect</span> <span class="attr">to</span>=<span class="string">&#123;admainRoute[0].pathname&#125;</span> <span class="attr">from</span>=<span class="string">"/admin"</span> <span class="attr">exact</span>/&gt;</span></span></span><br><span class="line">          &lt;Redirect to="/404" /&gt;</span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">Switch</span>&gt;</span> </span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">Frame</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<ul>
<li>这里表示创建了/admin/dashboard，/admin/acticle等几个路由；</li>
<li>地址栏输入/admin/dashboard时，发现并子路由并没有显示；</li>
<li>但是其他路由没有显示，因为其他路由是在Frame里的，类似于Frame的子组件，可以直接把子路由放在Frame的content里：</li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line">&lt;Content style=&#123;&#123; <span class="attr">padding</span>: <span class="string">'0 24px'</span>, <span class="attr">minHeight</span>: <span class="number">280</span> &#125;&#125;&gt;</span><br><span class="line">    &#123;<span class="keyword">this</span>.props.children&#125;</span><br><span class="line">&lt;<span class="regexp">/Content&gt;</span></span><br></pre></td></tr></table></figure></div>
<p>这时候输入/admin/dashboard，会发现App组件和dashboard都出现了。</p>
<h2 id="三、导航栏"><a href="#三、导航栏" class="headerlink" title="三、导航栏"></a>三、导航栏</h2><p>插入图片，图片直接放在同一文件夹下就行</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line">&#123;<span class="comment">/* import Logo from "./logo.png" */</span>&#125;</span><br><span class="line">&lt;Header className=<span class="string">"header qf-header"</span>&gt;</span><br><span class="line">    &lt;div className=<span class="string">"logo"</span> &gt;</span><br><span class="line">        &lt;img  src=&#123;Logo&#125; alt=<span class="string">"logo"</span>/&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>Header&gt;</span><br></pre></td></tr></table></figure></div>

<h2 id="四、左侧菜单栏（文字、图标、跳转）"><a href="#四、左侧菜单栏（文字、图标、跳转）" class="headerlink" title="四、左侧菜单栏（文字、图标、跳转）"></a>四、左侧菜单栏（文字、图标、跳转）</h2><p>这里又用到了src/routes/index.js里的数据，<br>之前我们给每个组件配上地址，用这些数据循环生成了路由，<br>现在需要加上title和icon，<br>关于icon：yarn add @ant-design/icons =&gt; ant官网找图标 =&gt; 引入图标 =&gt; 复制jsx代码，<br><strong>其实用阿里的iconfont更方便，官网都有介绍。</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用antd里面的icon图标</span></span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">    DashboardOutlined,</span><br><span class="line">    OrderedListOutlined,</span><br><span class="line">    SettingOutlined</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'@ant-design/icons'</span>;</span><br><span class="line"><span class="comment">// 图标&lt;DashboardOutlined /&gt;的这种格式是jsx语法，只用引入react才有用，不然就是字符串</span></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">"react"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// /admin/XXX   dashboard article articleEdit settings</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> admainRoute = [</span><br><span class="line">    &#123;</span><br><span class="line">        pathname:<span class="string">"/admin/dashboard"</span>,</span><br><span class="line">        component:Dashboard,</span><br><span class="line">        title:<span class="string">"仪表盘"</span>,</span><br><span class="line">        isNav:<span class="literal">true</span>,</span><br><span class="line">        icon:<span class="xml"><span class="tag">&lt;<span class="name">DashboardOutlined</span> /&gt;</span></span></span><br><span class="line"><span class="xml">    &#125;,</span></span><br><span class="line"><span class="xml">    &#123;</span></span><br><span class="line"><span class="xml">        pathname:"/admin/article",</span></span><br><span class="line"><span class="xml">        component:Article,</span></span><br><span class="line"><span class="xml">        exact:true,</span></span><br><span class="line"><span class="xml">        title:"文章列表",</span></span><br><span class="line"><span class="xml">        isNav:true,</span></span><br><span class="line"><span class="xml">        icon:<span class="tag">&lt;<span class="name">OrderedListOutlined</span> /&gt;</span></span></span><br><span class="line"><span class="xml">    &#125;,</span></span><br><span class="line"><span class="xml">    &#123;</span></span><br><span class="line"><span class="xml">        pathname:"/admin/article/edit/:id",</span></span><br><span class="line"><span class="xml">        component:ArticleEdit,</span></span><br><span class="line"><span class="xml">    &#125;,</span></span><br><span class="line"><span class="xml">]</span></span><br></pre></td></tr></table></figure></div>

<p>注意，图标<Icon />的这种格式是jsx语法，只用引入react才有用，不然就会变成字符串，<br>然后用这些数据生成导航栏，</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line">&lt;Menu</span><br><span class="line">    mode=<span class="string">"inline"</span></span><br><span class="line">    defaultSelectedKeys=&#123;[menu[<span class="number">0</span>].pathname]&#125;</span><br><span class="line">    selectedKeys=&#123;[<span class="keyword">this</span>.props.location.pathname]&#125;</span><br><span class="line">    style=&#123;&#123; <span class="attr">height</span>: <span class="string">'100%'</span> &#125;&#125;</span><br><span class="line">    onClick = &#123;<span class="keyword">this</span>.handleMenu&#125;</span><br><span class="line">&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        menu.map(<span class="function"><span class="params">route</span>=&gt;</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> (</span><br><span class="line">                &lt;Menu.Item key=&#123;route.pathname&#125;&gt;</span><br><span class="line">                    &#123;route.icon&#125;</span><br><span class="line">                    &#123;route.title&#125;</span><br><span class="line">                &lt;<span class="regexp">/Menu.Item&gt;</span></span><br><span class="line"><span class="regexp">            )</span></span><br><span class="line"><span class="regexp">        &#125;)</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&lt;/</span>Menu&gt;</span><br></pre></td></tr></table></figure></div>

<p>点击跳转，<br>ant-Menu自带onclick事件，点击Menu-item触发事件，利用push跳转路由 =&gt; 但Frame现在不是路由组件，没有history，location，match =&gt; 需要用withRouter()变成伪路由组件</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;withRouter&#125; <span class="keyword">from</span> <span class="string">"react-router-dom"</span></span><br><span class="line">@withRouter</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">index</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    handleMenu = <span class="function">(<span class="params">&#123;key&#125;</span>)=&gt;</span>&#123;   </span><br><span class="line">        <span class="keyword">this</span>.props.history.push(key)</span><br><span class="line">    &#125;</span><br><span class="line">    render()&#123;</span><br><span class="line">        &lt;Menu</span><br><span class="line">        mode=<span class="string">"inline"</span></span><br><span class="line">        defaultSelectedKeys=&#123;[menu[<span class="number">0</span>].pathname]&#125;</span><br><span class="line">        selectedKeys=&#123;[<span class="keyword">this</span>.props.location.pathname]&#125;</span><br><span class="line">        style=&#123;&#123; <span class="attr">height</span>: <span class="string">'100%'</span> &#125;&#125;</span><br><span class="line">        onClick = &#123;<span class="keyword">this</span>.handleMenu&#125;</span><br><span class="line">    &gt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> index</span><br></pre></td></tr></table></figure></div>

<h2 id="五、RAP2模拟接口（mock）"><a href="#五、RAP2模拟接口（mock）" class="headerlink" title="五、RAP2模拟接口（mock）"></a>五、RAP2模拟接口（mock）</h2><h2 id="六、封装axios"><a href="#六、封装axios" class="headerlink" title="六、封装axios"></a>六、封装axios</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line">①yarn add axios</span><br><span class="line">②src/request/index.js：</span><br><span class="line"><span class="comment">//使用axios进行异步操作</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">"axios"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Antd弹出警告框</span></span><br><span class="line"><span class="keyword">import</span> &#123;message&#125; <span class="keyword">from</span> <span class="string">"antd"</span></span><br><span class="line">message.config(&#123;</span><br><span class="line">    top: <span class="number">200</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//请求基本地址</span></span><br><span class="line"><span class="keyword">const</span> service = axios.create(&#123;</span><br><span class="line">    baseURL:<span class="string">"http://rap2.taobao.org:38080/app/mock/251920"</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//axios的拦截器</span></span><br><span class="line"><span class="comment">//请求之前的拦截</span></span><br><span class="line">service.interceptors.request.use(<span class="function"><span class="params">config</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">//后续token值需要从本地存储取出来，然后再去发给后端</span></span><br><span class="line">    <span class="comment">//自定义请求的config，把参数放到config.data，相当于body携带参数</span></span><br><span class="line">    config.data = &#123;...config.data,<span class="attr">token</span>:<span class="string">"adjlsajdlaoeuasd"</span>&#125;</span><br><span class="line">    <span class="keyword">return</span> config</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//响应之后的拦截</span></span><br><span class="line">service.interceptors.response.use(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(res.data.code === <span class="number">200</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> res.data.data</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">// 请求失败则弹出警告框</span></span><br><span class="line">        message.error(res.data.errMsg)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//导出 请求方法</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> getArticle = <span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> service.post(<span class="string">"/api/v1/articleList"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="七、用数据渲染分页表格"><a href="#七、用数据渲染分页表格" class="headerlink" title="七、用数据渲染分页表格"></a>七、用数据渲染分页表格</h2><p>Antd的分页table要有个数据源和每一列的参数，会根据列参数自动匹配数据源</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 数据源</span></span><br><span class="line"><span class="keyword">const</span> dataSource = [</span><br><span class="line">    &#123;</span><br><span class="line">      key: <span class="string">'1'</span>,</span><br><span class="line">      name: <span class="string">'胡彦斌'</span>,</span><br><span class="line">      age: <span class="number">32</span>,</span><br><span class="line">      address: <span class="string">'西湖区湖底公园1号'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      key: <span class="string">'2'</span>,</span><br><span class="line">      name: <span class="string">'胡彦祖'</span>,</span><br><span class="line">      age: <span class="number">42</span>,</span><br><span class="line">      address: <span class="string">'西湖区湖底公园1号'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">];</span><br><span class="line"><span class="comment">// 每一列的参数</span></span><br><span class="line"><span class="keyword">const</span> columns = [</span><br><span class="line">    &#123;</span><br><span class="line">        title: <span class="string">'姓名'</span>, <span class="comment">//列的名字</span></span><br><span class="line">        dataIndex: <span class="string">'name'</span>, <span class="comment">//这一列的数据需要显示name</span></span><br><span class="line">        key: <span class="string">'name'</span>, <span class="comment">//这一列的key</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        title: <span class="string">'年龄'</span>,</span><br><span class="line">        dataIndex: <span class="string">'age'</span>,</span><br><span class="line">        key: <span class="string">'age'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        title: <span class="string">'住址'</span>,</span><br><span class="line">        dataIndex: <span class="string">'address'</span>,</span><br><span class="line">        key: <span class="string">'address'</span>,</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></div>

<p>按照上面的规则，将请求来数据处理成 列参数，然后渲染</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> &#123;Card,Button,Table&#125; <span class="keyword">from</span> <span class="string">"antd"</span></span><br><span class="line"><span class="keyword">import</span> &#123;getArticle&#125; <span class="keyword">from</span> <span class="string">"../../request"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> titleDisplayMap=&#123;</span><br><span class="line">    id:<span class="string">"id"</span>,</span><br><span class="line">    title:<span class="string">"标题"</span>,</span><br><span class="line">    amount:<span class="string">"阅读量"</span>,</span><br><span class="line">    author:<span class="string">"作者"</span>,</span><br><span class="line">    currentAt:<span class="string">"当前时间"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">index</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 定义数据，或者在constructor</span></span><br><span class="line">    state = &#123;</span><br><span class="line">        dataSource:[], <span class="comment">//定义初始化的数据源</span></span><br><span class="line">        columns: [],  <span class="comment">//定义初始化的列</span></span><br><span class="line">        total:<span class="number">0</span> <span class="comment">//总行数</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 请求数据的方法</span></span><br><span class="line">    getData = <span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">        getArticle().then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">            <span class="comment">// 下面两个const得到了列参数</span></span><br><span class="line">            <span class="keyword">const</span> columnsKey = <span class="built_in">Object</span>.keys(res.list[<span class="number">0</span>]) <span class="comment">//["id","title","author","amount","currentAt"]</span></span><br><span class="line">            <span class="keyword">const</span> columns = columnsKey.map(<span class="function"><span class="params">item</span>=&gt;</span>&#123; <span class="comment">//colums=[&#123;title:"id",dataIndex:"id",key:"id"&#125;&#123;&#125;,&#123;&#125;]</span></span><br><span class="line">                <span class="keyword">return</span> &#123;</span><br><span class="line">                    title: titleDisplayMap[item],    </span><br><span class="line">                    dataIndex: item, </span><br><span class="line">                    key: item,</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">            <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">                total:res.total,    <span class="comment">//设置分页的数量</span></span><br><span class="line">                columns,            <span class="comment">//设置列的数组</span></span><br><span class="line">                dataSource:res.list <span class="comment">//设置异步请求回来的数据</span></span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// DidMount里请求数据</span></span><br><span class="line">    componentDidMount()&#123;</span><br><span class="line">        <span class="keyword">this</span>.getData()</span><br><span class="line">    &#125;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;Card </span><br><span class="line">                title=<span class="string">"文章列表"</span> </span><br><span class="line">                extra=&#123;&lt;Button&gt;More&lt;<span class="regexp">/Button&gt;&#125; </span></span><br><span class="line"><span class="regexp">            &gt;</span></span><br><span class="line"><span class="regexp">                &lt;Table </span></span><br><span class="line"><span class="regexp">                    dataSource=&#123;this.state.dataSource&#125; </span></span><br><span class="line"><span class="regexp">                    columns=&#123;this.state.columns&#125; </span></span><br><span class="line"><span class="regexp">                    rowKey=&#123;record=&gt;record.id&#125;  </span></span><br><span class="line"><span class="regexp">                    pagination=&#123;&#123;</span></span><br><span class="line"><span class="regexp">                        position:['bottomRight'],</span></span><br><span class="line"><span class="regexp">                        total:this.state.total,</span></span><br><span class="line"><span class="regexp">                        hideOnSinglePage:true /</span><span class="regexp">/一页的时候不需要显示分页器</span></span><br><span class="line"><span class="regexp">                    &#125;&#125;</span></span><br><span class="line"><span class="regexp">                /</span>&gt;</span><br><span class="line">            &lt;<span class="regexp">/Card&gt;</span></span><br><span class="line"><span class="regexp">        )</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure></div>

<h2 id="八、阅读量那一列，低于230的显示红的，高于则显示绿色"><a href="#八、阅读量那一列，低于230的显示红的，高于则显示绿色" class="headerlink" title="八、阅读量那一列，低于230的显示红的，高于则显示绿色"></a>八、阅读量那一列，低于230的显示红的，高于则显示绿色</h2><p>将getData里，生成列参数的逻辑拿出来，通过item的不同return不同的 列参数</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line">createColumns = <span class="function"><span class="params">columnsKey</span> =&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> columns = columnsKey.map(<span class="function"><span class="params">item</span>=&gt;</span>&#123; <span class="comment">//colums=[&#123;title:"id",dataIndex:"id",key:"id"&#125;&#123;&#125;,&#123;&#125;]</span></span><br><span class="line">        <span class="comment">// 如果item是阅读量</span></span><br><span class="line">        <span class="keyword">if</span>(item===<span class="string">"amount"</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                title:titleDisplayMap[item],</span><br><span class="line">                <span class="comment">// Table的参数：当前行的值，当前行数据，行索引</span></span><br><span class="line">                render:<span class="function">(<span class="params">text,record,index</span>)=&gt;</span>&#123;</span><br><span class="line">                    <span class="keyword">let</span> &#123;amount&#125; = record;</span><br><span class="line">                    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">Tag</span> <span class="attr">color</span>=<span class="string">&#123;amount</span>&gt;</span>230?'green':'red'&#125;&gt;&#123;amount&#125;<span class="tag">&lt;/<span class="name">Tag</span>&gt;</span></span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果item是时间</span></span><br><span class="line">        <span class="keyword">if</span>(item===<span class="string">"currentAt"</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                title:titleDisplayMap[item],</span><br><span class="line">                render:<span class="function">(<span class="params">text,record,index</span>)=&gt;</span>&#123;   </span><br><span class="line">                    <span class="keyword">let</span> &#123;currentAt&#125; = record;</span><br><span class="line">                    <span class="comment">// 将时间变成正常格式</span></span><br><span class="line">                    <span class="keyword">return</span> moment(currentAt).format(<span class="string">"YYYY年MM月DD日 HH:mm:ss"</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            title: titleDisplayMap[item],    </span><br><span class="line">            dataIndex: item, </span><br><span class="line">            key: item,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// 添加删除编辑按钮</span></span><br><span class="line">    columns.push(&#123;</span><br><span class="line">        title:<span class="string">"操作"</span>,</span><br><span class="line">        key:<span class="string">"action"</span>,</span><br><span class="line">        render:<span class="function">(<span class="params">text,record,index</span>)=&gt;</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> (</span><br><span class="line">                &lt;ButtonGroup&gt;</span><br><span class="line">                    &lt;Button size=<span class="string">"small"</span> type=<span class="string">"primary"</span>&gt;编辑&lt;<span class="regexp">/Button&gt;</span></span><br><span class="line"><span class="regexp">                    &lt;Button size="small" type="danger"&gt;删除&lt;/</span>Button&gt;</span><br><span class="line">                &lt;<span class="regexp">/ButtonGroup&gt;</span></span><br><span class="line"><span class="regexp">            )</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">    &#125;)</span></span><br><span class="line"><span class="regexp">    return columns</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure></div>
<p>假如有这么一个需求，<br>总经理id001  技术经理id002  主管id003，每一项都要显示不同的颜色，<br>可以建立一个映射：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> titleMap = &#123;<span class="string">"001"</span>:<span class="string">"red"</span>,<span class="string">"002"</span>:<span class="string">"blue"</span>,<span class="string">"003"</span>:<span class="string">"yellow"</span>&#125;</span><br><span class="line"><span class="keyword">if</span>(item===id)</span><br><span class="line">&lt;Tag color=&#123;titleMap[item]&#125; /&gt;</span><br></pre></td></tr></table></figure></div>

<h2 id="九、分页请求"><a href="#九、分页请求" class="headerlink" title="九、分页请求"></a>九、分页请求</h2><p>①Table触发onChange:this.handleChange</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//点击每一页的时候触发</span></span><br><span class="line">handleChange = <span class="function">(<span class="params">page, pageSize</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">        limited:pageSize, <span class="comment">//代表每一页的数量</span></span><br><span class="line">        offset: pageSize * (page<span class="number">-1</span>) <span class="comment">//从哪一条开始显示</span></span><br><span class="line">    &#125;,()=&gt;&#123;</span><br><span class="line">        <span class="comment">//需要注意！必须要等到状态更改完之后才能重新发起异步请求</span></span><br><span class="line">        <span class="keyword">this</span>.getData()</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>②src/request/index.js<br>直接写在后面就表示添加在请求头了</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> getArticle = <span class="function">(<span class="params">offset,limited</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> service.post(<span class="string">"/api/v1/articleList"</span>,&#123;offset,limited&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>③渲染时的一些配置</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line">&lt;Table </span><br><span class="line">    dataSource=&#123;<span class="keyword">this</span>.state.dataSource&#125; </span><br><span class="line">    columns=&#123;<span class="keyword">this</span>.state.columns&#125; </span><br><span class="line">    rowKey=&#123;record=&gt;record.id&#125;  </span><br><span class="line">    pagination=&#123;&#123;</span><br><span class="line">        position:[<span class="string">'bottomRight'</span>],</span><br><span class="line">        total:<span class="keyword">this</span>.state.total,</span><br><span class="line">        hideOnSinglePage:<span class="literal">true</span>, <span class="comment">//一页的时候不需要显示分页器</span></span><br><span class="line">        showQuickJumper:<span class="literal">true</span>, <span class="comment">//可以跳转到某一页</span></span><br><span class="line">        pageSizeOptions:[<span class="string">"10"</span>,<span class="string">"15"</span>,<span class="string">"20"</span>,<span class="string">"25"</span>],<span class="comment">//可以指定每页显示多少条数据</span></span><br><span class="line">        onChange:<span class="keyword">this</span>.handleChange <span class="comment">//点击每一页的时候触发</span></span><br><span class="line">    &#125;&#125;</span><br><span class="line">    loading=&#123;<span class="keyword">this</span>.state.loading&#125;</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure></div>

<h2 id="十、中文化"><a href="#十、中文化" class="headerlink" title="十、中文化"></a>十、中文化</h2><p>src/index.js中</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> zhCN <span class="keyword">from</span> <span class="string">'antd/es/locale/zh_CN'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;ConfigProvider&#125; <span class="keyword">from</span> <span class="string">"antd"</span></span><br><span class="line">ReactDOM.render(</span><br><span class="line">  &lt;ConfigProvider locale=&#123;zhCN&#125;&gt;</span><br><span class="line">    &lt;Router&gt;</span><br><span class="line">      </span><br><span class="line">    &lt;<span class="regexp">/Router&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>ConfigProvider&gt;</span><br><span class="line">  ,</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">'root'</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure></div>

<h2 id="十一、删除"><a href="#十一、删除" class="headerlink" title="十一、删除"></a>十一、删除</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line">&lt;Modal</span><br><span class="line">    title=<span class="string">"警告！此操作不可逆"</span></span><br><span class="line">    visible=&#123;<span class="keyword">this</span>.state.isDeleteArticleModelShow&#125;</span><br><span class="line">    onCancel=&#123;<span class="keyword">this</span>.onCancel&#125;</span><br><span class="line">    confirmLoading=&#123;<span class="keyword">this</span>.state.deleteArticleLoding&#125;</span><br><span class="line">    onOk=&#123;<span class="keyword">this</span>.onOk&#125;</span><br><span class="line">    cancelText=<span class="string">"点错了，在看看"</span></span><br><span class="line">    okText=<span class="string">"拜拜~"</span></span><br><span class="line">    centered=&#123;<span class="literal">true</span>&#125;</span><br><span class="line">    maskClosable=&#123;<span class="literal">false</span>&#125;</span><br><span class="line">&gt;</span><br><span class="line">    &lt;&gt;确定要删除&lt;Text type=<span class="string">"danger"</span> <span class="keyword">delete</span>&gt;&#123;<span class="keyword">this</span>.state.deleteArticleTitle&#125;&lt;<span class="regexp">/Text&gt;文章吗？&lt;/</span>&gt;</span><br><span class="line">&lt;<span class="regexp">/Modal&gt;</span></span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>react</category>
      </categories>
  </entry>
  <entry>
    <title>redux</title>
    <url>/jackhuang-haohua.github.io/2019/08/28/2020-05-react-redux/</url>
    <content><![CDATA[<h2 id="一、安装"><a href="#一、安装" class="headerlink" title="一、安装"></a>一、安装</h2><p>　<code>yarn add redux -S</code></p>
<h2 id="二、基本使用"><a href="#二、基本使用" class="headerlink" title="二、基本使用"></a>二、基本使用</h2><h3 id="创建store"><a href="#创建store" class="headerlink" title="创建store"></a>创建store</h3><p>①创建store文件夹，新建index.js文件，创建仓库</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;createStore&#125; <span class="keyword">from</span> <span class="string">"redux"</span></span><br><span class="line"><span class="keyword">import</span> reducer <span class="keyword">from</span> <span class="string">"./reducer"</span></span><br><span class="line"><span class="comment">//可以通过createStore()创建一个store,参数需要接受reducer</span></span><br><span class="line"><span class="keyword">const</span> store = createStore(reducer)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store</span><br></pre></td></tr></table></figure></div>

<p>②新建state.js，放入数据，比如</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    todos:[</span><br><span class="line">        &#123;<span class="attr">id</span>:<span class="number">1</span>,<span class="attr">title</span>:<span class="string">"吃饭"</span>,<span class="attr">isFinished</span>:<span class="literal">true</span>&#125;,</span><br><span class="line">        &#123;<span class="attr">id</span>:<span class="number">2</span>,<span class="attr">title</span>:<span class="string">"睡觉"</span>,<span class="attr">isFinished</span>:<span class="literal">false</span>&#125;,</span><br><span class="line">        &#123;<span class="attr">id</span>:<span class="number">3</span>,<span class="attr">title</span>:<span class="string">"打豆豆"</span>,<span class="attr">isFinished</span>:<span class="literal">false</span>&#125;,</span><br><span class="line">    ],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>③新建actionCreators.js 和 reducer.js，后面要用到<br>④现在，组件中<code>import store from &quot;../store&quot;</code>，然后<code>store.getState().todos</code>即可拿到数据<br>⑤如果我们要更改store里的数据，vue里是通过mutation，react里当然也不能直接改，要经过一个“桥梁”；</p>
<h3 id="操作仓库里的数据"><a href="#操作仓库里的数据" class="headerlink" title="操作仓库里的数据"></a>操作仓库里的数据</h3><p>如下代码：<br>　①定义了List函数组件，定义了TodoContext类组件，并在类组件中渲染函数组件；<br>　②List中：这是一个函数式、无状态组件；有一个input和button，绑定了组件内部的方法，而内部方法又会触发外部actionCreators里的方法；<br>　③TodoContext中：通过<code>store.getState()</code>和<code>store.subscribe()</code>获得并订阅了store里的数据，数据一旦更新立马发布给本组件；<br><strong>todo.js组件中：</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">"../store"</span></span><br><span class="line"><span class="keyword">import</span> actionCreators <span class="keyword">from</span> <span class="string">"../store/actionCreators"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> List=<span class="function"><span class="params">props</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">// 触发 actionCreators 里面的 changeFinAction(id)</span></span><br><span class="line">    <span class="keyword">const</span> handleFin=<span class="function">(<span class="params">id,e</span>)=&gt;</span>&#123; </span><br><span class="line">        actionCreators.changeFinAction(id)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> handleDel=<span class="function">(<span class="params">id,e</span>)=&gt;</span>&#123; </span><br><span class="line">        actionCreators.changeDelAction(id)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>(</span><br><span class="line">        &lt;li key=&#123;props.item.id&#125;&gt;</span><br><span class="line">            &#123;<span class="comment">/* 触发handleFin，箭头式函数传参方法 */</span>&#125;</span><br><span class="line">            &lt;input type=<span class="string">"checkbox"</span> onChange=&#123;(e)=&gt;handleFin(props.item.id,e)&#125;&gt;<span class="xml"><span class="tag">&lt;/<span class="name">input</span>&gt;</span></span></span><br><span class="line">            &#123;props.item.title&#125;</span><br><span class="line">            &#123;<span class="comment">/* 点击时触发handleDel */</span>&#125;</span><br><span class="line">            &lt;button onClick=&#123;(e) =&gt; handleDel(props.item.id, e)&#125;&gt;删除&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>li&gt;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">TodoContext</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>()&#123;</span><br><span class="line">        <span class="keyword">super</span>()</span><br><span class="line">        <span class="keyword">this</span>.state=&#123;</span><br><span class="line">            todos:[]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    upDateTodos()&#123;</span><br><span class="line">        <span class="comment">// subscribe订阅一次后，仓库一有数据更新，就会重新发给订阅者</span></span><br><span class="line">        store.subscribe(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">                todos:store.getState().todos</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    componentDidMount()&#123;</span><br><span class="line">        <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">            todos:store.getState().todos</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">this</span>.upDateTodos()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    renderList()&#123;</span><br><span class="line">        <span class="keyword">let</span> &#123;todos&#125;=<span class="keyword">this</span>.state</span><br><span class="line">        <span class="keyword">return</span> todos.map(<span class="function"><span class="params">item</span>=&gt;</span>&#123;</span><br><span class="line">            <span class="keyword">return</span>(</span><br><span class="line">                &lt;List key=&#123;item.id&#125; item=&#123;item&#125;&gt;<span class="xml"><span class="tag">&lt;/<span class="name">List</span>&gt;</span></span></span><br><span class="line">            )</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="keyword">this</span>.renderList()</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>actionCreators.js中：</strong><br>组件里触发了方法，来到了这里；接着这里面又把<code>action</code>对象派发给reducer，携带了参数type和id</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">"./index"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123; <span class="comment">// actionCreators 是action的创建者，action一般是对象</span></span><br><span class="line">    changeFinAction(id)&#123;</span><br><span class="line">        <span class="keyword">let</span> action = &#123;</span><br><span class="line">            type:<span class="string">"changeFinAction"</span>,</span><br><span class="line">            id</span><br><span class="line">        &#125;</span><br><span class="line">        store.dispatch(action)</span><br><span class="line">    &#125;,</span><br><span class="line">    changeDelAction(id)&#123;</span><br><span class="line">        <span class="keyword">let</span> action = &#123;</span><br><span class="line">            type:<span class="string">"changeDelAction"</span>,</span><br><span class="line">            id</span><br><span class="line">        &#125;</span><br><span class="line">        store.dispatch(action)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>reducer.js中：</strong></p>
<ul>
<li>收到actionCreators里传过来的action，通过识别action.type来进行相应的操作；</li>
<li>reducer必须是一个<strong>纯函数</strong>；固定的输入必须要有固定的输出，内部函数不能有不纯粹的操作 Math.random()，new Date()</li>
<li>不能对之前的状态进行任何的更改，内部必须是同步的</li>
<li>redux思想：状态与视图是一一对应的</li>
<li>通过store.getState()其实就是获取到了reducer返回的内容</li>
<li>注意最下面的操作函数，使用<code>todos=todos.slice()</code>方法，因为reducer中不能更改之前的数据；<strong>如果</strong>更改的是之前的数据，数据的值变了，地址没变，组件那边就无法正常收到更新后的数据；而使用了数组的slice方法，相当于把数据地址+值都复制了出来，操作这个复制后的数据才行；<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> state <span class="keyword">from</span> <span class="string">"./state"</span></span><br><span class="line"><span class="keyword">const</span> reducer = <span class="function">(<span class="params">prevState = state,action</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> new_state=&#123;...prevState&#125;</span><br><span class="line">    <span class="keyword">switch</span>(action.type)&#123;</span><br><span class="line">        <span class="comment">// 默认的case</span></span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="comment">// 如果发过来的 action.type 是这个，则触发 handler.changeFin()，修改prevState里的数据</span></span><br><span class="line">        <span class="keyword">case</span> <span class="string">"changeFinAction"</span>:</span><br><span class="line">            handler.changeFin(new_state.todos,action.id)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"changeDelAction"</span>:</span><br><span class="line">            <span class="comment">// 给仓库的数组重新赋值</span></span><br><span class="line">            new_state.todos=handler.changeDel(new_state.todos,action.id)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> new_state   <span class="comment">//通过store.getState()其实就是获取到了reducer返回的内容</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> reducer</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取id</span></span><br><span class="line"><span class="keyword">const</span> handler=&#123;</span><br><span class="line">    changeFin(todos,id)&#123;</span><br><span class="line">        todos=todos.slice();</span><br><span class="line">        todos.map(<span class="function"><span class="params">item</span>=&gt;</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(item.id===id*<span class="number">1</span>)&#123;</span><br><span class="line">                item.isFinished=!item.isFinished</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">''</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 执行这个函数得到过滤后的数组</span></span><br><span class="line">    changeDel(todos,id)&#123;        </span><br><span class="line">        todos=todos.slice()</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            todos=todos.filter(<span class="function"><span class="params">item</span>=&gt;</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> item.id!==id</span><br><span class="line">            &#125;)</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

</li>
</ul>
<h2 id="优化actionType"><a href="#优化actionType" class="headerlink" title="优化actionType"></a>优化actionType</h2><p>之前的type是这样的<code>type:&quot;changeFinAction&quot;</code>，字符串的形式，不利于管理，可以把type抽离出来；<br>reducer.js中也要把<code>case &quot;changeFinAction&quot;</code>改成<code>case ADD_TODO</code>；<br><strong>新建actionType.js：</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> ADD_TODO = <span class="string">"ADD_NEW_TODO"</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> CHANGE_FIN = <span class="string">"CHANGE_FIN"</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> DEL_TODO = <span class="string">"DEL_TODO"</span></span><br></pre></td></tr></table></figure></div>

<p><strong>actionCreators中：</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">"../index"</span></span><br><span class="line"><span class="keyword">import</span> &#123;ADD_TODO,CHANGE_FIN,DEL_TODO&#125;  <span class="keyword">from</span> <span class="string">"./actionType"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    addNewTodo(title)&#123;</span><br><span class="line">        <span class="keyword">let</span> action = &#123;</span><br><span class="line">            type:ADD_TODO,</span><br><span class="line">            title</span><br><span class="line">        &#125;</span><br><span class="line">        store.dispatch(action)</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="子仓库"><a href="#子仓库" class="headerlink" title="子仓库"></a>子仓库</h2><p>上面只建立了一个总仓库，各组件的状态各自管，所以还要建立子仓库；</p>
<p><strong>之前的store文件夹：</strong></p>
<ul>
<li>index：引入reducer，创建store，导出store</li>
<li>reducer：引入action，引入state，更改数据并导出</li>
<li>actionCreators：组件更改数据的中间人</li>
<li>actionType：配合actionCreators</li>
<li>state：数据</li>
</ul>
<p><strong>之后的store文件夹</strong></p>
<ul>
<li>index：引入reducer，创建store，导出store</li>
<li>reducer：通过combineReducers整合子仓库的reducer</li>
<li>todolist文件夹：<ul>
<li>reducer：引入action，引入state，更改数据并导出</li>
<li>actionCreators：组件更改数据的中间人</li>
<li>actionType：配合actionCreators</li>
<li>state：数据</li>
</ul>
</li>
</ul>
<p>可以看到，把reducer、actionCreators、actionType、state分了出来</p>
<p><strong>汇总</strong><br>既然分了出来，我们就需要在store/reducer里汇总；</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;combineReducers&#125; <span class="keyword">from</span> <span class="string">"redux"</span></span><br><span class="line"><span class="keyword">import</span> todolist <span class="keyword">from</span> <span class="string">"./todolist/reducer"</span></span><br><span class="line"><span class="keyword">const</span> reducer = combineReducers(&#123;</span><br><span class="line">    todolist</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> reducer</span><br></pre></td></tr></table></figure></div>

<p><strong>使用</strong><br>相应的，组件中引入actionCreators时也要多加一个；</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> actionCreators <span class="keyword">from</span> <span class="string">"../store/todolist/actionCreators"</span></span><br><span class="line"><span class="comment">// 获取数据</span></span><br><span class="line">todos:store.getState().todolist.todos</span><br></pre></td></tr></table></figure></div>

<p>这篇文章知识初步使用，后面还有很多优化，明天再写吧…</p>
]]></content>
      <categories>
        <category>react</category>
      </categories>
  </entry>
  <entry>
    <title>react生命周期</title>
    <url>/jackhuang-haohua.github.io/2019/08/20/2020-05-react-%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</url>
    <content><![CDATA[<p>按照顺序介绍用途，关于版本变迁、底层原理之类的就不介绍了</p>
<h2 id="一、挂载阶段"><a href="#一、挂载阶段" class="headerlink" title="一、挂载阶段"></a>一、挂载阶段</h2><h3 id="constructor-NaN"><a href="#constructor-NaN" class="headerlink" title="constructor"></a>constructor</h3><p>　完成数据的初始化；<br>　可以在这里三两件事：</p>
<ul>
<li>定义数据，如<code>this.state={}</code></li>
<li>接收数据，props和context，必须放在super()之后，super是继承相关，后面的文章再讲</li>
<li>绑定事件函数的this，<code>this.handleChange = this.handleChange.bind(this)</code>，是函数的this指向本组件实例</li>
</ul>
<h3 id="static-getDerivedStateFromProps"><a href="#static-getDerivedStateFromProps" class="headerlink" title="static getDerivedStateFromProps"></a>static getDerivedStateFromProps</h3><p>　在挂载和更新阶段都会调用；<br>　名字翻译过来是接收参数，可以代替之前的<code>componentWillReceiveProps</code>；<br>　接收两个参数<code>(nextProps, prevState)</code>，即比较旧的state和新的props，可以用作派生状态；</p>
<h4 id="派生状态"><a href="#派生状态" class="headerlink" title="派生状态"></a>派生状态</h4><p>　子组件的某个数据来自父组件，并且会随父组件的数据改变，这个数据就是派生状态；类似于vue的computed，一个数据随另一个数据改变：<br>　<strong>父组件中定义了n和改变n的方法：</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> Counter <span class="keyword">from</span> <span class="string">'./counter'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">index</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>()&#123;</span><br><span class="line">        <span class="keyword">super</span>()</span><br><span class="line">        <span class="keyword">this</span>.state=&#123;</span><br><span class="line">            n:<span class="number">1</span></span><br><span class="line">        &#125;        </span><br><span class="line">    &#125;</span><br><span class="line">    add=<span class="function"><span class="params">e</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">            n:<span class="keyword">this</span>.state.n+<span class="number">1</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;li&gt;父组件的值==&gt;&#123;<span class="keyword">this</span>.state.n&#125;&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">                &lt;Counter n=&#123;this.state.n&#125;&gt;&lt;/</span>Counter&gt;</span><br><span class="line">                &lt;button onClick=&#123;<span class="keyword">this</span>.add&#125;&gt;改变父组件的值&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>div&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>　<strong>子组件接收父组件的n并派生出a：</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">counter</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(props)&#123;</span><br><span class="line">        <span class="keyword">super</span>(props)</span><br><span class="line">        <span class="keyword">this</span>.state=&#123;</span><br><span class="line">            a:props.n,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> getDerivedStateFromProps(props,state)&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            a:props.n,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">let</span> &#123;a&#125;=<span class="keyword">this</span>.state</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;li&gt;子组件的值==&gt;&#123;a&#125;&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>div&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>　如果没有getDerivedStateFromProps的话，子组件中的a永远是1，因为constructor只会执行一次，接收一次props后就不会更改了；<br>　但getDerivedStateFromProps每一次更新都会执行，重新赋值；</p>
<p>　此时，子组件的a===父组件的n，并且同时改变；<br>　但是现实需求肯定不会是全等，如果我们想得到父组件n的两倍，或者其他运算结果该怎么办呢？因为react提倡自己的状态自己管理，直接操作<code>props.n</code>是不妥当的，我们需要加一个判断：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">constructor</span>(props)&#123;</span><br><span class="line">  <span class="keyword">super</span>(props)</span><br><span class="line">  <span class="keyword">this</span>.state=&#123;</span><br><span class="line">      a:props.n,</span><br><span class="line">      preProps:props</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">static</span> getDerivedStateFromProps(props,state)&#123;</span><br><span class="line">  <span class="keyword">const</span> preProps = state.preProps</span><br><span class="line">  <span class="keyword">const</span> controlledValue = preProps.n !== props.n ? props.n : state.a</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    preProps:props,</span><br><span class="line">    a:controlledValue+<span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>　此时，子组件的值永远比父组件大1，我们的目的就实现了；<br>　跟<code>componentWillReceiveProps</code>类似，比较前后的props，再赋值。<br>　<strong>注意：</strong>子组件中任何一个自定义方法执行，都会触发<code>getDerivedStateFromProps</code></p>
<h3 id="render"><a href="#render" class="headerlink" title="render"></a>render</h3><p>在这个生命周期函数里执行渲染操作，主要有以下类型：</p>
<ul>
<li>原生的DOM，如div</li>
<li>React组件</li>
<li>Fragment（片段）</li>
<li>Portals（插槽）</li>
<li>字符串和数字，被渲染成text节点</li>
<li>Boolean和null，不会渲染任何东西</li>
</ul>
<h3 id="componentDidMount"><a href="#componentDidMount" class="headerlink" title="componentDidMount"></a>componentDidMount</h3><p>　一个阶段只执行一次，主要用来执行异步操作，比如<strong>请求数据</strong>，定义canvas，svg，定时器，实例化等操作；<br>　在这里请求数据和挂载节点同时进行，应该是不能获取节点的；虽然之前实验好像可以获取某些节点，但是最好别在这里这么做；<br>　比如swiper的实例化，就不能在这里进行，因为节点还没加载完毕；<br>　有时候在这进行了异步操作，发现数据/视图没变，可以试下<code>强制更新</code>：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line">componentDidMount()&#123;</span><br><span class="line">  <span class="comment">//将一个既不是属性也不是状态的数据更改</span></span><br><span class="line">  <span class="keyword">this</span>.b = <span class="number">10000000</span></span><br><span class="line">  <span class="keyword">this</span>.forceUpdate() <span class="comment">//强制更新</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="二、更新阶段"><a href="#二、更新阶段" class="headerlink" title="二、更新阶段"></a>二、更新阶段</h2><p>经过console.log的实验，更新阶段会在以下三种情况触发：props改变、setState()、forceUpdate</p>
<h3 id="static-getDerivedStateFromProps-1"><a href="#static-getDerivedStateFromProps-1" class="headerlink" title="static getDerivedStateFromProps"></a>static getDerivedStateFromProps</h3><p>　前面已经写过了</p>
<h3 id="shouldComponentUpdate"><a href="#shouldComponentUpdate" class="headerlink" title="shouldComponentUpdate"></a>shouldComponentUpdate</h3><ul>
<li>询问组件是否进行更新操作，默认返回true，代表组件要render更新了</li>
<li>有两个参数nextProps和nextState，表示新的属性和变化之后的state</li>
<li>注意当我们调用forceUpdate并不会触发此方法</li>
</ul>
<h3 id="render-1"><a href="#render-1" class="headerlink" title="render"></a>render</h3><p>　前面也写过了</p>
<h3 id="getSnapshotBeforeUpdate"><a href="#getSnapshotBeforeUpdate" class="headerlink" title="getSnapshotBeforeUpdate"></a>getSnapshotBeforeUpdate</h3><ul>
<li>代替componentWillUpdate，</li>
<li>这个方法在初步render之后，componentDidUpdate之前调用，</li>
<li>有两个参数prevProps和prevState，表示之前的属性和之前的state，</li>
<li>这个函数有一个返回值，会作为第三个参数传给componentDidUpdate，如果你不想要返回值，请返回null，不写的话控制台会有警告</li>
<li>作用是读取当前某个DOM节点的状态，并在进行相应的处理；此DOM可以与 componentDidUpdate 中的一致</li>
</ul>
<h3 id="componentDidUpdate"><a href="#componentDidUpdate" class="headerlink" title="componentDidUpdate"></a>componentDidUpdate</h3><ul>
<li>真实dom已经挂载完，该方法在getSnapshotBeforeUpdate方法之后被调用，</li>
<li>有三个参数prevProps，prevState，snapshot，分别表示之前的props，之前的state，和snapshot。第三个参数是getSnapshotBeforeUpdate返回的</li>
<li>在这个函数里我们可以操作DOM，拿到上面的三个参数，和发起服务器请求，还可以setState，但是注意一定要用if语句控制，否则会导致无限循环</li>
</ul>
<h2 id="三、卸载阶段"><a href="#三、卸载阶段" class="headerlink" title="三、卸载阶段"></a>三、卸载阶段</h2><h3 id="ComponentWillUnmount"><a href="#ComponentWillUnmount" class="headerlink" title="ComponentWillUnmount"></a>ComponentWillUnmount</h3><p>相当于vue的destroy，在这里清除定时器等等</p>
<h2 id="四、一些即将废弃的"><a href="#四、一些即将废弃的" class="headerlink" title="四、一些即将废弃的"></a>四、一些即将废弃的</h2><ul>
<li><del>componentWillMount</del></li>
<li><del>componentWillReceiveProps</del></li>
<li><del>componentWillUpdate</del></li>
</ul>
]]></content>
      <categories>
        <category>react</category>
      </categories>
  </entry>
  <entry>
    <title>redux优化</title>
    <url>/jackhuang-haohua.github.io/2019/08/30/2020-05-react-redux2/</url>
    <content><![CDATA[<p>在上一篇文章，完成了这么一个仓库：</p>
<ul>
<li>index：引入reducer，创建store，导出store</li>
<li>reducer：通过combineReducers整合子仓库的reducer</li>
<li>todolist文件夹：<ul>
<li>reducer：引入action，引入state，更改数据并导出</li>
<li>actionCreators：组件更改数据的中间人</li>
<li>actionType：配合actionCreators</li>
<li>state：数据</li>
</ul>
</li>
</ul>
<p>接下来我们进行一些优化。</p>
<h2 id="一、使用react-redux"><a href="#一、使用react-redux" class="headerlink" title="一、使用react-redux"></a>一、使用react-redux</h2><p>　这次我们使用react-redux插件，<code>yarn add react-redux -S</code></p>
<h3 id="第一步：通过Provider传仓库数据"><a href="#第一步：通过Provider传仓库数据" class="headerlink" title="第一步：通过Provider传仓库数据"></a>第一步：通过Provider传仓库数据</h3><p>　在总入口文件，index.js中：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">'react-dom'</span>;</span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App'</span>;</span><br><span class="line"><span class="comment">// 1.引入仓库store</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">"./store"</span></span><br><span class="line"><span class="comment">// 2.引入插件，并取出Provider</span></span><br><span class="line"><span class="keyword">import</span> &#123;Provider&#125; <span class="keyword">from</span> <span class="string">"react-redux"</span></span><br><span class="line">ReactDOM.render(</span><br><span class="line">  <span class="comment">// 3.将根元素用Provider包裹起来，同时传值仓库</span></span><br><span class="line">  <span class="comment">// &lt;App/&gt;就是provider，并且所有子元素都可以获得仓库里的数据，底层原理是context</span></span><br><span class="line">  &lt;Provider store=&#123;store&#125;&gt;</span><br><span class="line">    &lt;App /&gt; </span><br><span class="line">  &lt;<span class="regexp">/Provider&gt;</span></span><br><span class="line"><span class="regexp">  ,</span></span><br><span class="line"><span class="regexp">  document.getElementById('root')</span></span><br><span class="line"><span class="regexp">)</span></span><br></pre></td></tr></table></figure></div>

<h3 id="第二步：在组件中使用connect，并配置两个参数"><a href="#第二步：在组件中使用connect，并配置两个参数" class="headerlink" title="第二步：在组件中使用connect，并配置两个参数"></a>第二步：在组件中使用connect，并配置两个参数</h3><p>　connect() 是一个HOC高阶组件，本质上就是一个函数，可以接收一个组件，最终返回一个新的组件，connect(参数)(UI组件)=&gt;返回一个容器组件，再把这个容器组件导出去渲染，<br>　如下代码，相当于给TodoContext组件的props上添加了state和action，不用单独引入了；<br>　同样是在todo.js组件中：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> ... from ...</span><br><span class="line"><span class="comment">// connect有两个参数</span></span><br><span class="line"><span class="comment">// 1.第一个参数即取得todolist里的state，这个todolist是由总仓库reducer里决定的</span></span><br><span class="line"><span class="keyword">const</span> mapStateToProps=<span class="function"><span class="params">state</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> state.todolist</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.第二个参数即取得todolist里的actions</span></span><br><span class="line"><span class="keyword">const</span> mapDispatch = actionCreators</span><br><span class="line"><span class="comment">// 取得单个action</span></span><br><span class="line"><span class="keyword">const</span> mapDispatchToprops = <span class="function"><span class="params">dispatch</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        addNewTodo:<span class="function"><span class="params">title</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> action = actionCreators.addNewTodo(title)</span><br><span class="line">            dispatch(action)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.把两个参数挂载在props上，props上就有了state和actions</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> connect(mapStateToProps,mapDispatchToprops)(TodoContext)</span><br></pre></td></tr></table></figure></div>
<p>把action和state挂载props上后，使用也更方便了：<code>let {todos}=this.props</code>即可即可得到state里的todos数据；<br>但是发现一个问题：数据改变了，视图没有变：<br><img src="https://s1.ax1x.com/2020/05/06/YEcm6O.png" alt="YEcm6O.png"></p>
<h3 id="第三步：优化reducer"><a href="#第三步：优化reducer" class="headerlink" title="第三步：优化reducer"></a>第三步：优化reducer</h3><p>　利用this.props里的acitons操作state数据后，componentWillReceiveProps钩子没有打印，说明容器组件没有把最新的属性传递给子组件。<br>　原因：redux内部判别是否派发新状态，会将原状态的内存地址与新状态的内存地址的比较，我们直接对state的数据存值或者push，数据地址不变，就不会派发新数据。<br>　解决：复制一份数据，操作复制出来的数据，再return这个数据：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> todolist = <span class="function">(<span class="params">prevState = state,action</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> new_state=&#123;...prevState&#125;</span><br><span class="line">    <span class="keyword">switch</span>(action.type)&#123;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">case</span> ADD_TODO:</span><br><span class="line">            <span class="comment">// 拷贝</span></span><br><span class="line">            new_state.todos = new_state.todos.slice()</span><br><span class="line">            new_state.todos.push(...)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> new_state</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> todolist</span><br></pre></td></tr></table></figure></div>

<h3 id="第四步：优化actions"><a href="#第四步：优化actions" class="headerlink" title="第四步：优化actions"></a>第四步：优化actions</h3><p>　之前是<code>store.dispatch(action)</code>，现在要改成<code>return action</code></p>
<h2 id="二、使用react-thunk"><a href="#二、使用react-thunk" class="headerlink" title="二、使用react-thunk"></a>二、使用react-thunk</h2><p>　我们在redux的actionCreators里面只能做一些同步操作，但如果后续有异步请求，例如ajax操作就无法现实；<br>　可以通过redux的一些中间件帮助我们实现异步操作，例如<code>redux-thunk</code>、<code>redux-saga</code>、<code>redux-promise</code>等；</p>
<blockquote>
<p>中间件，即在中间的步骤插入另一些步骤，这里为actionCreators到达reducer中间的过程，<br>　原理：</p>
</blockquote>
<ul>
<li>redux-thunk会根据actionCreators的return的类型来判断；</li>
<li>如果return对象，内部就会自动派发action给reducer(同步)；</li>
<li>如果return函数，内部就可以提供一个参数dispatch，你可以自己在合适的时候发送</li>
<li>原来：actionCreators=&gt;自动调用dispatch(action)=&gt;reducer返回新状态给store=&gt;派发给react</li>
<li>现在：actionCreators=&gt;middleware处理=&gt;在合适的时候，手动调用dispatch(action)=&gt;reducer=&gt;返回新状态给store=&gt;react</li>
</ul>
<p><strong>使用react-thunk</strong><br>①<code>yarn add redux-thunk</code><br>②store/index.js中，更改createStore()：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;createStore,applyMiddleware&#125; <span class="keyword">from</span> <span class="string">"redux"</span></span><br><span class="line"><span class="keyword">import</span> thunk <span class="keyword">from</span> <span class="string">"redux-thunk"</span></span><br><span class="line"><span class="keyword">import</span> reducer <span class="keyword">from</span> <span class="string">"./reducer"</span></span><br><span class="line"><span class="comment">// 通过createStore()创建一个store</span></span><br><span class="line"><span class="comment">// 第一个参数是合并的reducer，第二个参数是使用中间件</span></span><br><span class="line"><span class="keyword">const</span> store = createStore(reducer,applyMiddleware(thunk))</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store</span><br></pre></td></tr></table></figure></div>
<p>③actionCreators.js中：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;CHANGE_INPUT,CLICK_DENGYU&#125;  <span class="keyword">from</span> <span class="string">"./actionType"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="comment">// 原来的result</span></span><br><span class="line">    <span class="comment">// result(value)&#123;</span></span><br><span class="line">    <span class="comment">//     let action = &#123;</span></span><br><span class="line">    <span class="comment">//         type:CLICK_DENGYU,</span></span><br><span class="line">    <span class="comment">//         value</span></span><br><span class="line">    <span class="comment">//     &#125;</span></span><br><span class="line">    <span class="comment">//     return action</span></span><br><span class="line">    <span class="comment">// &#125;,</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 后来的result</span></span><br><span class="line">    result(value)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="params">dispatch</span>=&gt;</span>&#123;</span><br><span class="line">            <span class="comment">// 可以在这里做异步请求，请求完后dispatch</span></span><br><span class="line">            setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">                <span class="keyword">let</span> action = &#123;</span><br><span class="line">                    type:CLICK_DENGYU,</span><br><span class="line">                    value</span><br><span class="line">                &#125;</span><br><span class="line">                dispatch(action)</span><br><span class="line">            &#125;,<span class="number">1000</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>react</category>
      </categories>
  </entry>
  <entry>
    <title>使用uni-app</title>
    <url>/jackhuang-haohua.github.io/2019/11/27/2020-05-uniapp%E5%BE%AE%E4%BF%A1/</url>
    <content><![CDATA[<h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><p>uni-app中就是vue语法。</p>
<h2 id="UI组件库"><a href="#UI组件库" class="headerlink" title="UI组件库"></a>UI组件库</h2><p>推荐uni-ui组件库，在创建项目的时候勾选”ui组件库”即可；<br>当然引入vant，element等库也是可以的；<br>使用库的时候再看文档就行了，<a href="https://github.com/dcloudio/uni-ui" target="_blank">uni-ui官网</a></p>
<h2 id="使用vuex"><a href="#使用vuex" class="headerlink" title="使用vuex"></a>使用vuex</h2><p>项目中如果使用vuex的话：<br><strong>store/index.js：</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">import Vue from &#39;vue&#39;</span><br><span class="line">import Vuex from &#39;vuex&#39;</span><br><span class="line">Vue.use(Vuex)</span><br><span class="line">const store &#x3D; new Vuex.Store(&#123;</span><br><span class="line">    state: &#123;&#125;,</span><br><span class="line">    mutations: &#123;&#125;,</span><br><span class="line">    actions: &#123;&#125;</span><br><span class="line">&#125;)</span><br><span class="line">export default store</span><br></pre></td></tr></table></figure></div>

<h2 id="使用插件"><a href="#使用插件" class="headerlink" title="使用插件"></a>使用插件</h2><p>sass/格式检验一类：工具 -&gt; 插件安装<br>node/微信开发工具一类：工具 -&gt; 设置<br>比如设置node的路径：<br>1.npm路径：<code>E:/study/blog/node.js/npm.cmd</code><br>2.node路径:<code>E:/study/blog/node.js/node.exe</code></p>
<p><strong>main.js文件：</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">import Vue from &#39;vue&#39;</span><br><span class="line">import App from &#39;.&#x2F;App&#39;</span><br><span class="line">&#x2F;&#x2F;引入vuex</span><br><span class="line">import store from &#39;.&#x2F;store&#39;</span><br><span class="line">&#x2F;&#x2F;把vuex定义成全局组件</span><br><span class="line">Vue.prototype.$store &#x3D; store</span><br><span class="line"></span><br><span class="line">Vue.config.productionTip &#x3D; false</span><br><span class="line">App.mpType &#x3D; &#39;app&#39;</span><br><span class="line">const app &#x3D; new Vue(&#123;</span><br><span class="line">    ...App,</span><br><span class="line">	 store</span><br><span class="line">&#125;)</span><br><span class="line">app.$mount()</span><br></pre></td></tr></table></figure></div>

<p><strong>index/index.vue：</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">onLoad() &#123;</span><br><span class="line">	console.log(this.$store)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="使用uni开发微信小程序"><a href="#使用uni开发微信小程序" class="headerlink" title="使用uni开发微信小程序"></a>使用uni开发微信小程序</h2><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p>因为之前是搞得微信开发者工具，这里为了熟悉uni就先把之前的demo项目迁移到uni；uni和微信的配置文件都差不多，但是很多都改了个名字，所以要先搞清楚对应哪些文件：</p>
<table>
<thead>
<tr>
<th align="left">uni项目目录或者文件</th>
<th>属性</th>
<th>对应原生小程序文件</th>
</tr>
</thead>
<tbody><tr>
<td align="left">App.vue</td>
<td></td>
<td>app.wxss \ app.js</td>
</tr>
<tr>
<td align="left">manifest.json(打包配置文件）</td>
<td></td>
<td></td>
</tr>
<tr>
<td align="left">pages/index/index.vue</td>
<td></td>
<td>pages/index/index.wxss|wxml|js</td>
</tr>
<tr>
<td align="left">static(静态资源  video/images/字体)</td>
<td></td>
<td></td>
</tr>
<tr>
<td align="left">uni.scss(全局样式变量)</td>
<td>需要插件安装sass</td>
<td></td>
</tr>
<tr>
<td align="left">main.js(Vue初始化入口文件)</td>
<td></td>
<td></td>
</tr>
<tr>
<td align="left">pages.json(配置页面路由、导航条、选项卡等页面类信息)</td>
<td>globalStyle</td>
<td>app.json各项</td>
</tr>
<tr>
<td align="left">pages.json</td>
<td>pages下的style</td>
<td>对应着每个页面.json文件</td>
</tr>
</tbody></table>
<h3 id="初始化云开发"><a href="#初始化云开发" class="headerlink" title="初始化云开发"></a>初始化云开发</h3><p>在uni在App.vue的onLaunch中，小程序在app.js的onLaunch，<br>如果申请了uni的腾讯云/阿里云，可以直接用<code>unicloud.init()</code>，当然直接<code>wx.cloud</code>也是可以的</p>
<h3 id="对应的文件"><a href="#对应的文件" class="headerlink" title="对应的文件"></a>对应的文件</h3><p>在微信开发者工具中，页面文件是这样的：</p>
<ul>
<li>board文件夹<ul>
<li>board.js</li>
<li>board.json</li>
<li>board.wxml</li>
<li>board.wxss</li>
</ul>
</li>
</ul>
<p>在uni中，页面是vue文件的形式，<br>board.vue：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">	&lt;view&gt;&lt;&#x2F;view&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">	export default &#123;</span><br><span class="line">		data() &#123;</span><br><span class="line">			return &#123;</span><br><span class="line"></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;,</span><br><span class="line">		methods: &#123;</span><br><span class="line">			</span><br><span class="line">		&#125;,</span><br><span class="line">	&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure></div>

<p>需要对应的更改：</p>
<ul>
<li>board文件夹<ul>
<li>board.js -&gt; board.vue/script</li>
<li>board.json -&gt; pages.json</li>
<li>board.wxml -&gt; board.vue/style</li>
<li>board.wxss -&gt; board.vue/template</li>
</ul>
</li>
</ul>
<h3 id="API的更改"><a href="#API的更改" class="headerlink" title="API的更改"></a>API的更改</h3><p>之前的wx.xxx有些要改成uni.xxx，注意有些不用改</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">var app &#x3D; getApp(); </span><br><span class="line">const db &#x3D; wx.cloud.database() </span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;根据数据库集合查询数据</span><br><span class="line">&#x2F;&#x2F;collectionName：集合名字</span><br><span class="line">&#x2F;&#x2F;id  电影的唯一id</span><br><span class="line">&#x2F;&#x2F;q   电影的名字</span><br><span class="line">export default (&#123;</span><br><span class="line">  collectionName,id&#x3D;null,data&#x3D;&#123;start:0,count:20,q:null&#125;,method&#x3D;&#39;get&#39;,loadingTop,loadingCenter </span><br><span class="line">&#125;)&#x3D;&gt;&#123;</span><br><span class="line">  </span><br><span class="line">  return new Promise((resolve,reject)&#x3D;&gt;&#123;</span><br><span class="line">    &#x2F;&#x2F;显示loading</span><br><span class="line">    if(loadingTop)&#123;</span><br><span class="line">      uni.showNavigationBarLoading()</span><br><span class="line">      uni.setNavigationBarTitle(&#123;</span><br><span class="line">        title: &#39;加载中...&#39;,</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    if(loadingCenter)&#123;</span><br><span class="line">      uni.showLoading(&#123;</span><br><span class="line">        title: &#39;加载中...&#39;,</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;查询条件  id  q进行查询</span><br><span class="line">    let where &#x3D; &#123;&#125;</span><br><span class="line">    let title &#x3D; &#123;</span><br><span class="line">      $regex:&#39;.*&#39;+data.q, &#x2F;&#x2F;包含data.q就可以</span><br><span class="line">      $options:&#39;i&#39;        &#x2F;&#x2F;忽略大小写</span><br><span class="line">    &#125;</span><br><span class="line">    where &#x3D; id ? &#123;...where,id&#125; : where </span><br><span class="line">    where &#x3D; data.q ? &#123;...where,title&#125; : where</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F;根据集合查询对应的数据</span><br><span class="line">    db.collection(collectionName)</span><br><span class="line">      .where(where)  &#x2F;&#x2F;查询条件 </span><br><span class="line">      .skip(data.start * data.count)  &#x2F;&#x2F; 0 * 20</span><br><span class="line">      .limit(data.count)              &#x2F;&#x2F; 20 </span><br><span class="line">      .get(</span><br><span class="line">        &#123;</span><br><span class="line">          success(res) &#123;</span><br><span class="line">            resolve(res)</span><br><span class="line">          &#125;,</span><br><span class="line">          fail(err)&#123;</span><br><span class="line">            reject(err)</span><br><span class="line">          &#125;,</span><br><span class="line">          complete()&#123;</span><br><span class="line">            if(loadingTop) uni.hideNavigationBarLoading()</span><br><span class="line">            if(loadingCenter) uni.hideLoading()</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      )</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="注册组件"><a href="#注册组件" class="headerlink" title="注册组件"></a>注册组件</h3><p>名为components文件夹下的所有组件都会自动注册，uni内部使用了easycom</p>
<ol>
<li>新建uni-pro/components文件夹，</li>
<li>右键新建组件，比如products</li>
<li>勾选创建同名目录，</li>
<li>其他组件中直接<code>&lt;products /&gt;</code>就能使用了，免去了引入和注册的步骤</li>
</ol>
]]></content>
      <categories>
        <category>uniApp</category>
      </categories>
  </entry>
  <entry>
    <title>了解uni-app</title>
    <url>/jackhuang-haohua.github.io/2019/11/25/2020-05-uniapp%E7%AE%80%E4%BB%8B/</url>
    <content><![CDATA[<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>　在uni-app的官网，推荐了两种上手方式，HBuilderX和vue-cli；<br>　基本上都是用的第一种方式，<a href="https://www.dcloud.io/hbuilderx.html" target="_blank">官网下载</a>HBuilder开发版即可<br>　可视化的方式比较简单，HBuilderX内置相关环境，开箱即用，无需配置nodejs。HBuilderX是通用的前端开发工具，但为<code>uni-app</code>做了特别强化。<br>　如下载标准版，在运行或发行<code>uni-app</code>时，会提示安装<code>uni-app</code>插件，插件下载完成后方可使用。<br>　如使用<code>cli</code>方式创建项目，可直接下载标准版，因为uni-app编译插件被安装到项目下了。<br>　uni-app自带的模板有 Hello uni-app ，是官方的组件和API示例。还有一个重要模板是 uni ui项目模板，日常开发推荐使用该模板，已内置大量常用组件。</p>
<p>##　新建项目<br>　记得要把”uni-ui项目”勾选上，然后等待即可</p>
<h2 id="运行项目"><a href="#运行项目" class="headerlink" title="运行项目"></a>运行项目</h2><ol>
<li><p>浏览器运行：进入hello-uniapp项目，点击工具栏的运行 -&gt; 运行到浏览器 -&gt; 选择浏览器，即可在浏览器里面体验uni-app 的 H5 版。</p>
<p><img src="https://img-cdn-qiniu.dcloud.net.cn/uniapp/doc/run-chrome.png" alt="img"></p>
</li>
<li><p>真机运行：连接手机，开启USB调试，进入hello-uniapp项目，点击工具栏的运行 -&gt; 真机运行 -&gt; 选择运行的设备，即可在该设备里面体验uni-app。</p>
<p><img src="https://img-cdn-qiniu.dcloud.net.cn/uniapp/doc/run-phone.png" alt="img"></p>
<p>如手机无法识别，请点击菜单运行-运行到手机或模拟器-真机运行常见故障排查指南。 注意目前开发App也需要安装微信开发者工具。</p>
</li>
<li><p>在微信开发者工具里运行：进入hello-uniapp项目，点击工具栏的运行 -&gt; 运行到小程序模拟器 -&gt; 微信开发者工具，即可在微信开发者工具里面体验uni-app。 </p>
<p><img src="https://img-cdn-qiniu.dcloud.net.cn/uniapp/doc/uni20190222-1.png" alt="img"></p>
<p><strong>注意：</strong>如果是第一次使用，需要先配置小程序ide的相关路径，才能运行成功。如下图，需在输入框输入微信开发者工具的安装路径。 若HBuilderX不能正常启动微信开发者工具，需要开发者手动启动，然后将uni-app生成小程序工程的路径拷贝到微信开发者工具里面，在HBuilderX里面开发，在微信开发者工具里面就可看到实时的效果。</p>
<p>uni-app默认把项目编译到根目录的unpackage目录。 </p>
<p><img src="https://img-cdn-qiniu.dcloud.net.cn/uniapp/doc/weixin-setting.png" alt="img"></p>
<p> <strong>注意： 微信开发者工具=》安全设置=》服务端口开启</strong></p>
</li>
<li><p>在支付宝小程序开发者工具里运行：进入hello-uniapp项目，点击工具栏的运行 -&gt; 运行到小程序模拟器 -&gt; 支付宝小程序开发者工具，即可在支付宝小程序开发者工具里面体验uni-app。 </p>
<p><img src="https://img-cdn-qiniu.dcloud.net.cn/uniapp/doc/uni20190222-3.png" alt="img"></p>
</li>
<li><p>在百度开发者工具里运行：进入hello-uniapp项目，点击工具栏的运行 -&gt; 运行到小程序模拟器 -&gt; 百度开发者工具，即可在百度开发者工具里面体验uni-app。 </p>
<p><img src="https://img-cdn-qiniu.dcloud.net.cn/uniapp/doc/uni20190222-2.png" alt="img"></p>
</li>
<li><p>在字节跳动开发者工具里运行：进入hello-uniapp项目，点击工具栏的运行 -&gt; 运行到小程序模拟器 -&gt; 字节跳动开发者工具，即可在字节跳动开发者工具里面体验uni-app。 </p>
<p><img src="https://img-cdn-qiniu.dcloud.net.cn/uniapp/doc/uni20190222-4.png" alt="img"></p>
</li>
<li><p>在QQ小程序开发工具里运行：内容同上，不再重复。</p>
</li>
</ol>
<h2 id="manifest-json部分配置"><a href="#manifest-json部分配置" class="headerlink" title="manifest.json部分配置"></a>manifest.json部分配置</h2><ul>
<li>基础配置：填入Dcloud AppId，登录自动获取</li>
<li>App图标配置：1024*1024，png格式，就是手机App的图标</li>
<li>H5配置：路由模式选择history</li>
<li>微信小程序配置：填入原生AppID</li>
<li>其他配置就不介绍了</li>
</ul>
<h2 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h2><h3 id="web端"><a href="#web端" class="headerlink" title="web端"></a>web端</h3><p>　发行 -&gt; 网站-H5手机版<br><img src="https://img-cdn-qiniu.dcloud.net.cn/uniapp/doc/uni20190222-10.png" alt="img"></p>
<h3 id="小程序端"><a href="#小程序端" class="headerlink" title="小程序端"></a>小程序端</h3><p>　发行 -&gt; 小程序开发者工具 -&gt; 上传 -&gt; 提交审核</p>
<h3 id="App端"><a href="#App端" class="headerlink" title="App端"></a>App端</h3><p>　发行 -&gt; 原生App打包 -&gt; 要填写证书，一般公司都会准备好<br>　打包的时候会生成unpackge目录，dist/build 所有的打包后的资源<br>　H5：打包后的H5的资源<br>　app-plus:打包后的本地资源</p>
<h2 id="目录介绍"><a href="#目录介绍" class="headerlink" title="目录介绍"></a>目录介绍</h2>]]></content>
      <categories>
        <category>uniApp</category>
      </categories>
  </entry>
  <entry>
    <title>this指向</title>
    <url>/jackhuang-haohua.github.io/2020/03/28/2020-05-this%E6%8C%87%E5%90%91/</url>
    <content><![CDATA[<h2 id="this-关键字"><a href="#this-关键字" class="headerlink" title="this 关键字"></a>this 关键字</h2><p>　每一个函数内部都有一个关键字是 <code>this</code>，<strong>函数内部的 this 只和函数的调用方式有关系，和函数的定义方式没有关系</strong><br>　函数内部的 this 指向谁，取决于函数的调用方式</p>
<ul>
<li><p>全局定义的函数直接调用，<code>this =&gt; window</code></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>)</span><br><span class="line">&#125;</span><br><span class="line">fn()</span><br><span class="line"><span class="comment">// 此时 this 指向 window</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>对象内部的方法调用，<code>this =&gt; 调用者</code></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    fn: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.fn()</span><br><span class="line"><span class="comment">// 此时 this 指向 obj</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>定时器的处理函数，<code>this =&gt; window</code></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>)</span><br><span class="line">&#125;, <span class="number">0</span>)</span><br><span class="line"><span class="comment">// 此时定时器处理函数里面的 this 指向 window</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>事件处理函数，<code>this =&gt; 事件源</code></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="code"><pre><span class="line">div.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 当你点击 div 的时候，this 指向 div</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>自调用函数，<code>this =&gt; window</code></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>)</span><br><span class="line">&#125;)()</span><br><span class="line"><span class="comment">// 此时 this 指向 window</span></span><br></pre></td></tr></table></figure></div>

</li>
</ul>
<h2 id="call-和-apply-和-bind"><a href="#call-和-apply-和-bind" class="headerlink" title="call 和 apply 和 bind"></a>call 和 apply 和 bind</h2><p>　上面的都是函数的基本调用方式里面的 this 指向，还有三个方法可以忽略函数本身的 this 指向转而指向别的地方<br>　强行改变 this 指向的方法：<strong>call</strong> / <strong>apply</strong> / <strong>bind</strong></p>
<h3 id="call"><a href="#call" class="headerlink" title="call"></a>call</h3><p>　<code>call</code> 方法附加在函数调用后面使用，可以忽略函数本身的 this 指向；<br>　语法：<code>函数名.call(要改变的this指向，参数1，参数2， ...)</code></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">name</span>: <span class="string">'Jack'</span> &#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(a)</span><br><span class="line">    <span class="built_in">console</span>.log(b)</span><br><span class="line">&#125;</span><br><span class="line">fn(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line">fn.call(obj, <span class="number">1</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure></div>
<p><strong>上面的代码中:</strong></p>
<ul>
<li><code>fn()</code> 的时候，函数内部的 this 指向 window</li>
<li><code>fn.call(obj, 1, 2)</code> 的时候，函数内部的 this 就指向了 obj 这个对象</li>
</ul>
<h3 id="apply"><a href="#apply" class="headerlink" title="apply"></a>apply</h3><p>　<code>apply</code> 方法附加在函数调用后面使用，可以忽略函数本身的 this 指向；<br>　语法： <code>函数名.apply(要改变的 this 指向，[参数1，参数2，...])</code><br>　第二个参数是一个 <strong>数组</strong>，数组里面的每一项依次是向函数传递的参数</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">name</span>: <span class="string">'Jack'</span> &#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(a)</span><br><span class="line">    <span class="built_in">console</span>.log(b)</span><br><span class="line">&#125;</span><br><span class="line">fn(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">fn.call(obj, [<span class="number">1</span>, <span class="number">2</span>])</span><br></pre></td></tr></table></figure></div>
<p><strong>上面的代码中:</strong></p>
<ul>
<li><code>fn()</code> 的时候，函数内部的 this 指向 window</li>
<li><code>fn.apply(obj, [1, 2])</code> 的时候，函数内部的 this 就指向了 obj 这个对象</li>
</ul>
<h3 id="bind"><a href="#bind" class="headerlink" title="bind"></a>bind</h3><p>　<code>bind</code> 方法附加在函数调用后面使用，可以忽略函数本身的 this 指向；<br>　和 call / apply 的不同点在于，不会立即执行函数，而是返回一个已经改变了 this 指向的函数<br>　语法： <code>var newFn = 函数名.bind(要改变的 this 指向); newFn(传递参数)</code></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">name</span>: <span class="string">'Jack'</span> &#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(a)</span><br><span class="line">    <span class="built_in">console</span>.log(b)</span><br><span class="line">&#125;</span><br><span class="line">fn(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"><span class="keyword">var</span> newFn = fn.bind(obj)</span><br><span class="line">newFn(<span class="number">1</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure></div>
<p><strong>上面的代码中:</strong></p>
<ul>
<li>bind 调用的时候，不会执行 fn 这个函数，而是返回一个新的函数，这个新的函数就是一个改变了 this 指向以后的 fn 函数；</li>
<li><code>fn(1, 2)</code> 的时候 this 指向 window；</li>
<li><code>newFn(1, 2)</code> 的时候执行的是一个和 fn 一模一样的函数，只不过里面的 this 指向改成了 obj；</li>
</ul>
<h2 id="箭头函数的this"><a href="#箭头函数的this" class="headerlink" title="箭头函数的this"></a>箭头函数的this</h2><p>　箭头函数内部没有 this，箭头函数的 this 是上下文的 this；</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">fn: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>)</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">fun: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">obj.fn()</span><br><span class="line">obj.fun()</span><br></pre></td></tr></table></figure></div>

<ul>
<li>按照之前的 this 指向来判断，两个都应该指向 obj</li>
<li>但是 fun 因为是箭头函数，所以 this 不指向 obj，而是指向 fun 的外层，就是 window</li>
</ul>
<h2 id="vue-react-小程序中的this"><a href="#vue-react-小程序中的this" class="headerlink" title="vue/react/小程序中的this"></a>vue/react/小程序中的this</h2><p>　this基本都是指向data，但是使不使用箭头函数却又不同；</p>
<h3 id="vue"><a href="#vue" class="headerlink" title="vue"></a>vue</h3><p>vue直接用表达式函数，this指向data函数，如下代码，都能打印出1</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">  data() &#123;</span><br><span class="line"><span class="actionscript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line">        a:1</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    handleChange() &#123;</span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="keyword">this</span>.a);</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  created() &#123;</span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.a);</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h3 id="react"><a href="#react" class="headerlink" title="react"></a>react</h3><p>　react一般都用箭头函数；<br>　声明式函数的话，需要在constructor里面改变this指向：<code>this.handleChange = this.handleChange.bind(this)</code></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">index</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    state = &#123;</span><br><span class="line">        a: <span class="number">1</span>,</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="keyword">constructor</span>()&#123;</span><br><span class="line">        <span class="keyword">super</span>()</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.state.a) <span class="comment">// -&gt; 能得到1</span></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    handleChange = <span class="function"><span class="params">values</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.state.a) <span class="comment">// -&gt; 能得到1</span></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    handleChange() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.state.a); <span class="comment">// -&gt; undefined</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    componentDidMount()&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.state.a) <span class="comment">// -&gt; 能得到1</span></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.state.a) <span class="comment">// -&gt; 能得到1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="小程序"><a href="#小程序" class="headerlink" title="小程序"></a>小程序</h3><p>　小程序也是直接用声明式函数，但是函数是放在<code>Page({})</code>里，即一个json格式的对象里；<br>　如果使用箭头函数，上下文是一个对象，所以this指向undefined；</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">Page(&#123;</span><br><span class="line">    data:&#123;</span><br><span class="line">        a: 1</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    handleChange() &#123;</span><br><span class="line">        console.log(this.a); &#x2F;&#x2F; -&gt; 能得到1</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>javaScript</category>
      </categories>
  </entry>
  <entry>
    <title>webpack-loader</title>
    <url>/jackhuang-haohua.github.io/2020/01/17/2020-05-webpack-Loader/</url>
    <content><![CDATA[<p>　在webpack中loader专门用来编译文件、处理文件，就是在配置项中设置module.rules数组，在数组里放入多个匹配规则，test为此次匹配要匹配的文件正则规则，use代表要使用的loader：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">module:&#123;</span><br><span class="line">    rules:[</span><br><span class="line">        &#123;test:&#x2F;\.css$&#x2F;,use:&#39;css-loader&#39;&#125;</span><br><span class="line">    ],</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;以前的写法</span><br><span class="line">    loaders:[</span><br><span class="line">        &#123;test:&#x2F;\.css$&#x2F;,loader:&#39;css-loader&#39;&#125;</span><br><span class="line">    ],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><p>①使用<code>url-loader</code>可以将css中引入的图片（背景图）、js中生成的img图片处理一下，生成到打包目录里；<br>②视图<code>html-withimg-loader</code>可以将html中img标签引入的img图片打包到目录；</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    test:&#x2F;\.(png|jpe?g|svg|gif)$&#x2F;,</span><br><span class="line">    &#x2F;&#x2F; use:&#39;url-loader?limit&#x3D;1000&amp;name&#x3D;images&#x2F;[hash:8].[name].[ext]&#39;</span><br><span class="line">    use:[</span><br><span class="line">        &#123;</span><br><span class="line">            loader:&#39;url-loader&#39;,</span><br><span class="line">            options:&#123;</span><br><span class="line">                limit:1000,</span><br><span class="line">                name:&#39;&#x2F;static&#x2F;images&#x2F;assets&#x2F;[hash:8].[name].[ext]&#39;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">    test:&#x2F;\.html$&#x2F;,</span><br><span class="line">    use:&#39;html-withimg-loader&#39;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="css"><a href="#css" class="headerlink" title="css"></a>css</h2><p>①<code>yarn add style-loader css-loader -D</code><br>②rules中：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    test:&#x2F;.css$&#x2F;,</span><br><span class="line">    use:[&#39;style-loader&#39;,&#39;css-loader&#39;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="sass"><a href="#sass" class="headerlink" title="sass"></a>sass</h2><p>①<code>yarn add style-loader css-loader -D</code>+<code>yarn add node-sass sass-loader -D</code><br>②下面代码表示先解析scss，再解析scc，再解析style标签；可以直接<code>require(&quot;index.scss&quot;)</code>在JS文件中引入css/scss文件</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    test: &#x2F;\.scss$&#x2F;i,</span><br><span class="line">    use:[&#39;style-loader&#39;,&#39;css-loader&#39;,&#39;sass-loader&#39;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="兼容前缀"><a href="#兼容前缀" class="headerlink" title="兼容前缀"></a>兼容前缀</h2><p>①<code>yarn add --save-dev postcss-loader autoprefixer</code><br>②rules中：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    test:&#x2F;\.css$&#x2F;i,</span><br><span class="line">    use:[</span><br><span class="line">        MiniCssExtractPlugin.loader,</span><br><span class="line">        &quot;css-loader&quot;,</span><br><span class="line">        &quot;postcss-loader&quot;</span><br><span class="line">    ]</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">    test:&#x2F;\.scss$&#x2F;i,</span><br><span class="line">    use:[</span><br><span class="line">        MiniCssExtractPlugin.loader,</span><br><span class="line">        &quot;css-loader&quot;,</span><br><span class="line">        &quot;postcss-loader&quot;,</span><br><span class="line">        &quot;sass-loader&quot;,</span><br><span class="line">        &#123;</span><br><span class="line">            loader: &quot;postcss-loader&quot;,</span><br><span class="line">            options: &#123;</span><br><span class="line">                plugins: [</span><br><span class="line">                    require(&quot;autoprefixer&quot;) &#x2F;*在这里添加*&#x2F;</span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>③package.json中：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">&quot;browserslist&quot;: &#123;</span><br><span class="line">  &quot;production&quot;: [</span><br><span class="line">    &quot;&gt;0.2%&quot;,</span><br><span class="line">    &quot;not dead&quot;,</span><br><span class="line">    &quot;not op_mini all&quot;</span><br><span class="line">  ],</span><br><span class="line">  &quot;development&quot;: [</span><br><span class="line">    &quot;last 1 chrome version&quot;,</span><br><span class="line">    &quot;last 1 firefox version&quot;,</span><br><span class="line">    &quot;last 1 safari version&quot;,</span><br><span class="line">    &quot;last 1 ie version&quot;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="es6"><a href="#es6" class="headerlink" title="es6"></a>es6</h2><p>①<code>yarn add babel@6.23.0 babel-core@6.24.1 babel-loader@7.0.0 babel-preset-es2015@6.24.1 babel-preset-react@6.24.1 -D</code></p>
<blockquote>
<p>共有以下插件：<br>“babel”: “^6.23.0”,<br>“babel-core”: “^6.24.1”,<br>“babel-loader”: “^7.0.0”,<br>“babel-preset-es2015”: “^6.24.1”,<br>“babel-preset-react”: “^6.24.1”,</p>
</blockquote>
<p>②rules中：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    test:&#x2F;\.js$&#x2F;,</span><br><span class="line">    exclude: &#x2F;node_modules&#x2F;,</span><br><span class="line">    loader:&#39;babel-loader&#39;,</span><br><span class="line">    query: &#123;</span><br><span class="line">        presets: [&#39;es2015&#39;,&#39;react&#39;,&#39;stage-0&#39; ]</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>③如果需要编译es7：<code>yarn add  babel-preset-stage-0</code></p>
<h2 id="babel原理"><a href="#babel原理" class="headerlink" title="babel原理"></a>babel原理</h2><p>　babel是一个转译器，感觉相对于编译器compiler，叫转译器transpiler更准确，因为它只是把同种语言的高版本规则翻译成低版本规则，而不像编译器那样，输出的是另一种更低级的语言代码。<br>　但是和编译器类似，babel的转译过程也分为三个阶段：parsing、transforming、generating，以ES6代码转译为ES5代码为例，babel转译的具体过程如下：</p>
<blockquote>
<p>ES6代码输入 ==》 babylon进行解析 ==》 得到AST ==》 plugin用babel-traverse对AST树进行遍历转译 ==》 得到新的AST树 ==》 用babel-generator通过AST树生成ES5代码</p>
</blockquote>
<p>　此外，还要注意很重要的一点就是，babel只是转译新标准引入的语法，比如ES6的箭头函数转译成ES5的函数；而新标准引入的新的原生对象，部分原生对象新增的原型方法，新增的API等（如Proxy、Set等），这些babel是不会转译的。需要用户自行引入polyfill来解决</p>
<p>　关于ployfill、runtime、core-js，可以看<a href="https://www.jianshu.com/p/e9b94b2d52e2" target="_blank">简书mercurygear<br></a></p>
]]></content>
      <categories>
        <category>webpack</category>
      </categories>
  </entry>
  <entry>
    <title>react组件通信</title>
    <url>/jackhuang-haohua.github.io/2019/08/10/2020-05-react-%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1/</url>
    <content><![CDATA[<p>　　<strong>上次总结vue的通信方法，看了好几篇文章，自己也敲了几晚案例，是挺全的，然鹅项目中就没用到过全部……所以这次就总结常用的几个。</strong></p>
<h2 id="一、props父传子-事件子传父"><a href="#一、props父传子-事件子传父" class="headerlink" title="一、props父传子/事件子传父"></a>一、props父传子/事件子传父</h2><p>　敲了个计数框的小案例。<br>　在下面的案例中，父组件的数据由父组件自身的方法来管理，并且在父组件中展示，调用子组件时把数据和方法传过去；<br>　子组件调用父组件的方法，在返回过去参数；<br><strong>index.js中：</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> Counter <span class="keyword">from</span> <span class="string">'./counter'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">index</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>()&#123;</span><br><span class="line">        <span class="keyword">super</span>()</span><br><span class="line">        <span class="keyword">this</span>.state=&#123;</span><br><span class="line">            list:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],</span><br><span class="line">            sum:<span class="number">0</span></span><br><span class="line">        &#125;        </span><br><span class="line">    &#125;</span><br><span class="line">    componentDidMount()&#123;</span><br><span class="line">        <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">            sum:<span class="keyword">this</span>.state.list.reduce(<span class="function">(<span class="params">a,b</span>)=&gt;</span>a+b)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    add=<span class="function">(<span class="params">num,e</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">            sum:<span class="keyword">this</span>.state.sum+num</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">let</span> &#123;list,sum&#125;=<span class="keyword">this</span>.state</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &#123;</span><br><span class="line">                    list.map(<span class="function">(<span class="params">item,index</span>)=&gt;</span>&#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">Counter</span> <span class="attr">key</span>=<span class="string">&#123;index&#125;</span> <span class="attr">n</span>=<span class="string">&#123;item&#125;</span> <span class="attr">add</span>=<span class="string">&#123;this.add&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">                    &#125;)</span></span><br><span class="line"><span class="xml">                &#125;</span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;sum&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>counter.js中：</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">counter</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(props)&#123;</span><br><span class="line">        <span class="keyword">super</span>(props)</span><br><span class="line">        <span class="keyword">this</span>.state=&#123;</span><br><span class="line">            n:props.n,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// num是+1或-1</span></span><br><span class="line">    handle=<span class="function">(<span class="params">num,e</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.state.n&gt;<span class="number">0</span>||num&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">                n:<span class="keyword">this</span>.state.n*<span class="number">1</span>+num</span><br><span class="line">            &#125;,()=&gt;&#123;</span><br><span class="line">                <span class="keyword">this</span>.props.add(num)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    handleChange = <span class="function">(<span class="params">e</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">            n:e.target.value</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="comment">// e.target.value是input更新后数据，this.state.n是更新前数据</span></span><br><span class="line">        <span class="keyword">this</span>.props.add(e.target.value*<span class="number">1</span>-<span class="keyword">this</span>.state.n)</span><br><span class="line">    &#125;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &#123;</span><br><span class="line">                    &lt;li&gt;</span><br><span class="line">                        &lt;button onClick=&#123;<span class="keyword">this</span>.handle.bind(<span class="keyword">this</span>,<span class="number">-1</span>)&#125;&gt;+<span class="xml"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">                        &lt;input type=<span class="string">"num"</span> value=&#123;<span class="keyword">this</span>.state.n&#125; onChange=&#123;<span class="keyword">this</span>.handleChange&#125;&gt;<span class="xml"><span class="tag">&lt;/<span class="name">input</span>&gt;</span></span></span><br><span class="line">                        &lt;button onClick=&#123;<span class="keyword">this</span>.handle.bind(<span class="keyword">this</span>,<span class="number">1</span>)&#125;&gt;+<span class="xml"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">                    &lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">                &#125;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>div&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="二、ref"><a href="#二、ref" class="headerlink" title="二、ref"></a>二、ref</h2><p>可以理解为兄弟间通信；<br>如下代码，通过ref标记List -&gt; 取得List里的add方法 -&gt; 把方法传给Input</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">index</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    add=<span class="function">(<span class="params">name,age</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.list.add(name,age)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;Input add=&#123;<span class="keyword">this</span>.add&#125;&gt;<span class="xml"><span class="tag">&lt;/<span class="name">Input</span>&gt;</span></span>              </span><br><span class="line">                &lt;List ref=&#123;el=&gt;<span class="keyword">this</span>.list=el&#125;&gt;<span class="xml"><span class="tag">&lt;/<span class="name">List</span>&gt;</span></span></span><br><span class="line">            &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        )</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure></div>

<p><strong>实际开发中，一般会用<code>createRef</code>：</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component, createRef &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">InputContext</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>()&#123;</span><br><span class="line">        <span class="keyword">super</span>()</span><br><span class="line">        <span class="keyword">this</span>.input=createRef()</span><br><span class="line">    &#125;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;input ref=&#123;<span class="keyword">this</span>.input&#125;&gt;<span class="xml"><span class="tag">&lt;/<span class="name">input</span>&gt;</span></span></span><br><span class="line">            &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        )</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure></div>

<h2 id="三、context"><a href="#三、context" class="headerlink" title="三、context"></a>三、context</h2><p>通过上下文传值，其实redux的传参就是这个原理。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.引入createContext</span></span><br><span class="line"><span class="keyword">import</span> React, &#123; Component, createContext &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.通过createContext函数，AContext变成了一个小仓库，拥有两个属性</span></span><br><span class="line"><span class="keyword">let</span> AContext=createContext()</span><br><span class="line"><span class="keyword">const</span>&#123;</span><br><span class="line">    Provider,</span><br><span class="line">    Consumer</span><br><span class="line">&#125;=AContext</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AProvider</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>()&#123;</span><br><span class="line">        <span class="keyword">super</span>()</span><br><span class="line">        <span class="comment">// 3.父组件定义数据</span></span><br><span class="line">        <span class="keyword">this</span>.state=&#123;</span><br><span class="line">            num:<span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    add=<span class="function"><span class="params">e</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">            num:<span class="keyword">this</span>.state.num+<span class="number">1</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    del=<span class="function"><span class="params">e</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">            num:<span class="keyword">this</span>.state.num<span class="number">-1</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="comment">// 4.父组件使用Provider，就变成了提供者，通过value往仓库里输送数组</span></span><br><span class="line">            &lt;Provider value=&#123;&#123;</span><br><span class="line">                num:<span class="keyword">this</span>.state.num,</span><br><span class="line">                add:<span class="keyword">this</span>.add,</span><br><span class="line">                del:<span class="keyword">this</span>.del</span><br><span class="line">            &#125;&#125;&gt;</span><br><span class="line">                &#123;<span class="comment">/* 5.父组件的所有子组件，都可以拿到仓库AContext的东西 */</span>&#125;</span><br><span class="line">                &#123;<span class="keyword">this</span>.props.children&#125;</span><br><span class="line">            &lt;<span class="regexp">/Provider&gt;</span></span><br><span class="line"><span class="regexp">        )</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 6.Acustom是其中一个子组件</span></span><br><span class="line"><span class="regexp">class Acustom extends Component&#123;</span></span><br><span class="line"><span class="regexp">    /</span><span class="regexp">/ 7.拿到仓库AContext</span></span><br><span class="line"><span class="regexp">    static contextType=AContext</span></span><br><span class="line"><span class="regexp">    render()&#123;</span></span><br><span class="line"><span class="regexp">        return(</span></span><br><span class="line"><span class="regexp">            &lt;div&gt;</span></span><br><span class="line"><span class="regexp">                &#123;/</span>* <span class="number">8.</span>使用仓库 *<span class="regexp">/&#125;</span></span><br><span class="line"><span class="regexp">                &#123;this.context.num&#125;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>div&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Btn</span>(<span class="params">props</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="comment">// 9.通过Consumer拿到仓库AContext</span></span><br><span class="line">      &lt;Consumer&gt;</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="comment">// 10.Consumer里面必须是一个函数，函数的参数就可以获取到Provider的值了</span></span><br><span class="line">          (&#123;add,del&#125;)=&gt;&#123;</span><br><span class="line">            <span class="keyword">const</span> handle = props.type === <span class="string">"add"</span> ? add : del</span><br><span class="line">            <span class="comment">// props.children是调用组件时里面内容&lt;Btn&gt;内容&lt;/Btn&gt;</span></span><br><span class="line">            <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;handle&#125;</span>&gt;</span>&#123;props.children&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &lt;<span class="regexp">/Consumer&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">class App extends Component&#123;</span></span><br><span class="line"><span class="regexp">    render()&#123;</span></span><br><span class="line"><span class="regexp">        return(</span></span><br><span class="line"><span class="regexp">            /</span><span class="regexp">/ 9.父组件包着子组件</span></span><br><span class="line"><span class="regexp">            &lt;AProvider&gt;</span></span><br><span class="line"><span class="regexp">                &lt;Btn type="del"&gt;-&lt;/</span>Btn&gt;</span><br><span class="line">                &lt;Acustom&gt;<span class="xml"><span class="tag">&lt;/<span class="name">Acustom</span>&gt;</span></span></span><br><span class="line">                &lt;Btn type=<span class="string">"add"</span>&gt;+<span class="xml"><span class="tag">&lt;/<span class="name">Btn</span>&gt;</span></span></span><br><span class="line">            &lt;<span class="regexp">/AProvider&gt;</span></span><br><span class="line"><span class="regexp">        )</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">export default App;</span></span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>react</category>
      </categories>
  </entry>
  <entry>
    <title>两道关于堆和栈的面试题</title>
    <url>/jackhuang-haohua.github.io/2018/06/25/2020-05-%E4%B8%A4%E9%81%93%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
    <content><![CDATA[<h2 id="第一题"><a href="#第一题" class="headerlink" title="第一题"></a>第一题</h2><p><a href="https://segmentfault.com/a/1190000018711603?utm_source=tag-newest" target="_blank">图片来自这篇思否的文章</a></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123;</span><br><span class="line">    n: <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> b = a;</span><br><span class="line"></span><br><span class="line">a.x = a = &#123;</span><br><span class="line">    n: <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a.x)  <span class="comment">//是什么？ undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(b)    <span class="comment">//是什么？&#123;n:1,x:&#123;n:2&#125;&#125;</span></span><br></pre></td></tr></table></figure></div>

<p><strong>①首先是前面两个赋值表达式，a和b指向同一个地址</strong><br><img src="https://s1.ax1x.com/2020/05/19/YIWMtA.png" alt="YIWMtA.png"></p>
<p><strong>②然后到第三个表达式，因为成员访问的优先级比赋值要高，所以会先计算<code>a.x</code>，创建了a对象的x键值，但是没有赋值，所以是undefined；</strong><br><img src="https://s1.ax1x.com/2020/05/19/YIWONd.png" alt="YIWONd.png"></p>
<p><strong>③计算完a.x，进行从右到左的赋值操作；<br>　将<code>{n:2}</code>重新赋值给a，则a指向另一个地址；<br>　将a赋值给a.x，注意此时a.x是之前的a，为第一个对象的x:undefined，所以x:undefined指向了{n:2}</strong><br><img src="https://s1.ax1x.com/2020/05/19/YIfy8I.png" alt="YIfy8I.png"></p>
<h2 id="第二题"><a href="#第二题" class="headerlink" title="第二题"></a>第二题</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">i</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params">n</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(n + (--i))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> f = fn(<span class="number">2</span>)</span><br><span class="line">f(<span class="number">3</span>) <span class="comment">// 4</span></span><br><span class="line">fn(<span class="number">4</span>)(<span class="number">5</span>) <span class="comment">// 8</span></span><br><span class="line">fn(<span class="number">6</span>)(<span class="number">7</span>) <span class="comment">// 12</span></span><br><span class="line">f(<span class="number">8</span>) <span class="comment">// 8</span></span><br></pre></td></tr></table></figure></div>

<p>这次是我自己画的图…<br><img src="https://s1.ax1x.com/2020/05/19/YIhyo4.png" alt="YIhyo4.png"></p>
<p>执行步骤是这样的：</p>
<ol>
<li>定义fn：在栈中创建fn变量，指向堆中的存储空间xxff00，存着fn的函数体</li>
<li>定义f并赋值fn(2)：在栈中创建f变量 -&gt; fn(2)一执行，得到b(n)并赋值给f -&gt; 此时f还没有执行空间</li>
<li>f(3)：找到栈中变量f，此时f=b -&gt; 堆中创建执行空间xxff11 -&gt; 解析形参i=2，n=3 -&gt; 执行b的函数体 -&gt; 得到4 -&gt; <strong>b用了fn的私有变量，形成了闭包空间，所以执行空间不会消失</strong></li>
<li>fn(4)(5)：找到栈中fn，fn指向xxff00 -&gt; 堆中创建执行空间xxff22 -&gt; 执行xxff00中存储的函数体 -&gt; 得到8</li>
<li>fn(6)(7)：与上一步相同。因为函数fn()本身没有形成闭包(里面的b闭包了)，所以执行空间消失了，只能重新创建，<strong>形参i和n都重新赋值</strong></li>
<li>f(8)：找到栈中变量f -&gt; f的执行空间没有消失 -&gt; 解析形参i=1，n=8 -&gt; 执行函数体 -&gt; 得到8</li>
</ol>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>认识webpack</title>
    <url>/jackhuang-haohua.github.io/2020/01/16/2020-05-webpack/</url>
    <content><![CDATA[<h2 id="认识webpack"><a href="#认识webpack" class="headerlink" title="认识webpack"></a>认识webpack</h2><h3 id="webpack的作用"><a href="#webpack的作用" class="headerlink" title="webpack的作用"></a>webpack的作用</h3><ol>
<li>打包：将多个js文件打包成一个文件；减少Http请求、压缩页面的空格从而减轻服务器压力</li>
<li>转换：把扩展的语法转换成普通js，目的就是让浏览器正常解析运行代码</li>
<li>优化：复杂的开发流程 、进行模块化打包、去空格、压缩混淆、减少http请求等</li>
</ol>
<h3 id="两种依赖"><a href="#两种依赖" class="headerlink" title="两种依赖"></a>两种依赖</h3><ol>
<li><p>开发依赖devDependencies：devDependencies是开发时的依赖。即devDependencies下的模块，是我们开发时用的，比如gulp-uglify，node-sass，sass-loader，babel。我们安装 js的压缩包gulp-uglify 时，我们采用的是 “npm install -D gulp-uglify ”命令安装，因为我们在发布后用不到它，而只是在我们开发才用到它。</p>
<ul>
<li><code>cnpm install node-sass -D(--save-dev)</code></li>
</ul>
</li>
<li><p>运行依赖dependencies：dependencies是运行时依赖。dependencies下的模块，则是我们发布后还需要依赖的模块，譬如像jQuery库或者Angular框架类似的，我们在开发完后后肯定还要依赖它们，否则就运行不了。</p>
<ul>
<li><code>cnpm install express -S(--save)</code></li>
</ul>
</li>
</ol>
<h2 id="gulp和webpack"><a href="#gulp和webpack" class="headerlink" title="gulp和webpack"></a>gulp和webpack</h2><p>gulp的用法之前的文章已经写过了，这里就记录一下两者区别，参考<a href="https://www.jianshu.com/p/9d7ac75e1c61" target="_blank">简书Eva_cheng</a>；</p>
<ol>
<li><p>gulp，流程化。侧重于前端开发的整个过程的控制管理，我们可以通过给gulp配置不同方法，比如启动server、sass/less预编译、文件的合并压缩等等，来让gulp实现不同的功能，从而构建整个前端开发流程。</p>
</li>
<li><p>webpack，模块化。更侧重于模块打包，可以把开发中的所有资源（图片、js文件、css文件等）都看成模块，最初Webpack本身就是为前端JS代码打包而设计，后来被扩展到其他资源的打包处理。Webpack是通过loader（加载器）和plugins（插件）对资源进行处理的。</p>
</li>
<li><p>相同点：都是前端自动化的构建工具</p>
</li>
<li><p>不同点：<br>gulp强调工作流程（对于模块化并没有进行强调）；<br>webpack前端模块化开发的解决方案   强调模块化、压缩合并、预处理等都是它的附带功能；</p>
</li>
</ol>
<p>gulp强调工作流程，通过task方法设置一个个的任务（例如文件压缩、合并、启动server等）<br>webpack是一个前端模块化方案，更侧重模块打包，我们可以把开发中所有的资源（图片、js文件、css资源）通过loader(加载器)和plugins(插件)对资源进行处理，打包成符合生产环境部署的前端资源。</p>
<h2 id="使用webpack"><a href="#使用webpack" class="headerlink" title="使用webpack"></a>使用webpack</h2><p>4个基本概念，以及构建一个webpack项目；</p>
<h3 id="安装webpack"><a href="#安装webpack" class="headerlink" title="安装webpack"></a>安装webpack</h3><p>全局安装：<br><code>cnpm i webpack -g</code><br><code>cnpm i webpack-cli -g (4.0+)</code><br><code>cnpm i yarn -g</code></p>
<p>项目安装：<br><code>yarn add webpack webpack-cli</code><br>这时候命令行输入webpack，会默认打包src/index.js文件，当然其他的功能还需要手动配置；</p>
<h3 id="几个核心概念"><a href="#几个核心概念" class="headerlink" title="几个核心概念"></a>几个核心概念</h3><p>entry、output、plugins、loaders；<br>创建<strong>webpack.config.js</strong>文件，以下的配置大部分都在这个文件；</p>
<h4 id="webpack命令"><a href="#webpack命令" class="headerlink" title="webpack命令"></a>webpack命令</h4><p>直接走webpack.config.js，默认是同一文件夹，也可以指定位置：<br>①命令行：<code>webpack --mode production --config scripts/webpack.config.js</code><br>②package.json，配置<code>yarn build</code>：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;build&quot;: &quot;webpack --mode production --config src&#x2F;webpack.config.js&quot;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></div>
<p>production指定的是模式，还有一个development；后面配置的是打包后的文件夹所在位置；</p>
<h4 id="entry"><a href="#entry" class="headerlink" title="entry"></a>entry</h4><ol>
<li><p>entry配置项目打包的入口，值可以为单个的字符串执行某一个文件的地址，这个时候该文件就是入口文件，webpack会根据入口文件里各模块间的关系形成依赖关系图，然后根据依赖关系图进行打包；<br>　<code>__dirname</code>指的是文件所在的当前文件夹，下面代码的意思是：打包app.js文件，放在build文件夹里：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 指明入口文件</span><br><span class="line">entry:&#39;.&#x2F;src&#x2F;app.js&#39;,</span><br><span class="line">&#x2F;&#x2F; 指明出口文件</span><br><span class="line">output:&#123;</span><br><span class="line">    path:path.join(__dirname,&#39;build&#39;),</span><br><span class="line">    filename:&#39;app.js&#39;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>但是有的时候我们需要的是多入口，我们就写成数组的形式，数组里的每一个字符串地址指向的都是一个独立的入口，webpack会将这些入口的依赖打包；</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">entry:[&#39;.&#x2F;src&#x2F;app.js&#39;,&#39;.&#x2F;src&#x2F;vendor.js&#39;],</span><br><span class="line">output:&#123;</span><br><span class="line">    path:path.join(__dirname,&#39;build&#39;),</span><br><span class="line">    filename:&#39;[name].js&#39; &#x2F;&#x2F;不确定名字的时候，这里会打包成main.js</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>刚才的两种entry配置都只会打包出一个js文件，但是在某一个应用中我们可能需要将js根据依赖关系打包成多个js文件，并且在多页面应用中，我们也确实不可能只使用一个js文件，那么我们就可以使用如下的配置：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">entry:&#123;</span><br><span class="line">    app:&#39;.&#x2F;src&#x2F;app.js&#39;,</span><br><span class="line">    vendor:&#39;.&#x2F;src&#x2F;vendor.js&#39;</span><br><span class="line">&#125;,</span><br><span class="line">output:&#123;</span><br><span class="line">    path:path.join(__dirname,&#39;build&#39;),</span><br><span class="line">    filename:&#39;[name]_[hash:8].js&#39; &#x2F;&#x2F;指定hash值长度为8</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>　因为filename里写的文件名字是[name]，所以会根据entry的配置的key名来为打包出的js文件命名；<br>　hash是每次打包的一个随机的hash值，可以用来做版本控制，解决浏览器缓存问题；<br>　但是，直接用[hash]的话，每次都会重新打包成新的文件(不覆盖之前的)，不管代码变没变，可以换成<code>filename:&#39;[name]_[chunkhash].js&#39;</code>，修改过的问价才会重新打包；<br>　<strong>hash</strong>是目前最常见的有效使用浏览器长缓存的方法，js文件如果有内容更新，hash就会更新，浏览器请求路径变化所以更新缓存，如果js内容不变，hash不变，直接用缓存；<br>　比如一个商城的商品A已经过期了，当用户网络不好，或者直接输入上次的地址，浏览器有可能直接调用缓存，渲染上次一模一样网页；加上hash后，如果网页代码变了，则每次都会生成不同的打包文件，接着请求不同的文件，就不会调用之前的缓存了；</p>
</li>
</ol>
<h4 id="output"><a href="#output" class="headerlink" title="output"></a>output</h4><p>　filename可以确定打包出来的文件的名字，在里面我们可以使用[name]，[hash]这样的占位符；<br>　path配置打包出去的文件的路径，需要是绝对路径；<br>　注意：打包的时候出现黄色警告，原因是因为需要webpack指明mode模式。<br>　- path有两个关键词，__dirname和process.cwd()：<br>　 + __dirname是当前js文件所在的文件夹<br>　 + process.cwd()是指当前node命令执行时所在的文件夹</p>
<h4 id="plugins"><a href="#plugins" class="headerlink" title="plugins"></a>plugins</h4><p>　在webpack编译用的是loader，但是有一些loader无法完成的任务，交由插件（plugin）来完成，使用插件需要在配置项中配置plugins选项，值是数组，可以放入多个插件的使用，而一般的插件都是一个构造器，我们只需在plugins数组中放入该插件的实例即可<br>　plugins一般都需要实例化的方式使用</p>
<p><strong>例如要使用一个html打包插件</strong><br>①<code>yarn add --dev html-webpack-plugin</code><br>②webpack.config</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">const HtmlWebpackPlugin &#x3D; require(&quot;html-webpack-plugin&quot;)</span><br><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">    ...</span><br><span class="line">    plugins:[</span><br><span class="line">        new HtmlWebpackPlugin(&#123;</span><br><span class="line">            title: &#39;My App&#39;, &#x2F;&#x2F;还要更改index.html中的title</span><br><span class="line">            template: &#39;public&#x2F;index.html&#39;,</span><br><span class="line">            filename:&quot;test.html&quot; &#x2F;&#x2F;指定打包后的文件名</span><br><span class="line">        &#125;)</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>③这个插件可以选择是否依据模板来生成一个打包好的html文件，在里面可以配置、title、template、filename、minify等选项，详情请查阅<a href="https://segmentfault.com/a/1190000007294861" target="_blank">思否的文章</a>；<br>比如上面的代码指定了模板html：<code>public/index.html</code>，则会打包成index.html，并且test.js会自动加入打包后的index.html</p>
<h4 id="loader"><a href="#loader" class="headerlink" title="loader"></a>loader</h4><p>　在webpack中loader专门用来编译文件、处理文件，就是在配置项中设置module.rules数组，在数组里放入多个匹配规则：<br>例如编译scss，<br>①<code>yarn add style-loader css-loader -D</code>+<code>yarn add node-sass sass-loader -D</code><br>②下面代码表示先解析scss，再解析scc，再解析style标签；可以直接<code>require(&quot;index.scss&quot;)</code>在JS文件中引入css/scss文件</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">    ......</span><br><span class="line">    module:&#123;</span><br><span class="line">        rules:[</span><br><span class="line">            &#123;</span><br><span class="line">                test: &#x2F;\.scss$&#x2F;i,</span><br><span class="line">                use:[&#39;style-loader&#39;,&#39;css-loader&#39;,&#39;sass-loader&#39;]</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="webpack服务器"><a href="#webpack服务器" class="headerlink" title="webpack服务器"></a>webpack服务器</h2><p>①<code>yarn add webpack-dev-server --save-dev</code><br>②package.json配置，</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;dev&quot;: &quot;webpack-dev-server --mode production --config src&#x2F;webpack.config.js&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>③<code>yarn dev</code>执行，跟之前效果一样，但是不会生成dist文件夹，可以直接解析完成打包，并在端口打开</p>
]]></content>
      <categories>
        <category>webpack</category>
      </categories>
  </entry>
  <entry>
    <title>传输协议相关</title>
    <url>/jackhuang-haohua.github.io/2018/06/17/2020-05-%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE/</url>
    <content><![CDATA[<h2 id="了解传输协议"><a href="#了解传输协议" class="headerlink" title="了解传输协议"></a>了解传输协议</h2><p>前端怎么和后端沟通，后端又是怎么把数据传递回来的？</p>
<p>一个 http 请求的步骤<br><strong>建立连接 -&gt; 前端发送请求 -&gt; 后端返回响应 -&gt; 断开连接</strong></p>
<ul>
<li>注意：这个请求只能由前端发起，四个步骤一个都不能少</li>
<li>例子: 前端想和后端要交流两件事<br>-&gt; 建立连接 -&gt; 说第一个事情 -&gt; 后端把第一个事情做完反馈结果 -&gt; 断开连接<br>-&gt; 建立连接 -&gt; 说第二个事情 -&gt; 后端把第二个事情做完反馈结果 -&gt; 断开连接</li>
</ul>
<p><strong>建立连接</strong></p>
<ul>
<li>基于 TCP/IP 协议的三次握手</li>
<li>目的: 保证前后端可以正常通信，确定前后端都可以正常收发消息</li>
</ul>
<p><strong>前端发送请求</strong></p>
<ul>
<li>每一个请求都以请求报文的形式发送</li>
<li>报文：请求报文就是一个固定格式的信件，浏览器已经帮我们自动组装好</li>
<li>请求报文里面包含哪些内容<ul>
<li>请求报文行(请求行)：GET 请求方式 -&gt; xxx.html 请求路径, 你向服务器请求的是什么东西 -&gt; HTTP/1.1 传输协议版本</li>
<li>请求报文头(报文头)：对本次请求进行一些描述性的信息 -&gt; Host: 请求的主机 -&gt; User-Agent: 浏览器的信息(终端信息) -&gt; Content-Type: 前端给后端的数据的数据格式 -&gt; cookie</li>
<li>请求报文空行(请求空行)：分隔请求头和请求体的一个空行</li>
<li>请求报文体(请求体)：前端给后端的数据</li>
</ul>
</li>
</ul>
<p><strong>后端响应</strong></p>
<ul>
<li>每一个响应都以响应报文的形式返回</li>
<li>响应报文里面包含哪些内容<ul>
<li>响应状态行(状态行)：HTTP/1.1 传输协议版本 -&gt; 200 响应状态码 -&gt; OK 对响应状态码的简单描述</li>
<li>响应报文头(响应头)：对本次响应的一些描述性信息 -&gt; Date: 服务器时间 -&gt; Server: 服务器信息 -&gt; Conetnt-Length: 后端返回的数据长度 -&gt; Content-Type: 后端返回的数据的格式(会让浏览器按照固定的数据格式解析内容)</li>
<li>响应报文体(响应体)：后端给前端返回的数据</li>
</ul>
</li>
<li>一个响应报文<ul>
<li>状态行 传输协议 状态码 状态码的简单描述</li>
<li>响应头 本次响应的描述信息</li>
<li>响应体 后端给前端的数据</li>
</ul>
</li>
</ul>
<p><strong>断开连接</strong></p>
<ul>
<li>基于 TCP/IP 协议的四次挥手</li>
<li>保证相互都不在进行通讯了</li>
</ul>
<p><strong>总结: 一个 http 请求</strong></p>
<ol>
<li>建立连接 -&gt; 三次握手</li>
<li>前端发送请求 -&gt; 请求报文的形式</li>
<li>后端返回响应 -&gt; 响应报文的形式</li>
<li>断开连接 -&gt; 四次挥手</li>
</ol>
<h2 id="响应状态码"><a href="#响应状态码" class="headerlink" title="响应状态码"></a>响应状态码</h2><p>在响应报文里面的一个信息，表示本次请求的状态</p>
<ul>
<li>响应状态码分成五类<ul>
<li>100 ~ 199<br>-&gt; 表示连接继续, 继续请求，很少出现</li>
<li>200 ~ 299<br>-&gt; 各种意义上的成功<br>-&gt; 200 标准成功</li>
<li>300 ~ 399<br>-&gt; 重定向，本该请求一个路径, 但是由服务端给你换了一个路径，你看到的路径和你请求的路径不是一个, 中间有服务器给你处理了一下<br>-&gt; 304 缓存<br>-&gt; 301 永久重定向<br>-&gt; 302 临时重定向</li>
<li>400 ~ 499<br>-&gt; 各种客户端错误<br>-&gt; 404 请求地址错误<br>-&gt; 403 权限不够不允许查看</li>
<li>500 ~ 599<br>-&gt; 各种服务端错误<br>-&gt; 502 服务器维护或者过载</li>
</ul>
</li>
</ul>
<h2 id="常见的请求方式"><a href="#常见的请求方式" class="headerlink" title="常见的请求方式"></a>常见的请求方式</h2><ul>
<li>常见的请求方式有八种<ol>
<li>GET -&gt; 多用于向服务端获取一些数据</li>
<li>POST -&gt; 多用于向服务器传递信息</li>
<li>PUT -&gt; 多用于向服务器传递信息, 并让服务器存储起来</li>
<li>DELETE -&gt; 多用于让服务器删除一些信息</li>
<li>HEAD -&gt; 不需要响应体, 主要是为了获取响应头信息</li>
<li>PACTH -&gt; 和 PUT 类似, 倾向于局部更新</li>
<li>CONNECT -&gt; 预留方式, 管道连接改成代理连接的方式</li>
<li>OPTIONS -&gt; 用于允许前端查看服务端性能(服务端同意)</li>
</ol>
</li>
</ul>
<h3 id="GET-和-POST-请求的区别"><a href="#GET-和-POST-请求的区别" class="headerlink" title="GET 和 POST 请求的区别"></a>GET 和 POST 请求的区别</h3><ul>
<li><p>GET</p>
<ol>
<li>倾向于向服务器获取数据</li>
<li>直接再地址后面进行拼接(请求体是空的)</li>
<li>大小限制为 2KB 左右(因为 IE 最多传递 2KB)</li>
<li>会被浏览器主动缓存</li>
<li>相对于 POST 不是很安全(明文发送)</li>
<li>数据格式必须是 url 编码的格式, 如果不是会自动转换成 url 编码</li>
</ol>
</li>
<li><p>POST</p>
<ol>
<li>倾向于向服务器传递数据</li>
<li>再请求体里面传递过去(地址后面没有)</li>
<li>理论上是没有限制(但是可以被服务器限制)</li>
<li>不会被浏览器主动缓存, 需要手动设置</li>
<li>相对于 GET 比较安全的(暗文发送)</li>
<li>数据格式理论上我所谓, 但是要和请求头中的 content-type 一致<br>=&gt; 请求头里面的 content-type 表示请求体的数据格式</li>
</ol>
</li>
</ul>
<p><strong>注意：</strong></p>
<ul>
<li>当你需要传递和用户相关的隐私信息的时候, 必须要使用 POST 方式发送比如登录功能</li>
</ul>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
  </entry>
  <entry>
    <title>css动画</title>
    <url>/jackhuang-haohua.github.io/2019/01/11/2020-05-%E5%8A%A8%E7%94%BB/</url>
    <content><![CDATA[<p>　这里推荐小火柴这几篇文章，</p>
<ul>
<li><a href="https://www.cnblogs.com/xiaohuochai/p/5350254.html#anchor2" target="_blank">transform(2d)</a></li>
<li><a href="https://www.cnblogs.com/xiaohuochai/p/5391663.html" target="_blank">animation</a></li>
<li><a href="https://www.cnblogs.com/xiaohuochai/p/5351477.html" target="_blank">transform(3d)</a><br>　因为别人都写的这么详细了，相同的知识我也不好意思在重复一遍…所以这篇文章打算简单记一下知识点，重点是后面做的一些动画实例，来加深理解；</li>
</ul>
<h2 id="transition"><a href="#transition" class="headerlink" title="transition"></a>transition</h2><p>　给元素变化设置一个过渡时间，只有加了transition才会出现动画，不然只会从一个状态闪现到另一个状态；<br><strong>有4个属性：</strong></p>
<ul>
<li>transition-property: 过渡属性(默认值为all)</li>
<li>transition-duration: 过渡持续时间(默认值为0s)</li>
<li>transiton-timing-function: 过渡函数(默认值为ease函数)</li>
<li>transition-delay: 过渡延迟时间(默认值为0s)</li>
</ul>
<p>　基本上都会合起来写，比如：<code>transition: width 2s ease 0.5s ;</code><br>　实际上就算合起来也很少会写四个属性，一般只会用到:<code>transition: 2s ;</code></p>
<h2 id="transform-2d"><a href="#transform-2d" class="headerlink" title="transform(2d)"></a>transform(2d)</h2><p><strong>原点：</strong><br>　首先要指定变形原点<code>transform-origin</code>，默认在元素正中心，<br>　一般会才会复合的写法指定：<code>transform-origin: left(0%) top(0%)</code></p>
<p><strong>类型</strong></p>
<ul>
<li>translate 位移</li>
<li>scale 缩放</li>
<li>skew 倾斜</li>
<li>rotate 旋转</li>
</ul>
<h2 id="transform-3d"><a href="#transform-3d" class="headerlink" title="transform(3d)"></a>transform(3d)</h2><p>　比2d多了一个Z轴和透视属性；</p>
<ul>
<li>xy轴不变，z轴垂直于屏幕</li>
<li>perspective-origin，类似于之前的变形原点，默认在中间<ul>
<li>x轴: left | right | center | <percentage> | <length></li>
<li>y轴: top | bottom | center | <percentage> | <length></li>
</ul>
</li>
</ul>
<p>　属性只有三个：</p>
<ul>
<li>translate 位移</li>
<li>scale 缩放</li>
<li>rotate 旋转</li>
</ul>
<h2 id="animation"><a href="#animation" class="headerlink" title="animation"></a>animation</h2><p>　关键帧，和flash、premiere的关键帧一个道理；</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">div&#123;</span><br><span class="line">    width: 300px;</span><br><span class="line">    height: 100px;</span><br><span class="line">    background-color: pink;</span><br><span class="line">    animation-name: test;</span><br><span class="line">    animation-duration: 3s;</span><br><span class="line">    animation-timing-function: ease;</span><br><span class="line">    animation-delay: 0s;</span><br><span class="line">    animation-iteration-count: infinite;</span><br><span class="line">    animation-direction: normal;</span><br><span class="line">    animation-play-state: running;</span><br><span class="line">    animation-fill-mode: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@keyframes test&#123;</span><br><span class="line">    0%&#123;background-color: lightblue;&#125;</span><br><span class="line">    30%&#123;background-color: lightgreen;&#125;</span><br><span class="line">    60%&#123;background-color: lightgray;&#125;</span><br><span class="line">    100%&#123;background-color: black;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>css</category>
      </categories>
  </entry>
  <entry>
    <title>了解目前流行的3种App</title>
    <url>/jackhuang-haohua.github.io/2019/09/29/2020-05-%E4%B8%89%E7%A7%8DApp/</url>
    <content><![CDATA[<h2 id="一-NativeApp-原生App"><a href="#一-NativeApp-原生App" class="headerlink" title="一. NativeApp(原生App)"></a>一. NativeApp(原生App)</h2><p>纯工具类的App，比如微信客户端、手机QQ；<br><strong>特点：</strong></p>
<ol>
<li>开发：由原生Native人员开发的、安卓（Android）、苹果（IOS）</li>
<li>语言：Android（Java + XML）、IOS (Objective-c / Swift + XML)</li>
<li>更新维护：版本更新、打补丁包、需要从 app store 进行应用更新</li>
<li>使用：必须去app-store里面进行下载更新才可以使用</li>
<li>优点：运行稳定、用户粘度高、安装使用比较方便、用户体验强、可以操作原生功能</li>
<li>缺点：不能跨平台、必须开发两套代码（Android+IOS）</li>
</ol>
<h2 id="二-WebApp-移动M站"><a href="#二-WebApp-移动M站" class="headerlink" title="二. WebApp(移动M站)"></a>二. WebApp(移动M站)</h2><p>​<strong>特点：</strong></p>
<ol>
<li>凡是可以在移动端浏览器里面进行打开的网站都称之为WebApp</li>
<li>开发：H5前端开发工程师</li>
<li>语言：html5+css3+js(zepto+react+angular+vue等)</li>
<li>更新维护：直接无痕更新（<strong>浏览器缓存的文件是根据路径进行缓存的，所以前端会在地址栏后面加上一串随机码，以保证每次打开页面都是重新请求，不会用旧的缓存来渲染</strong>）</li>
<li>使用：无需下载、直接通过用户的手机浏览器（safari)可以直接打开进行访问</li>
<li>优点：可以跨平台的、开发成本低、使用成本低、更新维护成本低</li>
<li>缺点：不稳定、流畅度差、用户体验差、不能调用原生设备</li>
</ol>
<h2 id="三-Hybrid-App-混合App"><a href="#三-Hybrid-App-混合App" class="headerlink" title="三.  Hybrid App (混合App)"></a>三.  Hybrid App (混合App)</h2><ol>
<li><p>在native的壳子中，通过webview，在webveiw中内嵌H5的页面即可。内部通过JSBridge这个技术实现了原生与JS的交互。</p>
</li>
<li><p>有两种开发模式</p>
<ul>
<li>原生主导的开发模式：</li>
<li>整个app大部分的界面都是由原生人员开发的，但是某一些经常变动的页面由内嵌的H5的页面去实现的。<br>原生人员打包app (AndroidStudio or Xcode)</li>
</ul>
</li>
<li><p>H5主导的开发模式：</p>
<ul>
<li>h5可以借助一些已经赋予功能的一些打包工具，实现前端软件的打包发布。</li>
<li>检测一下哪些是原生native应用，哪些是hybrid应用，主要看内部有没有内嵌的h5的页面即可。</li>
</ul>
</li>
<li><p>同类型的产品只需要看安装包的大小，如果小的话肯定就是hybrid应用。android手机上面有调试模式，内部就会显示布局界面。如果应用是native开发的，就会被线条所包裹，从而划分。</p>
</li>
<li><p>因为有一些页面，可能没过几天就需要进行更新、变动。如activity活动页面，倘若让原生进行开发的话，需要花费太长的周期，所以采用H5页面内嵌到webview中，这样就可以大大的提高我们的开发效率。并且很多公司都在采用这样的开发模式。</p>
</li>
<li><p>例如美团，我们可以在美团的app中，对于猫眼电影的这部分业务逻辑，内嵌早已经开发好的webapp了。这样的话，美团就不需要对猫眼这部分的业务逻辑进行重新构建了。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>App</category>
      </categories>
  </entry>
  <entry>
    <title>富文本编辑器、前端导出Excel</title>
    <url>/jackhuang-haohua.github.io/2019/09/10/2020-05-%E5%AF%8C%E6%96%87%E6%9C%AC%E5%92%8C%E5%AF%BC%E5%87%BAexcel/</url>
    <content><![CDATA[<h2 id="富文本"><a href="#富文本" class="headerlink" title="富文本"></a>富文本</h2><blockquote>
<p>当一个HTML文档切换到设计模式时，document暴露 execCommand 方法，该方法允许运行命令来操纵可编辑内容区域的元素。<br>重点就是这个execCommand；</p>
</blockquote>
<h3 id="简单实现富文本编辑"><a href="#简单实现富文本编辑" class="headerlink" title="简单实现富文本编辑"></a>简单实现富文本编辑</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line">&lt;button onclick=<span class="string">"setBold()"</span>&gt;加粗&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">&lt;button onclick="setItalic()"&gt;倾斜&lt;/</span>button&gt;</span><br><span class="line">&lt;button onclick=<span class="string">"setRed()"</span>&gt;加色&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">&lt;div contenteditable style="width:400px;min-height:200px;border:1px solid #ccc"&gt;</span></span><br><span class="line"><span class="regexp">    &lt;img width="150" height="150" src=""/</span>&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">    function setBold()&#123;</span></span><br><span class="line"><span class="regexp">        document.execCommand("bold")</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">    function setItalic()&#123;</span></span><br><span class="line"><span class="regexp">        document.execCommand("italic")</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">    function setRed()&#123;</span></span><br><span class="line"><span class="regexp">        document.execCommand("foreColor",false,"#f60")</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure></div>

<h3 id="wangEditor"><a href="#wangEditor" class="headerlink" title="wangEditor"></a>wangEditor</h3><p>一款轻量级web富文本编辑器，插件；引入后实例化即可；</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line">使用 wangEditor  富文本编辑， </span><br><span class="line">yarn add wangeditor</span><br><span class="line"><span class="keyword">import</span> E <span class="keyword">from</span> <span class="string">"wangeditor"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Edit</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>()&#123;</span><br><span class="line">        <span class="keyword">super</span>()</span><br><span class="line">        <span class="keyword">this</span>.contentRef = createRef()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    initEditor = <span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.editor = <span class="keyword">new</span> E(<span class="keyword">this</span>.contentRef.current) </span><br><span class="line">        <span class="keyword">this</span>.editor.customConfig.onchange =  <span class="function">(<span class="params">html</span>)=&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// html 即变化之后的内容</span></span><br><span class="line">            <span class="comment">// From提交后会自动获取From.item的，name和内容，</span></span><br><span class="line">            <span class="comment">// setFieldsValue就是把name为content的内容设置为html</span></span><br><span class="line">            <span class="keyword">this</span>.formRef.current.setFieldsValue(&#123;</span><br><span class="line">                <span class="string">"content"</span>:html</span><br><span class="line">            &#125;)</span><br><span class="line">            <span class="built_in">console</span>.log();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    componentDidMount()&#123;</span><br><span class="line">        <span class="keyword">this</span>.initEditor()</span><br><span class="line">    &#125;</span><br><span class="line">    render() &#123;</span><br><span class="line">        &lt;Form.Item</span><br><span class="line">            label=<span class="string">"文章内容"</span></span><br><span class="line">            name=<span class="string">"content"</span></span><br><span class="line">            rules=&#123;[</span><br><span class="line">                &#123; <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">'Please input article content!'</span> &#125;,</span><br><span class="line">            ]&#125;</span><br><span class="line">        &gt;</span><br><span class="line">            &lt;div className=<span class="string">"editor"</span> ref=&#123;<span class="keyword">this</span>.contentRef&#125;&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        &lt;<span class="regexp">/Form.Item&gt;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure></div>

<h2 id="导出excel"><a href="#导出excel" class="headerlink" title="导出excel"></a>导出excel</h2><p>理论上是后端完成的，前端也可以导出，但是数据太多有可能会丢失一些，所以数据多的话还是让后端来搞好些：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> XLSX <span class="keyword">from</span> <span class="string">"xlsx"</span></span><br><span class="line"><span class="comment">//导出Excel</span></span><br><span class="line">toExcel = <span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">//真实的项目场景开发中，前端发送ajax,后端传来一个文件地址，前端只需要点击下载就可以实现了。</span></span><br><span class="line">    <span class="keyword">const</span> data = [<span class="built_in">Object</span>.keys(<span class="keyword">this</span>.state.dataSource[<span class="number">0</span>])] <span class="comment">// [[id,title,xxx]]</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="keyword">this</span>.state.dataSource.length;i++)&#123; <span class="comment">// [&#123;id:1,title,XXX&#125;]</span></span><br><span class="line">        <span class="comment">//data.push(Object.values(this.state.dataSource[i])) //[1,"XX",300]</span></span><br><span class="line">        data.push([</span><br><span class="line">            <span class="keyword">this</span>.state.dataSource[i].id,</span><br><span class="line">            <span class="keyword">this</span>.state.dataSource[i].title,</span><br><span class="line">            <span class="keyword">this</span>.state.dataSource[i].author,</span><br><span class="line">            <span class="keyword">this</span>.state.dataSource[i].amount,</span><br><span class="line">            moment(<span class="keyword">this</span>.state.dataSource[i].currentAt).format(<span class="string">"YYYY年MM月DD日 HH:mm:ss"</span>)</span><br><span class="line">        ])</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> ws = XLSX.utils.aoa_to_sheet(data);</span><br><span class="line">    <span class="keyword">const</span> wb = XLSX.utils.book_new();</span><br><span class="line">    <span class="built_in">console</span>.log(ws,wb);</span><br><span class="line">    </span><br><span class="line">    XLSX.utils.book_append_sheet(wb, ws, <span class="string">"SheetJS"</span>);</span><br><span class="line">    XLSX.writeFile(wb, <span class="string">`用户信息表-<span class="subst">$&#123;<span class="keyword">this</span>.state.offset<span class="regexp">/this.state.limited +1&#125;页.xlsx`)</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="regexp">&#125;</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="regexp">&lt;Button onClick=&#123;this.toExcel&#125;&gt;导出Excel表&lt;/</span>Button&gt;</span></span></span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>react</category>
      </categories>
  </entry>
  <entry>
    <title>css动画2d</title>
    <url>/jackhuang-haohua.github.io/2019/01/14/2020-05-%E5%8A%A8%E7%94%BBdemo1/</url>
    <content><![CDATA[<h2 id="明星相册"><a href="#明星相册" class="headerlink" title="明星相册"></a>明星相册</h2><p>算是把各种动画都用上了<br><img src="https://s1.ax1x.com/2020/05/11/YYiNFS.png" alt="YYiNFS.png"></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSS"><figure class="iseeu highlight /css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@charset</span> <span class="string">"utf-8"</span>;</span><br><span class="line"></span><br><span class="line">*&#123;</span><br><span class="line">	<span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">	<span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">figure</span>&#123;</span><br><span class="line">	<span class="attribute">position</span>: relative;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">33.3%</span>;</span><br><span class="line">	<span class="attribute">height</span>: <span class="number">350px</span>;</span><br><span class="line">	<span class="attribute">float</span>: left;</span><br><span class="line">	<span class="comment">/*显示多出的部分，隐藏掉*/</span></span><br><span class="line">	<span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h2</span>,<span class="selector-tag">div</span>,<span class="selector-tag">span</span>,<span class="selector-tag">p</span>&#123;</span><br><span class="line">	<span class="attribute">transition</span>: all <span class="number">3s</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">figure</span> <span class="selector-tag">img</span>&#123;</span><br><span class="line">	<span class="attribute">transition</span>: all <span class="number">0.3s</span>;</span><br><span class="line">	<span class="comment">/*元素的不透明级，默认为1*/</span></span><br><span class="line">	<span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">figure</span><span class="selector-pseudo">:hover</span> <span class="selector-tag">img</span>&#123;</span><br><span class="line">	<span class="attribute">opacity</span>: <span class="number">0.5</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*第一个框格*/</span></span><br><span class="line"><span class="selector-class">.view1</span> <span class="selector-tag">img</span>&#123;</span><br><span class="line">	<span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.view1</span><span class="selector-pseudo">:hover</span> <span class="selector-tag">img</span>&#123;</span><br><span class="line">	<span class="comment">/*X移动50px*/</span></span><br><span class="line">	<span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">50px</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.view1</span> <span class="selector-tag">h2</span>&#123;</span><br><span class="line">	<span class="attribute">position</span>: absolute;</span><br><span class="line">	<span class="attribute">left</span>: <span class="number">50px</span>;</span><br><span class="line">	<span class="attribute">top</span>: <span class="number">60px</span>;</span><br><span class="line">	<span class="attribute">color</span>: white;</span><br><span class="line">	<span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.view1</span><span class="selector-pseudo">:hover</span> <span class="selector-tag">h2</span>&#123;</span><br><span class="line">	<span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">50px</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.view1</span> <span class="selector-class">.pp</span>&#123;</span><br><span class="line">	<span class="attribute">position</span>: absolute;</span><br><span class="line">	<span class="attribute">left</span>: <span class="number">100px</span>;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">	<span class="attribute">background</span>: dodgerblue;</span><br><span class="line">	<span class="attribute">transition</span>: all <span class="number">0.3s</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.view1</span> <span class="selector-class">.p1</span>&#123;</span><br><span class="line">	<span class="attribute">bottom</span>: <span class="number">0px</span>;</span><br><span class="line">	<span class="attribute">transform</span>: <span class="built_in">translateY</span>(<span class="number">300px</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.view1</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.p1</span>&#123;</span><br><span class="line">	<span class="attribute">transform</span>: <span class="built_in">translateY</span>(-<span class="number">200px</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.view1</span> <span class="selector-class">.p2</span>&#123;</span><br><span class="line">	<span class="attribute">top</span>: <span class="number">200px</span>;</span><br><span class="line">	<span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">500px</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.view1</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.p2</span>&#123;</span><br><span class="line">	<span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">0px</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.view1</span> <span class="selector-class">.p3</span>&#123;</span><br><span class="line">	<span class="attribute">top</span>: <span class="number">275px</span>;</span><br><span class="line">	<span class="attribute">transform</span>: <span class="built_in">translateX</span>(-<span class="number">500px</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.view1</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.p3</span>&#123;</span><br><span class="line">	<span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">0px</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*第二个框格*/</span></span><br><span class="line"><span class="selector-class">.view2</span><span class="selector-pseudo">:hover</span> <span class="selector-tag">img</span>&#123;</span><br><span class="line">	<span class="attribute">transform</span>: <span class="built_in">translateX</span>(-<span class="number">20px</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.view2</span> <span class="selector-tag">h2</span>&#123;</span><br><span class="line">	<span class="attribute">position</span>: absolute;</span><br><span class="line">	<span class="attribute">left</span>: <span class="number">20px</span>;</span><br><span class="line">	<span class="attribute">top</span>: <span class="number">60px</span>;</span><br><span class="line">	<span class="attribute">color</span>: white;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.view2</span> <span class="selector-class">.info</span>&#123;</span><br><span class="line">	<span class="attribute">position</span>: absolute;</span><br><span class="line">	<span class="attribute">left</span>: <span class="number">20px</span>;</span><br><span class="line">	<span class="attribute">background</span>: white;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">120px</span>;</span><br><span class="line">	<span class="attribute">transform</span>: <span class="built_in">translateX</span>(-<span class="number">300px</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.view2</span> <span class="selector-class">.info1</span>&#123;</span><br><span class="line">	<span class="attribute">top</span>: <span class="number">100px</span>;</span><br><span class="line">	<span class="attribute">transition</span>: all <span class="number">0.3s</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.view2</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.info1</span>&#123;</span><br><span class="line">	<span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">0px</span>);</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">160px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.view2</span> <span class="selector-class">.info2</span>&#123;</span><br><span class="line">	<span class="attribute">top</span>: <span class="number">150px</span>;</span><br><span class="line">	<span class="attribute">transition</span>: all <span class="number">0.3s</span> <span class="number">0.1s</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.view2</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.info2</span>&#123;</span><br><span class="line">	<span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">0px</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.view2</span> <span class="selector-class">.info3</span>&#123;</span><br><span class="line">	<span class="attribute">top</span>: <span class="number">200px</span>;</span><br><span class="line">	<span class="attribute">transition</span>: all <span class="number">0.3s</span> <span class="number">0.2s</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.view2</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.info3</span>&#123;</span><br><span class="line">	<span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">0px</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*第三个框格*/</span></span><br><span class="line"><span class="selector-class">.view3</span> <span class="selector-tag">img</span>&#123;</span><br><span class="line">	<span class="attribute">transform</span>: <span class="built_in">translateY</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.view3</span><span class="selector-pseudo">:hover</span> <span class="selector-tag">img</span>&#123;</span><br><span class="line">	<span class="attribute">transform</span>: <span class="built_in">translateY</span>(-<span class="number">20px</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.view3</span> <span class="selector-tag">h2</span>&#123;</span><br><span class="line">	<span class="attribute">position</span>: absolute;</span><br><span class="line">	<span class="attribute">top</span>: <span class="number">100px</span>;</span><br><span class="line">	<span class="attribute">left</span>: <span class="number">60px</span>;</span><br><span class="line">	<span class="attribute">color</span>: white;</span><br><span class="line">	<span class="attribute">transform</span>: <span class="built_in">translateY</span>(-<span class="number">200px</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.view3</span><span class="selector-pseudo">:hover</span> <span class="selector-tag">h2</span>&#123;</span><br><span class="line">	<span class="attribute">transform</span>: <span class="built_in">translateY</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.view3</span> <span class="selector-tag">p</span>&#123;</span><br><span class="line">	<span class="attribute">position</span>: absolute;</span><br><span class="line">	<span class="attribute">left</span>: <span class="number">80px</span>;</span><br><span class="line">	<span class="attribute">bottom</span>: <span class="number">0px</span>;</span><br><span class="line">	<span class="attribute">transform</span>: <span class="built_in">translateY</span>(<span class="number">0px</span>);</span><br><span class="line">	<span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.view3</span><span class="selector-pseudo">:hover</span> <span class="selector-tag">p</span>&#123;</span><br><span class="line">	<span class="attribute">transform</span>: <span class="built_in">translateY</span>(-<span class="number">100px</span>);</span><br><span class="line">	<span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*第四个框格*/</span></span><br><span class="line"><span class="selector-class">.view4</span> <span class="selector-tag">h2</span>&#123;</span><br><span class="line">	<span class="attribute">position</span>: absolute;</span><br><span class="line">	<span class="attribute">left</span>: <span class="number">20px</span>;</span><br><span class="line">	<span class="attribute">top</span>: <span class="number">60px</span>;</span><br><span class="line">	<span class="attribute">color</span>: white;</span><br><span class="line">	<span class="attribute">transform</span>: <span class="built_in">translateY</span>(<span class="number">50px</span>);</span><br><span class="line">	<span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.view4</span><span class="selector-pseudo">:hover</span> <span class="selector-tag">h2</span>&#123;</span><br><span class="line">	<span class="attribute">transform</span>: <span class="built_in">translateY</span>(<span class="number">0px</span>);</span><br><span class="line">	<span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.view4</span> <span class="selector-tag">div</span>&#123;</span><br><span class="line">	<span class="attribute">position</span>: absolute;</span><br><span class="line">	<span class="attribute">left</span>: <span class="number">0px</span>;</span><br><span class="line">	<span class="attribute">bottom</span>: -<span class="number">300px</span>;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">140%</span>;</span><br><span class="line">	<span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">	<span class="attribute">background</span>: white;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.view4</span><span class="selector-pseudo">:hover</span> <span class="selector-tag">div</span>&#123;</span><br><span class="line">	<span class="comment">/*设置旋转元素的基点位置*/</span></span><br><span class="line">	<span class="attribute">transform-origin</span>: <span class="number">0%</span> <span class="number">0%</span>;</span><br><span class="line">	<span class="attribute">transform</span>: <span class="built_in">rotate</span>(-<span class="number">20deg</span>);</span><br><span class="line">	<span class="attribute">background</span>: cornflowerblue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.view4</span> <span class="selector-class">.info4</span>&#123;</span><br><span class="line">	<span class="attribute">position</span>: absolute;</span><br><span class="line">	<span class="attribute">right</span>: <span class="number">90px</span>;</span><br><span class="line">	<span class="attribute">bottom</span>: <span class="number">80px</span>;</span><br><span class="line">	<span class="comment">/*显示在最上面 第99页*/</span></span><br><span class="line">	<span class="attribute">z-index</span>: <span class="number">99</span>;</span><br><span class="line">	<span class="attribute">transform</span>: <span class="built_in">translateY</span>(<span class="number">100px</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.view4</span> <span class="selector-class">.info5</span>&#123;</span><br><span class="line">	<span class="attribute">right</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.view4</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.info4</span>&#123;</span><br><span class="line">	<span class="attribute">transform</span>: <span class="built_in">translateY</span>(<span class="number">0px</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*第5个框格*/</span></span><br><span class="line"><span class="selector-class">.view5</span> <span class="selector-tag">h2</span>&#123;</span><br><span class="line">	<span class="attribute">position</span>: absolute;</span><br><span class="line">	<span class="attribute">left</span>: <span class="number">15%</span>;</span><br><span class="line">	<span class="attribute">top</span>: <span class="number">15%</span>;</span><br><span class="line">	<span class="attribute">color</span>: white;</span><br><span class="line">	<span class="attribute">transform</span>: <span class="built_in">translateX</span>(-<span class="number">50px</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.view5</span><span class="selector-pseudo">:hover</span> <span class="selector-tag">h2</span>&#123;</span><br><span class="line">	<span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">0px</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.view5</span> <span class="selector-tag">p</span>&#123;</span><br><span class="line">	<span class="attribute">position</span>: absolute;</span><br><span class="line">	<span class="attribute">left</span>: <span class="number">15%</span>;</span><br><span class="line">	<span class="attribute">top</span>: <span class="number">25%</span>;</span><br><span class="line">	<span class="attribute">color</span>: white;</span><br><span class="line">	<span class="attribute">transform</span>: <span class="built_in">translateY</span>(<span class="number">100px</span>);</span><br><span class="line">	<span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">70%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.view5</span><span class="selector-pseudo">:hover</span> <span class="selector-tag">p</span>&#123;</span><br><span class="line">	<span class="attribute">transform</span>: <span class="built_in">translateY</span>(<span class="number">0px</span>);</span><br><span class="line">	<span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.view5</span> <span class="selector-tag">div</span>&#123;</span><br><span class="line">	<span class="attribute">position</span>: absolute;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">80%</span>;</span><br><span class="line">	<span class="attribute">height</span>: <span class="number">80%</span>;</span><br><span class="line">	<span class="attribute">left</span>: <span class="number">10%</span>;</span><br><span class="line">	<span class="attribute">top</span>: <span class="number">10%</span>;</span><br><span class="line">	<span class="attribute">border</span>: <span class="number">3px</span> solid black;</span><br><span class="line">	<span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">0deg</span>) <span class="built_in">translateY</span>(-<span class="number">400px</span>);</span><br><span class="line">	<span class="attribute">transform-origin</span>: <span class="number">0%</span> <span class="number">0%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.view5</span><span class="selector-pseudo">:hover</span> <span class="selector-tag">div</span>&#123;</span><br><span class="line">	<span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">360deg</span>) <span class="built_in">translateY</span>(<span class="number">0px</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.view6</span><span class="selector-pseudo">:hover</span> <span class="selector-tag">img</span>&#123;</span><br><span class="line">	<span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">1.5</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.view6</span> <span class="selector-tag">h2</span>&#123;</span><br><span class="line">	<span class="attribute">position</span>: absolute;</span><br><span class="line">	<span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">	<span class="attribute">left</span>: <span class="number">45%</span>;</span><br><span class="line">	<span class="comment">/*font 定义字体的粗细</span></span><br><span class="line"><span class="comment">	 normal 正常 等同400</span></span><br><span class="line"><span class="comment">	 bold 粗体 等同700</span></span><br><span class="line"><span class="comment">	 100|200|300|~900 字体粗细的绝对值*/</span></span><br><span class="line">	<span class="attribute">font</span>: <span class="number">900</span>;</span><br><span class="line">	<span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">0deg</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.view6</span><span class="selector-pseudo">:hover</span> <span class="selector-tag">h2</span>&#123;</span><br><span class="line">	<span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">315deg</span>);</span><br><span class="line">	<span class="attribute">transition</span>: all <span class="number">3s</span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*第7个框格*/</span></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.view7</span> <span class="selector-tag">img</span>&#123;</span><br><span class="line">	<span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">1</span>);</span><br><span class="line">	<span class="attribute">transition</span>: all <span class="number">1s</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.view7</span><span class="selector-pseudo">:hover</span> <span class="selector-tag">img</span>&#123;</span><br><span class="line">	<span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">0.8</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*第8个框格*/</span></span><br><span class="line"><span class="selector-class">.view8</span>&#123;</span><br><span class="line">	<span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.view8</span> <span class="selector-class">.top</span>&#123;</span><br><span class="line">	<span class="attribute">position</span>: absolute;</span><br><span class="line">	<span class="attribute">left</span>: <span class="number">125px</span>;</span><br><span class="line">	<span class="attribute">top</span>: <span class="number">70px</span>;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">	<span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">	<span class="attribute">border-top</span>: <span class="number">2px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">	<span class="attribute">border-bottom</span>: <span class="number">2px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.view8</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.top</span>&#123;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">240px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.view8</span> <span class="selector-class">.left</span>&#123;</span><br><span class="line">	<span class="attribute">position</span>: absolute;</span><br><span class="line">	<span class="attribute">left</span>: <span class="number">140px</span>;</span><br><span class="line">	<span class="attribute">top</span>: <span class="number">55px</span>;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">	<span class="attribute">height</span>: <span class="number">0px</span>;</span><br><span class="line">	 <span class="attribute">border-left</span>: <span class="number">2px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">	 <span class="attribute">border-right</span>: <span class="number">2px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.view8</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.left</span>&#123;</span><br><span class="line">	<span class="attribute">height</span>: <span class="number">240px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.view8</span> <span class="selector-tag">p</span>&#123;</span><br><span class="line">	<span class="attribute">color</span>: black;</span><br><span class="line">	<span class="attribute">font-weight</span>: <span class="number">900</span>;</span><br><span class="line">	<span class="attribute">position</span>: absolute;</span><br><span class="line">	<span class="attribute">top</span>: <span class="number">30%</span>;</span><br><span class="line">	<span class="attribute">left</span>: <span class="number">55%</span>;</span><br><span class="line">	<span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">	<span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">	<span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">0deg</span>) <span class="built_in">translateY</span>(<span class="number">500px</span>) <span class="built_in">scale</span>(<span class="number">1</span>);</span><br><span class="line">	<span class="attribute">transition</span>: all <span class="number">3s</span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.view8</span><span class="selector-pseudo">:hover</span> <span class="selector-tag">p</span>&#123;</span><br><span class="line">	<span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">	<span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">360deg</span>) <span class="built_in">translateY</span>(<span class="number">0px</span>) <span class="built_in">scale</span>(<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*第9个框格*/</span></span><br><span class="line"><span class="selector-class">.view9</span> <span class="selector-tag">img</span>&#123;</span><br><span class="line">	<span class="attribute">position</span>: absolute;</span><br><span class="line">	<span class="attribute">transition</span>: all <span class="number">3s</span>;</span><br><span class="line">	<span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">0deg</span>) <span class="built_in">scale</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.view9</span><span class="selector-pseudo">:hover</span> <span class="selector-tag">img</span>&#123;</span><br><span class="line">	<span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">10deg</span>) <span class="built_in">scale</span>(<span class="number">1.1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*音乐按钮设置CSS*/</span></span><br><span class="line"><span class="selector-class">.musicbtn</span>&#123;</span><br><span class="line">	<span class="attribute">position</span>:absolute;</span><br><span class="line">	<span class="attribute">right</span>:<span class="number">20px</span>;</span><br><span class="line">	<span class="attribute">top</span>:<span class="number">20px</span>;</span><br><span class="line">	<span class="attribute">width</span>:<span class="number">40px</span>;</span><br><span class="line">	<span class="attribute">height</span>:<span class="number">40px</span>;</span><br><span class="line">	<span class="attribute">animation</span>:xuanzhuan <span class="number">2s</span> infinite;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@keyframes</span> xuanzhuan&#123;</span><br><span class="line">	<span class="selector-tag">from</span>&#123;&#125;</span><br><span class="line">	<span class="selector-tag">to</span>&#123;<span class="attribute">transform</span>:<span class="built_in">rotate</span>(<span class="number">360deg</span>);</span><br><span class="line">	 <span class="attribute">-webkit-transform</span>:<span class="built_in">rotate</span>(<span class="number">360deg</span>);&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="哆啦A梦"><a href="#哆啦A梦" class="headerlink" title="哆啦A梦"></a>哆啦A梦</h2><p>除了大雄的背景，其他都是html+css做的<br><img src="https://s1.ax1x.com/2020/05/11/YYSz3n.gif" alt="YYSz3n.gif"><br>大雄运动的代码：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSS"><figure class="iseeu highlight /css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">165px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotateY</span>(<span class="number">180deg</span>);</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">animation</span>: <span class="number">10s</span> daxiong infinite linear;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@keyframes</span> daxiong &#123;</span><br><span class="line">    0% &#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">rotateY</span>(<span class="number">180deg</span>);</span><br><span class="line">        <span class="attribute">top</span>: <span class="number">50px</span>;</span><br><span class="line">        <span class="attribute">left</span>: <span class="number">50px</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    15% &#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">rotateY</span>(<span class="number">180deg</span>);</span><br><span class="line">        <span class="attribute">top</span>: <span class="number">100px</span>;</span><br><span class="line">        <span class="attribute">left</span>: <span class="number">500px</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    40% &#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">rotateY</span>(<span class="number">180deg</span>);</span><br><span class="line">        <span class="attribute">top</span>: <span class="number">150px</span>;</span><br><span class="line">        <span class="attribute">left</span>: <span class="number">1100px</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    45% &#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">rotateY</span>(<span class="number">90deg</span>);</span><br><span class="line">        <span class="attribute">top</span>: <span class="number">150px</span>;</span><br><span class="line">        <span class="attribute">left</span>: <span class="number">1100px</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    50% &#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">rotateY</span>(<span class="number">0deg</span>);</span><br><span class="line">        <span class="attribute">top</span>: <span class="number">180px</span>;</span><br><span class="line">        <span class="attribute">left</span>: <span class="number">1080px</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    75% &#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">rotateY</span>(<span class="number">0deg</span>);</span><br><span class="line">        <span class="attribute">top</span>: <span class="number">80px</span>;</span><br><span class="line">        <span class="attribute">left</span>: <span class="number">500px</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    100% &#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">rotateY</span>(<span class="number">180deg</span>);</span><br><span class="line">        <span class="attribute">top</span>: <span class="number">50px</span>;</span><br><span class="line">        <span class="attribute">left</span>: <span class="number">50px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="太极"><a href="#太极" class="headerlink" title="太极"></a>太极</h2><p>一个会旋转的太极，因为gif太大，就不放了<br><img src="https://s1.ax1x.com/2020/05/11/YYpZC9.png" alt="YYpZC9.png"></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSS"><figure class="iseeu highlight /css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* html */</span></span><br><span class="line">&lt;div class="taiji"&gt;</span><br><span class="line">    &lt;div class="box1"&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class="box2"&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class="box3"&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* css */</span></span><br><span class="line"><span class="selector-tag">html</span>,<span class="selector-tag">body</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">245</span>, <span class="number">245</span>, <span class="number">245</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.taiji</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">    <span class="attribute">padding-top</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box1</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>);</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">200px</span> solid black;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">transform-style</span>: preserve-<span class="number">3</span>d;</span><br><span class="line">    <span class="attribute">animation</span>: action <span class="number">5s</span> linear infinite;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box2</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">60px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">60px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>);</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">70px</span> solid black;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">transform-style</span>: preserve-<span class="number">3</span>d;</span><br><span class="line">    <span class="attribute">animation</span>: action <span class="number">5s</span> linear infinite;</span><br><span class="line">    <span class="attribute">transform-origin</span>: <span class="number">0%</span> <span class="number">50%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box3</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">60px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">60px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">70px</span> solid <span class="built_in">rgb</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>);</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0px</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">transform-style</span>: preserve-<span class="number">3</span>d;</span><br><span class="line">    <span class="attribute">animation</span>: action <span class="number">5s</span> linear infinite;</span><br><span class="line">    <span class="attribute">transform-origin</span>: <span class="number">100%</span> <span class="number">50%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@keyframes</span> action&#123;</span><br><span class="line">    0%&#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">rotateZ</span>(<span class="number">0deg</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    100%&#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">rotateZ</span>(<span class="number">360deg</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="摩天轮"><a href="#摩天轮" class="headerlink" title="摩天轮"></a>摩天轮</h2><p>子元素反向旋转，可以抵消父元素的旋转<br><img src="https://s1.ax1x.com/2020/05/11/YYpnjx.gif" alt="YYpnjx.gif"></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSS"><figure class="iseeu highlight /css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">html</span>,</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.circle</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">768px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">768px</span>;</span><br><span class="line">    <span class="attribute">position</span>: fixed;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">margin</span>: auto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@keyframes</span> action1 &#123;</span><br><span class="line">    0% &#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">rotateZ</span>(<span class="number">0deg</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    100% &#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">rotateZ</span>(<span class="number">360deg</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.pic1</span> &#123;</span><br><span class="line">    <span class="attribute">animation</span>: action1 <span class="number">20s</span> linear infinite;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 第一张图 */</span></span><br><span class="line"><span class="selector-class">.pic2</span> &#123;</span><br><span class="line">    <span class="attribute">transform-origin</span>: <span class="number">50%</span> top;</span><br><span class="line">    <span class="attribute">animation</span>: xuan <span class="number">20s</span> linear infinite;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.pic22</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">384px</span>;</span><br><span class="line">    <span class="attribute">margin-left</span>: -<span class="number">55px</span>;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">0px</span>;</span><br><span class="line">    <span class="attribute">transform-origin</span>: <span class="number">50%</span> <span class="number">344px</span>;</span><br><span class="line">    <span class="attribute">animation</span>: xuan-reverse <span class="number">20s</span> linear infinite;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@keyframes</span> xuan &#123;</span><br><span class="line">    <span class="selector-tag">from</span> &#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">1turn</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@keyframes</span> xuan-reverse &#123;</span><br><span class="line">    <span class="selector-tag">to</span> &#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">1turn</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="自转公转"><a href="#自转公转" class="headerlink" title="自转公转"></a>自转公转</h2><p><img src="https://s1.ax1x.com/2020/05/11/YYpvVO.gif" alt="YYpvVO.gif"><br>一下为一部分代码：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSS"><figure class="iseeu highlight /css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">html</span>,</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">url</span>(../images/自转公转/PIXNIO-<span class="number">1761271</span>.jpg) no-repeat;</span><br><span class="line">    <span class="attribute">background-size</span>: <span class="number">100%</span>, <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.all</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">1000px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">250px</span> auto;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@keyframes</span> xuan &#123;</span><br><span class="line">    <span class="selector-tag">from</span> &#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">1turn</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.sun</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">255</span>, <span class="number">157</span>, <span class="number">100</span>);</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0px</span> <span class="number">0px</span> <span class="number">20px</span> <span class="built_in">rgb</span>(<span class="number">255</span>, <span class="number">157</span>, <span class="number">100</span>);</span><br><span class="line">    <span class="attribute">animation</span>: xuan <span class="number">20s</span> linear infinite;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.earth</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">76</span>, <span class="number">141</span>, <span class="number">214</span>);</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0px</span> <span class="number">0px</span> <span class="number">10px</span> <span class="built_in">rgb</span>(<span class="number">76</span>, <span class="number">141</span>, <span class="number">214</span>);</span><br><span class="line">    <span class="attribute">margin-left</span>: -<span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">animation</span>: xuan <span class="number">5s</span> linear infinite;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.sun_border1</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">520px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">520px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="built_in">rgb</span>(<span class="number">114</span>, <span class="number">114</span>, <span class="number">114</span>);</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">margin-top</span>: -<span class="number">260px</span>;</span><br><span class="line">    <span class="attribute">margin-left</span>: -<span class="number">260px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.moon</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">197</span>, <span class="number">220</span>, <span class="number">247</span>);</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0px</span> <span class="number">0px</span> <span class="number">10px</span> <span class="built_in">rgb</span>(<span class="number">197</span>, <span class="number">220</span>, <span class="number">247</span>);</span><br><span class="line">    <span class="attribute">margin-left</span>: -<span class="number">25px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>css</category>
      </categories>
  </entry>
  <entry>
    <title>css动画3d</title>
    <url>/jackhuang-haohua.github.io/2019/01/17/2020-05-%E5%8A%A8%E7%94%BBdemo2/</url>
    <content><![CDATA[<h2 id="3d旋转相册"><a href="#3d旋转相册" class="headerlink" title="3d旋转相册"></a>3d旋转相册</h2><p>做的时候总感觉很low，没想到还挺难的…用AE模板好看又快；<br><img src="https://s1.ax1x.com/2020/05/11/YYFN0x.gif" alt="YYFN0x.gif"></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSS"><figure class="iseeu highlight /css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* html */</span></span><br><span class="line">&lt;<span class="selector-tag">body</span>&gt;</span><br><span class="line">    &lt;div class="pci_fixed"&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;<span class="selector-tag">section</span>&gt;</span><br><span class="line">        &lt;img src="images/3D相册/images1.jfif" alt="" class="pic1"&gt;</span><br><span class="line">        &lt;img src="images/3D相册/images2.jfif" alt="" class="pic2"&gt;</span><br><span class="line">        &lt;img src="images/3D相册/images3.jfif" alt="" class="pic3"&gt;</span><br><span class="line">        &lt;img src="images/3D相册/images4.jfif" alt="" class="pic4"&gt;</span><br><span class="line">        &lt;img src="images/3D相册/images5.jfif" alt="" class="pic5"&gt;</span><br><span class="line">        &lt;img src="images/3D相册/images6.jfif" alt="" class="pic6"&gt;</span><br><span class="line">        &lt;img src="images/3D相册/images7.jfif" alt="" class="pic7"&gt;</span><br><span class="line">        &lt;img src="images/3D相册/images8.jfif" alt="" class="pic8"&gt;</span><br><span class="line">        &lt;img src="images/3D相册/images9.jfif" alt="" class="pic9"&gt;</span><br><span class="line">        &lt;img src="images/3D相册/images10.jfif" alt="" class="pic10"&gt;</span><br><span class="line">    &lt;/section&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* css */</span></span><br><span class="line"><span class="selector-tag">html</span>,</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">url</span>(../images/<span class="number">3</span>D相册/背景.jpg);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">section</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">150px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">150px</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">margin</span>: auto;</span><br><span class="line">    <span class="attribute">transform-style</span>: preserve-<span class="number">3</span>d;</span><br><span class="line">    <span class="attribute">animation</span>: action <span class="number">20s</span> infinite linear;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">url</span>(../images/<span class="number">3</span>D相册/中间.jfif) no-repeat center top;</span><br><span class="line">    <span class="attribute">background-size</span>: <span class="number">100%</span> <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@keyframes</span> action &#123;</span><br><span class="line">    0% &#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">rotateY</span>(<span class="number">0deg</span>) <span class="built_in">rotateX</span>(<span class="number">15deg</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    100% &#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">rotateY</span>(<span class="number">360deg</span>) <span class="built_in">rotateX</span>(<span class="number">15deg</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">section</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">150px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">150px</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">margin</span>: auto;</span><br><span class="line">    <span class="attribute">transform-origin</span>: center center -<span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">background</span>: chartreuse;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.pic1</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateZ</span>(<span class="number">300px</span>) <span class="built_in">rotateY</span>(<span class="number">36deg</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.pic2</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateZ</span>(<span class="number">300px</span>) <span class="built_in">rotateY</span>(<span class="number">72deg</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.pic3</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateZ</span>(<span class="number">300px</span>) <span class="built_in">rotateY</span>(<span class="number">108deg</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.pic4</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateZ</span>(<span class="number">300px</span>) <span class="built_in">rotateY</span>(<span class="number">144deg</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.pic5</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateZ</span>(<span class="number">300px</span>) <span class="built_in">rotateY</span>(<span class="number">180deg</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.pic6</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateZ</span>(<span class="number">300px</span>) <span class="built_in">rotateY</span>(<span class="number">216deg</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.pic7</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateZ</span>(<span class="number">300px</span>) <span class="built_in">rotateY</span>(<span class="number">252deg</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.pic8</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateZ</span>(<span class="number">300px</span>) <span class="built_in">rotateY</span>(<span class="number">288deg</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.pic9</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateZ</span>(<span class="number">300px</span>) <span class="built_in">rotateY</span>(<span class="number">324deg</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.pic10</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateZ</span>(<span class="number">300px</span>) <span class="built_in">rotateY</span>(<span class="number">360deg</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="3d公转自转"><a href="#3d公转自转" class="headerlink" title="3d公转自转"></a>3d公转自转</h2><p>为了做一个球，居然要用到这么多div<br><img src="https://s1.ax1x.com/2020/05/11/YYFfN8.gif" alt="YYFfN8.gif"></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSS"><figure class="iseeu highlight /css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* html */</span></span><br><span class="line">&lt;<span class="selector-tag">body</span>&gt;</span><br><span class="line">    &lt;div class="boxC"&gt;</span><br><span class="line">        &lt;div class="box1"&gt;&lt;/div&gt;</span><br><span class="line">        &lt;div class="box2"&gt;&lt;/div&gt;</span><br><span class="line">        &lt;div class="box3"&gt;&lt;/div&gt;</span><br><span class="line">        &lt;div class="box4"&gt;&lt;/div&gt;</span><br><span class="line">        &lt;div class="box5"&gt;&lt;/div&gt;</span><br><span class="line">        &lt;div class="box6"&gt;&lt;/div&gt;</span><br><span class="line">        &lt;div class="box7"&gt;&lt;/div&gt;</span><br><span class="line">        &lt;div class="box8"&gt;&lt;/div&gt;</span><br><span class="line">        &lt;div class="box9"&gt;&lt;/div&gt;</span><br><span class="line">        &lt;div class="box10"&gt;&lt;/div&gt;</span><br><span class="line">        &lt;div class="box11"&gt;&lt;/div&gt;</span><br><span class="line">        &lt;div class="box12"&gt;&lt;/div&gt;</span><br><span class="line">        &lt;div class="box13"&gt;&lt;/div&gt;</span><br><span class="line">        &lt;div class="box14"&gt;&lt;/div&gt;</span><br><span class="line">        &lt;div class="box15"&gt;&lt;/div&gt;</span><br><span class="line">        &lt;div class="box16"&gt;&lt;/div&gt;</span><br><span class="line">        &lt;div class="box17"&gt;&lt;/div&gt;</span><br><span class="line">        &lt;div class="box18"&gt;&lt;/div&gt;</span><br><span class="line">        &lt;div class="box19"&gt;&lt;/div&gt;</span><br><span class="line">        &lt;div class="box20"&gt;&lt;/div&gt;</span><br><span class="line">        &lt;div class="box21"&gt;&lt;/div&gt;</span><br><span class="line">        &lt;div class="box22"&gt;&lt;/div&gt;</span><br><span class="line">        &lt;div class="box23"&gt;&lt;/div&gt;</span><br><span class="line">        &lt;div class="box24"&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;div class="border1"&gt;&lt;/div&gt;</span><br><span class="line">        &lt;div class="border2"&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;section class="earth_back"&gt;</span><br><span class="line">            &lt;section class="earth"&gt;</span><br><span class="line">                &lt;div class="box1"&gt;&lt;/div&gt;</span><br><span class="line">                &lt;div class="box2"&gt;&lt;/div&gt;</span><br><span class="line">                &lt;div class="box3"&gt;&lt;/div&gt;</span><br><span class="line">                &lt;div class="box4"&gt;&lt;/div&gt;</span><br><span class="line">                &lt;div class="box5"&gt;&lt;/div&gt;</span><br><span class="line">                &lt;div class="box6"&gt;&lt;/div&gt;</span><br><span class="line">                &lt;div class="box7"&gt;&lt;/div&gt;</span><br><span class="line">                &lt;div class="box8"&gt;&lt;/div&gt;</span><br><span class="line">                &lt;div class="box9"&gt;&lt;/div&gt;</span><br><span class="line">                &lt;div class="box10"&gt;&lt;/div&gt;</span><br><span class="line">                &lt;div class="box11"&gt;&lt;/div&gt;</span><br><span class="line">                &lt;div class="box12"&gt;&lt;/div&gt;</span><br><span class="line">                &lt;div class="box13"&gt;&lt;/div&gt;</span><br><span class="line">                &lt;div class="box14"&gt;&lt;/div&gt;</span><br><span class="line">                &lt;div class="box15"&gt;&lt;/div&gt;</span><br><span class="line">                &lt;div class="box16"&gt;&lt;/div&gt;</span><br><span class="line">                &lt;div class="box17"&gt;&lt;/div&gt;</span><br><span class="line">                &lt;div class="box18"&gt;&lt;/div&gt;</span><br><span class="line">                &lt;div class="box19"&gt;&lt;/div&gt;</span><br><span class="line">                &lt;div class="box20"&gt;&lt;/div&gt;</span><br><span class="line">                &lt;div class="box21"&gt;&lt;/div&gt;</span><br><span class="line">                &lt;div class="box22"&gt;&lt;/div&gt;</span><br><span class="line">                &lt;div class="box23"&gt;&lt;/div&gt;</span><br><span class="line">                &lt;div class="box24"&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">                &lt;section class="moon"&gt;</span><br><span class="line">                    &lt;div class="box1"&gt;&lt;/div&gt;</span><br><span class="line">                    &lt;div class="box2"&gt;&lt;/div&gt;</span><br><span class="line">                    &lt;div class="box3"&gt;&lt;/div&gt;</span><br><span class="line">                    &lt;div class="box4"&gt;&lt;/div&gt;</span><br><span class="line">                    &lt;div class="box5"&gt;&lt;/div&gt;</span><br><span class="line">                    &lt;div class="box6"&gt;&lt;/div&gt;</span><br><span class="line">                    &lt;div class="box7"&gt;&lt;/div&gt;</span><br><span class="line">                    &lt;div class="box8"&gt;&lt;/div&gt;</span><br><span class="line">                    &lt;div class="box9"&gt;&lt;/div&gt;</span><br><span class="line">                    &lt;div class="box10"&gt;&lt;/div&gt;</span><br><span class="line">                    &lt;div class="box11"&gt;&lt;/div&gt;</span><br><span class="line">                    &lt;div class="box12"&gt;&lt;/div&gt;</span><br><span class="line">                    &lt;div class="box13"&gt;&lt;/div&gt;</span><br><span class="line">                    &lt;div class="box14"&gt;&lt;/div&gt;</span><br><span class="line">                    &lt;div class="box15"&gt;&lt;/div&gt;</span><br><span class="line">                    &lt;div class="box16"&gt;&lt;/div&gt;</span><br><span class="line">                    &lt;div class="box17"&gt;&lt;/div&gt;</span><br><span class="line">                    &lt;div class="box18"&gt;&lt;/div&gt;</span><br><span class="line">                    &lt;div class="box19"&gt;&lt;/div&gt;</span><br><span class="line">                    &lt;div class="box20"&gt;&lt;/div&gt;</span><br><span class="line">                    &lt;div class="box21"&gt;&lt;/div&gt;</span><br><span class="line">                    &lt;div class="box22"&gt;&lt;/div&gt;</span><br><span class="line">                    &lt;div class="box23"&gt;&lt;/div&gt;</span><br><span class="line">                    &lt;div class="box24"&gt;&lt;/div&gt;</span><br><span class="line">                &lt;/section&gt;</span><br><span class="line">            &lt;/section&gt;</span><br><span class="line">        &lt;/section&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* css */</span></span><br><span class="line">* &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">html</span>,</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">url</span>(../images/自转公转/PIXNIO-<span class="number">1761271</span>.jpg) no-repeat;</span><br><span class="line">    <span class="attribute">background-size</span>: <span class="number">100%</span>, <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.boxC</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">1000px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">600px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">50px</span> auto;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">transform-style</span>: preserve-<span class="number">3</span>d;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotateX</span>(<span class="number">30deg</span>) <span class="built_in">rotateZ</span>(-<span class="number">30deg</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.boxC</span> <span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">3px</span> solid <span class="built_in">rgb</span>(<span class="number">255</span>, <span class="number">201</span>, <span class="number">54</span>);</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0px</span> <span class="number">0px</span> <span class="number">20px</span> <span class="built_in">rgb</span>(<span class="number">255</span>, <span class="number">201</span>, <span class="number">54</span>);</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">margin</span>: auto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box1</span> &#123;</span><br><span class="line">    <span class="attribute">transform-style</span>: preserve-<span class="number">3</span>d;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotateX</span>(<span class="number">30deg</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box2</span> &#123;</span><br><span class="line">    <span class="attribute">transform-style</span>: preserve-<span class="number">3</span>d;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotateX</span>(<span class="number">60deg</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box3</span> &#123;</span><br><span class="line">    <span class="attribute">transform-style</span>: preserve-<span class="number">3</span>d;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotateX</span>(<span class="number">90deg</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box4</span> &#123;</span><br><span class="line">    <span class="attribute">transform-style</span>: preserve-<span class="number">3</span>d;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotateX</span>(<span class="number">120deg</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box5</span> &#123;</span><br><span class="line">    <span class="attribute">transform-style</span>: preserve-<span class="number">3</span>d;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotateX</span>(<span class="number">150deg</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box6</span> &#123;</span><br><span class="line">    <span class="attribute">transform-style</span>: preserve-<span class="number">3</span>d;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotateX</span>(<span class="number">180deg</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box7</span> &#123;</span><br><span class="line">    <span class="attribute">transform-style</span>: preserve-<span class="number">3</span>d;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotateX</span>(<span class="number">210deg</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box8</span> &#123;</span><br><span class="line">    <span class="attribute">transform-style</span>: preserve-<span class="number">3</span>d;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotateX</span>(<span class="number">240deg</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box9</span> &#123;</span><br><span class="line">    <span class="attribute">transform-style</span>: preserve-<span class="number">3</span>d;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotateX</span>(<span class="number">270deg</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box10</span> &#123;</span><br><span class="line">    <span class="attribute">transform-style</span>: preserve-<span class="number">3</span>d;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotateX</span>(<span class="number">300deg</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box11</span> &#123;</span><br><span class="line">    <span class="attribute">transform-style</span>: preserve-<span class="number">3</span>d;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotateX</span>(<span class="number">330deg</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box12</span> &#123;</span><br><span class="line">    <span class="attribute">transform-style</span>: preserve-<span class="number">3</span>d;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotateX</span>(<span class="number">360deg</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box13</span> &#123;</span><br><span class="line">    <span class="attribute">transform-style</span>: preserve-<span class="number">3</span>d;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotateY</span>(<span class="number">30deg</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box14</span> &#123;</span><br><span class="line">    <span class="attribute">transform-style</span>: preserve-<span class="number">3</span>d;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotateY</span>(<span class="number">60deg</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box15</span> &#123;</span><br><span class="line">    <span class="attribute">transform-style</span>: preserve-<span class="number">3</span>d;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotateY</span>(<span class="number">90deg</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box16</span> &#123;</span><br><span class="line">    <span class="attribute">transform-style</span>: preserve-<span class="number">3</span>d;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotateY</span>(<span class="number">120deg</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box17</span> &#123;</span><br><span class="line">    <span class="attribute">transform-style</span>: preserve-<span class="number">3</span>d;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotateY</span>(<span class="number">150deg</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box18</span> &#123;</span><br><span class="line">    <span class="attribute">transform-style</span>: preserve-<span class="number">3</span>d;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotateY</span>(<span class="number">180deg</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box19</span> &#123;</span><br><span class="line">    <span class="attribute">transform-style</span>: preserve-<span class="number">3</span>d;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotateY</span>(<span class="number">210deg</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box20</span> &#123;</span><br><span class="line">    <span class="attribute">transform-style</span>: preserve-<span class="number">3</span>d;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotateY</span>(<span class="number">240deg</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box21</span> &#123;</span><br><span class="line">    <span class="attribute">transform-style</span>: preserve-<span class="number">3</span>d;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotateY</span>(<span class="number">270deg</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box22</span> &#123;</span><br><span class="line">    <span class="attribute">transform-style</span>: preserve-<span class="number">3</span>d;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotateY</span>(<span class="number">300deg</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box23</span> &#123;</span><br><span class="line">    <span class="attribute">transform-style</span>: preserve-<span class="number">3</span>d;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotateY</span>(<span class="number">330deg</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box24</span> &#123;</span><br><span class="line">    <span class="attribute">transform-style</span>: preserve-<span class="number">3</span>d;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotateY</span>(<span class="number">360deg</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.boxC</span> <span class="selector-class">.border1</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">500px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">2px</span> solid <span class="built_in">rgb</span>(<span class="number">145</span>, <span class="number">186</span>, <span class="number">219</span>);</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0px</span> <span class="number">0px</span> <span class="number">10px</span> <span class="built_in">rgb</span>(<span class="number">145</span>, <span class="number">186</span>, <span class="number">219</span>);</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">transform-style</span>: preserve-<span class="number">3</span>d;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotateX</span>(<span class="number">30deg</span>) <span class="built_in">rotateZ</span>(-<span class="number">30deg</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.boxC</span> <span class="selector-class">.earth_back</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">80px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">80px</span>;</span><br><span class="line">    <span class="attribute">transform-style</span>: preserve-<span class="number">3</span>d;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotateX</span>(<span class="number">30deg</span>) <span class="built_in">rotateZ</span>(-<span class="number">30deg</span>);</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">margin</span>: auto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.boxC</span> <span class="selector-class">.earth</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">80px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">80px</span>;</span><br><span class="line">    <span class="attribute">transform-style</span>: preserve-<span class="number">3</span>d;</span><br><span class="line">    <span class="attribute">animation</span>: earth <span class="number">20s</span> linear infinite;</span><br><span class="line">    <span class="attribute">transform-origin</span>: -<span class="number">210px</span> <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">250px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@keyframes</span> earth &#123;</span><br><span class="line">    <span class="selector-tag">from</span> &#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">1turn</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.earth</span> <span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">80px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">80px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="built_in">rgb</span>(<span class="number">47</span>, <span class="number">116</span>, <span class="number">180</span>);</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0px</span> <span class="number">0px</span> <span class="number">3px</span> <span class="built_in">rgb</span>(<span class="number">47</span>, <span class="number">116</span>, <span class="number">180</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.moon</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">transform-style</span>: preserve-<span class="number">3</span>d;</span><br><span class="line">    <span class="attribute">animation</span>: earth <span class="number">5s</span> linear infinite;</span><br><span class="line">    <span class="attribute">transform-origin</span>: -<span class="number">50px</span> <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">margin</span>: auto;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">90px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.moon</span> <span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="built_in">rgb</span>(<span class="number">186</span>, <span class="number">209</span>, <span class="number">216</span>);</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0px</span> <span class="number">0px</span> <span class="number">1px</span> <span class="built_in">rgb</span>(<span class="number">186</span>, <span class="number">209</span>, <span class="number">216</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.boxC</span> <span class="selector-class">.border2</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">800px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">800px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">2px</span> solid <span class="built_in">rgb</span>(<span class="number">145</span>, <span class="number">186</span>, <span class="number">219</span>);</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0px</span> <span class="number">0px</span> <span class="number">10px</span> <span class="built_in">rgb</span>(<span class="number">145</span>, <span class="number">186</span>, <span class="number">219</span>);</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">transform-style</span>: preserve-<span class="number">3</span>d;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotateX</span>(<span class="number">30deg</span>) <span class="built_in">rotateZ</span>(-<span class="number">30deg</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="旋转的正方体"><a href="#旋转的正方体" class="headerlink" title="旋转的正方体"></a>旋转的正方体</h2><p>主要是用到transform 3d的z轴：<br><img src="https://s1.ax1x.com/2020/05/11/YYke8e.gif" alt="YYke8e.gif"></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSS"><figure class="iseeu highlight /css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* html */</span></span><br><span class="line">&lt;<span class="selector-tag">body</span>&gt;</span><br><span class="line">    &lt;div class="box"&gt;</span><br><span class="line">        &lt;div class="box1"&gt;正&lt;/div&gt;</span><br><span class="line">        &lt;div class="box2"&gt;反&lt;/div&gt;</span><br><span class="line">        &lt;div class="box3"&gt;下&lt;/div&gt;</span><br><span class="line">        &lt;div class="box4"&gt;上&lt;/div&gt;</span><br><span class="line">        &lt;div class="box5"&gt;左&lt;/div&gt;</span><br><span class="line">        &lt;div class="box6"&gt;右&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* css */</span></span><br><span class="line"><span class="selector-tag">html</span>,</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">500px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">10px</span> auto;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">transform-style</span>: preserve-<span class="number">3</span>d;</span><br><span class="line">    <span class="attribute">animation</span>: action <span class="number">30s</span> linear infinite;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box</span> <span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">margin</span>: auto;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">color</span>: white;</span><br><span class="line">    <span class="attribute">font-weight</span>: bold;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box1</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: coral;</span><br><span class="line">    <span class="attribute">transform-style</span>: preserve-<span class="number">3</span>d;</span><br><span class="line">    <span class="attribute">transform-origin</span>: bottom;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateZ</span>(<span class="number">100px</span>);</span><br><span class="line">    <span class="attribute">transition</span>: <span class="number">1s</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box2</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">rgb</span>(<span class="number">255</span>, <span class="number">185</span>, <span class="number">80</span>);</span><br><span class="line">    <span class="attribute">transform-style</span>: preserve-<span class="number">3</span>d;</span><br><span class="line">    <span class="attribute">transform-origin</span>: bottom;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateZ</span>(-<span class="number">100px</span>) <span class="built_in">rotateY</span>(<span class="number">180deg</span>);</span><br><span class="line">    <span class="attribute">transition</span>: <span class="number">1s</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box3</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">rgb</span>(<span class="number">243</span>, <span class="number">255</span>, <span class="number">80</span>);</span><br><span class="line">    <span class="attribute">transform-style</span>: preserve-<span class="number">3</span>d;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateY</span>(<span class="number">100px</span>) <span class="built_in">rotateX</span>(<span class="number">90deg</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box4</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">rgb</span>(<span class="number">144</span>, <span class="number">255</span>, <span class="number">80</span>);</span><br><span class="line">    <span class="attribute">transform-style</span>: preserve-<span class="number">3</span>d;</span><br><span class="line">    <span class="attribute">transform-origin</span>: bottom center;</span><br><span class="line">    <span class="attribute">transition</span>: <span class="number">1s</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateY</span>(-<span class="number">200px</span>) <span class="built_in">translateZ</span>(-<span class="number">100px</span>) <span class="built_in">rotateX</span>(-<span class="number">90deg</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box5</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">80</span>, <span class="number">255</span>, <span class="number">217</span>, <span class="number">0.8</span>);</span><br><span class="line">    <span class="attribute">transform-style</span>: preserve-<span class="number">3</span>d;</span><br><span class="line">    <span class="attribute">transform-origin</span>: bottom;</span><br><span class="line">    <span class="attribute">transition</span>: <span class="number">1s</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateX</span>(-<span class="number">100px</span>) <span class="built_in">rotateY</span>(<span class="number">90deg</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box6</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">80</span>, <span class="number">127</span>, <span class="number">255</span>, <span class="number">0.8</span>);</span><br><span class="line">    <span class="attribute">transform-style</span>: preserve-<span class="number">3</span>d;</span><br><span class="line">    <span class="attribute">transform-origin</span>: bottom;</span><br><span class="line">    <span class="attribute">transition</span>: <span class="number">1s</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">100px</span>) <span class="built_in">rotateY</span>(<span class="number">90deg</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@keyframes</span> action &#123;</span><br><span class="line">    0% &#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">rotateY</span>(<span class="number">0deg</span>) <span class="built_in">rotateX</span>(<span class="number">0deg</span>) <span class="built_in">rotateZ</span>(<span class="number">0deg</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    25% &#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">rotateY</span>(<span class="number">180deg</span>) <span class="built_in">rotateX</span>(<span class="number">180deg</span>) <span class="built_in">rotateZ</span>(<span class="number">180deg</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    50% &#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">rotateY</span>(<span class="number">360deg</span>) <span class="built_in">rotateX</span>(<span class="number">360deg</span>) <span class="built_in">rotateZ</span>(<span class="number">360deg</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    100% &#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">rotateY</span>(<span class="number">0deg</span>) <span class="built_in">rotateX</span>(<span class="number">0deg</span>) <span class="built_in">rotateZ</span>(<span class="number">0deg</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="更复杂的旋转正方体"><a href="#更复杂的旋转正方体" class="headerlink" title="更复杂的旋转正方体"></a>更复杂的旋转正方体</h2><p>其实也没多少复杂<br><img src="https://s1.ax1x.com/2020/05/11/YYk6GF.gif" alt="YYk6GF.gif"></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSS"><figure class="iseeu highlight /css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* html */</span></span><br><span class="line">&lt;<span class="selector-tag">body</span>&gt;</span><br><span class="line">    &lt;div class="boxA"&gt;</span><br><span class="line">        &lt;div class="box1"&gt;&lt;/div&gt;</span><br><span class="line">        &lt;div class="box2"&gt;&lt;/div&gt;</span><br><span class="line">        &lt;div class="box3"&gt;&lt;/div&gt;</span><br><span class="line">        &lt;div class="box4"&gt;&lt;/div&gt;</span><br><span class="line">        &lt;div class="box5"&gt;&lt;/div&gt;</span><br><span class="line">        &lt;div class="box6"&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;div class="boxB"&gt;</span><br><span class="line">            &lt;img src="images/立方体/img1.jpg" alt="" class="pic1"&gt;</span><br><span class="line">            &lt;img src="images/立方体/img2.jpeg" alt="" class="pic2"&gt;</span><br><span class="line">            &lt;img src="images/立方体/img3.jpg" alt="" class="pic3"&gt;</span><br><span class="line">            &lt;img src="images/立方体/img4.jpg" alt="" class="pic4"&gt;</span><br><span class="line">            &lt;img src="images/立方体/img5.jpg" alt="" class="pic5"&gt;</span><br><span class="line">            &lt;img src="images/立方体/img6.jpg" alt="" class="pic6"&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;div class="boxC"&gt;</span><br><span class="line">            &lt;box class="a"&gt;&lt;/box&gt;</span><br><span class="line">            &lt;box class="b"&gt;&lt;/box&gt;</span><br><span class="line">            &lt;box class="c"&gt;&lt;/box&gt;</span><br><span class="line">            &lt;box class="d"&gt;&lt;/box&gt;</span><br><span class="line">            &lt;box class="e"&gt;&lt;/box&gt;</span><br><span class="line">            &lt;box class="f"&gt;&lt;/box&gt;</span><br><span class="line">            &lt;box class="g"&gt;&lt;/box&gt;</span><br><span class="line">            &lt;box class="h"&gt;&lt;/box&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* css */</span></span><br><span class="line"><span class="selector-tag">html</span>,</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.boxA</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">500px</span>;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">margin</span>: auto;</span><br><span class="line">    <span class="attribute">transform-style</span>: preserve-<span class="number">3</span>d;</span><br><span class="line">    <span class="attribute">animation</span>: action1 <span class="number">12s</span> infinite linear;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.boxA</span> <span class="selector-class">.box1</span>,</span><br><span class="line"><span class="selector-class">.box2</span>,</span><br><span class="line"><span class="selector-class">.box3</span>,</span><br><span class="line"><span class="selector-class">.box4</span>,</span><br><span class="line"><span class="selector-class">.box5</span>,</span><br><span class="line"><span class="selector-class">.box6</span>,</span><br><span class="line"><span class="selector-class">.box7</span>,</span><br><span class="line"><span class="selector-class">.box8</span>,</span><br><span class="line"><span class="selector-class">.box9</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">150px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">150px</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">margin</span>: auto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box1</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">250</span>, <span class="number">150</span>, <span class="number">150</span>);</span><br><span class="line">    <span class="attribute">transform-style</span>: preserve-<span class="number">3</span>d;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateZ</span>(<span class="number">75px</span>);</span><br><span class="line">    <span class="attribute">opacity</span>: .<span class="number">8</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box2</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">250</span>, <span class="number">203</span>, <span class="number">150</span>);</span><br><span class="line">    <span class="attribute">transform-style</span>: preserve-<span class="number">3</span>d;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateZ</span>(-<span class="number">75px</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box3</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">250</span>, <span class="number">243</span>, <span class="number">150</span>);</span><br><span class="line">    <span class="attribute">transform-style</span>: preserve-<span class="number">3</span>d;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateX</span>(-<span class="number">75px</span>) <span class="built_in">rotateY</span>(<span class="number">90deg</span>);</span><br><span class="line">    <span class="attribute">opacity</span>: .<span class="number">8</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box4</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">190</span>, <span class="number">250</span>, <span class="number">150</span>);</span><br><span class="line">    <span class="attribute">transform-style</span>: preserve-<span class="number">3</span>d;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">75px</span>) <span class="built_in">rotateY</span>(<span class="number">90deg</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box5</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">150</span>, <span class="number">250</span>, <span class="number">233</span>);</span><br><span class="line">    <span class="attribute">transform-style</span>: preserve-<span class="number">3</span>d;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateY</span>(<span class="number">75px</span>) <span class="built_in">rotateX</span>(<span class="number">90deg</span>);</span><br><span class="line">    <span class="attribute">opacity</span>: .<span class="number">8</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box6</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">150</span>, <span class="number">197</span>, <span class="number">250</span>);</span><br><span class="line">    <span class="attribute">transform-style</span>: preserve-<span class="number">3</span>d;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateY</span>(-<span class="number">75px</span>) <span class="built_in">rotateX</span>(<span class="number">90deg</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@keyframes</span> action1 &#123;</span><br><span class="line">    0% &#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">rotateX</span>(<span class="number">0deg</span>) <span class="built_in">rotateY</span>(<span class="number">0deg</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    100% &#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">rotateX</span>(<span class="number">360deg</span>) <span class="built_in">rotateY</span>(<span class="number">360deg</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.boxB</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">260px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">260px</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">margin</span>: auto;</span><br><span class="line">    <span class="attribute">transform-style</span>: preserve-<span class="number">3</span>d;</span><br><span class="line">    <span class="attribute">animation</span>: action2 <span class="number">12s</span> infinite linear;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.boxB</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">500px</span>;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">margin</span>: auto;</span><br><span class="line">    <span class="attribute">transform-style</span>: preserve-<span class="number">3</span>d;</span><br><span class="line">    <span class="attribute">animation</span>: action1 <span class="number">8s</span> infinite linear;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">@keyframes</span> action3 &#123;</span><br><span class="line">    0% &#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">rotateX</span>(<span class="number">0deg</span>) <span class="built_in">rotateY</span>(<span class="number">0deg</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    100% &#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">rotateX</span>(<span class="number">360deg</span>) <span class="built_in">rotateY</span>(<span class="number">360deg</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.pic1</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">250</span>, <span class="number">150</span>, <span class="number">150</span>);</span><br><span class="line">    <span class="attribute">transform-style</span>: preserve-<span class="number">3</span>d;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateZ</span>(<span class="number">130px</span>);</span><br><span class="line">    <span class="attribute">transition</span>: <span class="number">1s</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.boxA</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.pic1</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateZ</span>(<span class="number">180px</span>);</span><br><span class="line">    <span class="attribute">transition</span>: <span class="number">1s</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.pic2</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">250</span>, <span class="number">203</span>, <span class="number">150</span>);</span><br><span class="line">    <span class="attribute">transform-style</span>: preserve-<span class="number">3</span>d;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateZ</span>(-<span class="number">130px</span>);</span><br><span class="line">    <span class="attribute">transition</span>: <span class="number">1s</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.boxA</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.pic2</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateZ</span>(-<span class="number">180px</span>);</span><br><span class="line">    <span class="attribute">transition</span>: <span class="number">1s</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.pic3</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">250</span>, <span class="number">243</span>, <span class="number">150</span>);</span><br><span class="line">    <span class="attribute">transform-style</span>: preserve-<span class="number">3</span>d;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateX</span>(-<span class="number">130px</span>) <span class="built_in">rotateY</span>(<span class="number">90deg</span>);</span><br><span class="line">    <span class="attribute">transition</span>: <span class="number">1s</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.boxA</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.pic3</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateX</span>(-<span class="number">180px</span>) <span class="built_in">rotateY</span>(<span class="number">90deg</span>);</span><br><span class="line">    <span class="attribute">transition</span>: <span class="number">1s</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.pic4</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">190</span>, <span class="number">250</span>, <span class="number">150</span>);</span><br><span class="line">    <span class="attribute">transform-style</span>: preserve-<span class="number">3</span>d;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">130px</span>) <span class="built_in">rotateY</span>(<span class="number">90deg</span>);</span><br><span class="line">    <span class="attribute">transition</span>: <span class="number">1s</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.boxA</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.pic4</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">180px</span>) <span class="built_in">rotateY</span>(<span class="number">90deg</span>);</span><br><span class="line">    <span class="attribute">transition</span>: <span class="number">1s</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.pic5</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">150</span>, <span class="number">250</span>, <span class="number">233</span>);</span><br><span class="line">    <span class="attribute">transform-style</span>: preserve-<span class="number">3</span>d;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateY</span>(<span class="number">130px</span>) <span class="built_in">rotateX</span>(<span class="number">90deg</span>);</span><br><span class="line">    <span class="attribute">transition</span>: <span class="number">1s</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.boxA</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.pic5</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateY</span>(<span class="number">180px</span>) <span class="built_in">rotateX</span>(<span class="number">90deg</span>);</span><br><span class="line">    <span class="attribute">transition</span>: <span class="number">1s</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.pic6</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">150</span>, <span class="number">197</span>, <span class="number">250</span>);</span><br><span class="line">    <span class="attribute">transform-style</span>: preserve-<span class="number">3</span>d;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateY</span>(-<span class="number">130px</span>) <span class="built_in">rotateX</span>(<span class="number">90deg</span>);</span><br><span class="line">    <span class="attribute">transition</span>: <span class="number">1s</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.boxA</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.pic6</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateY</span>(-<span class="number">180px</span>) <span class="built_in">rotateX</span>(<span class="number">90deg</span>);</span><br><span class="line">    <span class="attribute">transition</span>: <span class="number">1s</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="会折叠的正方体"><a href="#会折叠的正方体" class="headerlink" title="会折叠的正方体"></a>会折叠的正方体</h2><p>其实只要设置好初始位置，加上transition就能自动合上；<br><img src="https://s1.ax1x.com/2020/05/11/YYkxdP.gif" alt="YYkxdP.gif"></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSS"><figure class="iseeu highlight /css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* html */</span></span><br><span class="line">&lt;<span class="selector-tag">body</span>&gt;</span><br><span class="line">    &lt;div class="box"&gt;</span><br><span class="line">        &lt;div class="box1"&gt;正&lt;/div&gt;</span><br><span class="line">        &lt;div class="box2"&gt;反&lt;/div&gt;</span><br><span class="line">        &lt;div class="box3"&gt;下&lt;/div&gt;</span><br><span class="line">        &lt;div class="box4"&gt;上&lt;/div&gt;</span><br><span class="line">        &lt;div class="box5"&gt;左&lt;/div&gt;</span><br><span class="line">        &lt;div class="box6"&gt;右&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* css */</span></span><br><span class="line"><span class="selector-tag">html</span>,</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">500px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">50px</span> auto;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">transform-style</span>: preserve-<span class="number">3</span>d;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotateY</span>(-<span class="number">105deg</span>) <span class="built_in">rotatex</span>(<span class="number">45deg</span>);</span><br><span class="line">    <span class="comment">/* perspective: 200px; */</span></span><br><span class="line">    <span class="comment">/* perspective-origin: left top; */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box</span> <span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">margin</span>: auto;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">color</span>: white;</span><br><span class="line">    <span class="attribute">font-weight</span>: bold;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box1</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>: coral;</span><br><span class="line">    <span class="attribute">transform-style</span>: preserve-<span class="number">3</span>d;</span><br><span class="line">    <span class="attribute">transform-origin</span>: bottom;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateZ</span>(<span class="number">100px</span>) <span class="built_in">rotateX</span>(-<span class="number">90deg</span>);</span><br><span class="line">    <span class="attribute">transition</span>: <span class="number">1s</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.box1</span>&#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateZ</span>(<span class="number">100px</span>);</span><br><span class="line">    <span class="attribute">transition</span>: <span class="number">1s</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box2</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">rgb</span>(<span class="number">255</span>, <span class="number">185</span>, <span class="number">80</span>);</span><br><span class="line">    <span class="attribute">transform-style</span>: preserve-<span class="number">3</span>d;</span><br><span class="line">    <span class="attribute">transform-origin</span>: bottom;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateZ</span>(-<span class="number">100px</span>) <span class="built_in">rotateZ</span>(-<span class="number">180deg</span>) <span class="built_in">rotateX</span>(<span class="number">90deg</span>);</span><br><span class="line">    <span class="attribute">transition</span>: <span class="number">1s</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.box2</span>&#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateZ</span>(-<span class="number">100px</span>) <span class="built_in">rotateY</span>(<span class="number">180deg</span>);</span><br><span class="line">    <span class="attribute">transition</span>: <span class="number">1s</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box3</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">rgb</span>(<span class="number">243</span>, <span class="number">255</span>, <span class="number">80</span>);</span><br><span class="line">    <span class="attribute">transform-style</span>: preserve-<span class="number">3</span>d;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateY</span>(<span class="number">100px</span>) <span class="built_in">rotateX</span>(<span class="number">90deg</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box4</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">rgb</span>(<span class="number">144</span>, <span class="number">255</span>, <span class="number">80</span>);</span><br><span class="line">    <span class="attribute">transform-style</span>: preserve-<span class="number">3</span>d;</span><br><span class="line">    <span class="attribute">transform-origin</span>: bottom center;</span><br><span class="line">    <span class="attribute">transition</span>: <span class="number">1s</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateZ</span>(-<span class="number">300px</span>) ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.box4</span>&#123;</span><br><span class="line">    <span class="attribute">transition</span>: <span class="number">1s</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateY</span>(-<span class="number">200px</span>) <span class="built_in">translateZ</span>(-<span class="number">100px</span>) <span class="built_in">rotateX</span>(-<span class="number">90deg</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box5</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">80</span>, <span class="number">255</span>, <span class="number">217</span>, <span class="number">0.8</span>);</span><br><span class="line">    <span class="attribute">transform-style</span>: preserve-<span class="number">3</span>d;</span><br><span class="line">    <span class="attribute">transform-origin</span>: bottom;</span><br><span class="line">    <span class="attribute">transition</span>: <span class="number">1s</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateX</span>(-<span class="number">100px</span>) <span class="built_in">rotateY</span>(<span class="number">90deg</span>)  <span class="built_in">rotateX</span>(<span class="number">90deg</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.box5</span>&#123;</span><br><span class="line">    <span class="attribute">transition</span>: <span class="number">1s</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateX</span>(-<span class="number">100px</span>) <span class="built_in">rotateY</span>(<span class="number">90deg</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box6</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">80</span>, <span class="number">127</span>, <span class="number">255</span>, <span class="number">0.8</span>);</span><br><span class="line">    <span class="attribute">transform-style</span>: preserve-<span class="number">3</span>d;</span><br><span class="line">    <span class="attribute">transform-origin</span>: bottom;</span><br><span class="line">    <span class="attribute">transition</span>: <span class="number">1s</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">100px</span>) <span class="built_in">rotateY</span>(<span class="number">90deg</span>) <span class="built_in">rotateX</span>(-<span class="number">90deg</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.box6</span>&#123;</span><br><span class="line">    <span class="attribute">transition</span>: <span class="number">1s</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">100px</span>) <span class="built_in">rotateY</span>(<span class="number">90deg</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>css</category>
      </categories>
  </entry>
  <entry>
    <title>微信小程云开发-应用在项目中</title>
    <url>/jackhuang-haohua.github.io/2019/11/23/2020-05-%E5%BE%AE%E4%BF%A1%E4%BA%91%E5%BC%80%E5%8F%91%20%E5%BA%94%E7%94%A8/</url>
    <content><![CDATA[<p>创建了云开发项目后，就相当于有了一套接口，这篇文章就记录一下怎么用云服务；</p>
<h2 id="导入云服务"><a href="#导入云服务" class="headerlink" title="导入云服务"></a>导入云服务</h2><p>在一个项目中，这里假设新建一个项目”douban”，<br><strong>project.config.json中：</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	&quot;description&quot;: &quot;项目配置文件&quot;,</span><br><span class="line">	&quot;cloudfunctionRoot&quot;:&quot;cloudfunctionRoot&quot;,</span><br><span class="line">	&#125;</span><br><span class="line">  ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p><strong>app.js中：</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">App(&#123;</span><br><span class="line">  &#x2F;&#x2F;监听小程序初始化操作</span><br><span class="line">  onLaunch: function () &#123;</span><br><span class="line">    &#x2F;&#x2F; 初始化云环境</span><br><span class="line">    if (!wx.cloud) &#123;</span><br><span class="line">      console.error(&#39;请使用 2.2.3 或以上的基础库以使用云能力&#39;)</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      wx.cloud.init(&#123;</span><br><span class="line">        env: &#39;hhhproject-zmtra&#39;, &#x2F;&#x2F;这里是之前创建的云开发的名称</span><br><span class="line">        traceUser: true,</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div>
<h2 id="测试接口"><a href="#测试接口" class="headerlink" title="测试接口"></a>测试接口</h2><p>　现在已经可以用云开发服务了，新建cloudfunctionRoot文件夹，右键同步云函数，就可以把云函数pull到本地，<br>　<strong>假设我们要使用云函数：</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">onLoad: function (options) &#123;</span><br><span class="line">  ......</span><br><span class="line">  &#x2F;&#x2F;测试login云函数是否可用</span><br><span class="line">  wx.cloud.callFunction(&#123;</span><br><span class="line">    name:&quot;login&quot;</span><br><span class="line">  &#125;).then(res&#x3D;&gt;&#123;</span><br><span class="line">    console.log(&quot;res&#x3D;&#x3D;&#x3D;&#x3D;》&quot;,res)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>　<strong>假设我们要修改云函数：</strong><br>　修改cloudfunctionRoot下的函数，右键”上传并部署”</p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>现在我们就可以直接用数据库里的数据了；<br><strong>之前是用ajax请求得到数据：</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">onLoad: function (options) &#123;</span><br><span class="line">  douban(&#123;</span><br><span class="line">    url:&quot;in_theaters&quot;,</span><br><span class="line">    data:&#123;</span><br><span class="line">      count:3</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;).then(res&#x3D;&gt;&#123;</span><br><span class="line">    console.log(&quot;res&quot;,res)</span><br><span class="line">    let result &#x3D; [];</span><br><span class="line">    res.data.subjects.map(item&#x3D;&gt;&#123;</span><br><span class="line">      result.push(&#123;</span><br><span class="line">        id:item.id,</span><br><span class="line">        image:item.images.large</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">    &#x2F;&#x2F;进行数据的设置</span><br><span class="line">    this.setData(&#123;</span><br><span class="line">      movies:result</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p><strong>现在可以直接调用数据库(前提是要有这个数据库，并导入数据！)：</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">onLoad: function (options) &#123;</span><br><span class="line">  &#x2F;&#x2F;从云数据库里面取正在热映的数据</span><br><span class="line">  let res &#x3D; await in_theaters</span><br><span class="line">    .where(&#123;&#125;)</span><br><span class="line">    .limit(3)</span><br><span class="line">    .get()</span><br><span class="line">  let result &#x3D; [];</span><br><span class="line">  res.data.map(item&#x3D;&gt;&#123;</span><br><span class="line">    result.push(&#123;</span><br><span class="line">      id:item.id,</span><br><span class="line">      image:item.images.large</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">  this.setData(&#123;</span><br><span class="line">    movies:result</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2><p><strong>我们可以把连接数据库的方法封装起来：</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">let app &#x3D; getApp(); </span><br><span class="line">&#x2F;&#x2F;获取数据库</span><br><span class="line">let db &#x3D; wx.cloud.database()</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;根据数据库集合查询数据</span><br><span class="line">&#x2F;&#x2F;collectionName：集合名字</span><br><span class="line">&#x2F;&#x2F;id  电影的唯一id</span><br><span class="line">&#x2F;&#x2F;q   电影的名字</span><br><span class="line">export default (&#123;</span><br><span class="line">  collectionName,id&#x3D;null,data&#x3D;&#123;start:0,count:20,q:null&#125;,method&#x3D;&#39;get&#39;,loadingTop,loadingCenter </span><br><span class="line">&#125;)&#x3D;&gt;&#123;</span><br><span class="line">  return new Promise((resolve,reject)&#x3D;&gt;&#123;</span><br><span class="line">    &#x2F;&#x2F;显示loading</span><br><span class="line">    if(loadingTop)&#123;</span><br><span class="line">      wx.showNavigationBarLoading()</span><br><span class="line">      wx.setNavigationBarTitle(&#123;</span><br><span class="line">        title: &#39;加载中...&#39;,</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    if(loadingCenter)&#123;</span><br><span class="line">      wx.showLoading(&#123;</span><br><span class="line">        title: &#39;加载中...&#39;,</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;查询条件  id  q进行查询</span><br><span class="line">    let where &#x3D; &#123;&#125;</span><br><span class="line">    let title &#x3D; &#123;</span><br><span class="line">      $regex:&#39;.*&#39;+data.q, &#x2F;&#x2F;包含data.q就可以</span><br><span class="line">      $options:&#39;i&#39;        &#x2F;&#x2F;忽略大小写</span><br><span class="line">    &#125;</span><br><span class="line">    where &#x3D; id ? &#123;...where,id&#125; : where </span><br><span class="line">    where &#x3D; data.q ? &#123;...where,title&#125; : where</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;根据集合查询对应的数据</span><br><span class="line">    db.collection(collectionName)</span><br><span class="line">      .where(where)  &#x2F;&#x2F;查询条件 </span><br><span class="line">      .skip(data.start * data.count)  &#x2F;&#x2F; 0 * 20</span><br><span class="line">      .limit(data.count)              &#x2F;&#x2F; 20 </span><br><span class="line">      .get(</span><br><span class="line">        &#123;</span><br><span class="line">          success(res) &#123;</span><br><span class="line">            resolve(res)</span><br><span class="line">          &#125;,</span><br><span class="line">          fail(err)&#123;</span><br><span class="line">            reject(err)</span><br><span class="line">          &#125;,</span><br><span class="line">          complete()&#123;</span><br><span class="line">            if(loadingTop) wx.hideNavigationBarLoading()</span><br><span class="line">            if(loadingCenter) wx.hideLoading()</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      )</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>后面我们就可以调用这个方法，必传参数为集合名，id/电影名；即点击时跳转到详情页item，并传参数，详情页根据参数，调用上面的查找数据库的方法，得到数据后渲染详情页item</strong><br>列表页.wxml中，点击跳转，并携带集合名，电影id：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">&lt;swiper circular indicator-dots class&#x3D;&quot;swp&quot;&gt;</span><br><span class="line">  &lt;swiper-item</span><br><span class="line">    wx:for&#x3D;&quot;&#123;&#123;banner.content&#125;&#125;&quot;</span><br><span class="line">    wx:key&#x3D;&quot;id&quot;</span><br><span class="line">  &gt; </span><br><span class="line">    &lt;navigator open-type&#x3D;&quot;navigate&quot; url&#x3D;&quot;&#123;&#123;&#39;&#x2F;pages&#x2F;item&#x2F;item?id&#x3D;&#39;+item.id+&#39;&amp;collectionName&#x3D;&#39;+banner.key&#125;&#125;&quot;&gt;</span><br><span class="line">      &lt;image class&#x3D;&quot;nav-img&quot; src&#x3D;&quot;&#123;&#123;item.image&#125;&#125;&quot;&gt;&lt;&#x2F;image&gt;</span><br><span class="line">    &lt;&#x2F;navigator&gt;</span><br><span class="line">  &lt;&#x2F;swiper-item&gt;</span><br><span class="line">&lt;&#x2F;swiper&gt;</span><br></pre></td></tr></table></figure></div>

<p>详情页.js中，得到集合名和id，调用数据库方法，然后setData：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">onLoad: function (options) &#123;</span><br><span class="line">    let &#123;id,collectionName&#125; &#x3D; options;</span><br><span class="line">    douban(&#123;</span><br><span class="line">      collectionName,</span><br><span class="line">      id,</span><br><span class="line">      loadingTop:true</span><br><span class="line">    &#125;).then(res&#x3D;&gt;&#123;</span><br><span class="line">      &#x2F;&#x2F;通过where条件查找数据，返回的是一个数组</span><br><span class="line">      let detail &#x3D; res.data[0]</span><br><span class="line">      let photos &#x3D; []</span><br><span class="line">      detail.casts.map(item&#x3D;&gt;&#123;</span><br><span class="line">        &#x2F;&#x2F;如果item.avatars存在，再给photos数组添加大图</span><br><span class="line">        if(item.avatars)&#123;</span><br><span class="line">          photos.push(item.avatars.large)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">      this.setData(&#123;</span><br><span class="line">        photos,</span><br><span class="line">        detail,</span><br><span class="line">        title:detail.title</span><br><span class="line">      &#125;)</span><br><span class="line">      &#x2F;&#x2F;设置导航的标题</span><br><span class="line">      wx.setNavigationBarTitle(&#123;</span><br><span class="line">        title: this.data.title</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>小程序</category>
      </categories>
  </entry>
  <entry>
    <title>微信小程云开发-数据库的操作</title>
    <url>/jackhuang-haohua.github.io/2019/11/21/2020-05-%E5%BE%AE%E4%BF%A1%E4%BA%91%E5%BC%80%E5%8F%91%20%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
    <content><![CDATA[<h3 id="模块二：数据库"><a href="#模块二：数据库" class="headerlink" title="模块二：数据库"></a>模块二：数据库</h3><p>腾讯云给你一个MongoDB，可以直接在这里curd数据；</p>
<h4 id="①直接添加"><a href="#①直接添加" class="headerlink" title="①直接添加"></a>①直接添加</h4><p>添加集合 -&gt; 添加记录 -&gt; 权限设置，就可以使用这个线上数据库了</p>
<h4 id="②导入json文件"><a href="#②导入json文件" class="headerlink" title="②导入json文件"></a>②导入json文件</h4><p><strong>第一步：</strong>已有mongodb数据导出，</p>
<ul>
<li><code>mongod --dbpath E:\study\database\mongodb\data\db</code></li>
<li><code>mongoexport -h 127.0.0.1 -d 数据库 -c 集合名 -o 输出路径/xx.json</code>，把某个表的数据导出为json</li>
<li>注意，导入的json，对象与对象之间不能有逗号；并且只能导入一个个对象</li>
<li>云开发中选择json文件导入</li>
</ul>
<h4 id="③openid"><a href="#③openid" class="headerlink" title="③openid"></a>③openid</h4><p>获取openid -&gt; 用户唯一身份</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">let res &#x3D; await wx.cloud.callFunction(&#123;</span><br><span class="line">  name:&quot;login&quot;</span><br><span class="line">&#125;)</span><br><span class="line">console.log(res.result.openid);</span><br></pre></td></tr></table></figure></div>

<h4 id="④重点：数据库curd"><a href="#④重点：数据库curd" class="headerlink" title="④重点：数据库curd"></a>④重点：数据库curd</h4><h5 id="1-添加数据："><a href="#1-添加数据：" class="headerlink" title="1)添加数据："></a>1)添加数据：</h5><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">add()&#123;</span><br><span class="line">   db.collection(&#39;douban&#39;)</span><br><span class="line">     .add(&#123;</span><br><span class="line">       data:&#123; &#x2F;&#x2F;不能进行批量添加  使用云函数方式进行批量添加</span><br><span class="line">         name: &#39;apple&#39;,</span><br><span class="line">         category: &#39;fruit&#39;,</span><br><span class="line">         price: 10,</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;).then(res &#x3D;&gt; &#123;</span><br><span class="line">       console.log(&quot;res&quot;,res)</span><br><span class="line">     &#125;).catch(err&#x3D;&gt;&#123;</span><br><span class="line">       console.log(&quot;err&quot;,err)</span><br><span class="line">     &#125;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></div>

<h5 id="2-删除数据："><a href="#2-删除数据：" class="headerlink" title="2)删除数据："></a>2)删除数据：</h5><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">remove()&#123;</span><br><span class="line">  db.collection(&#39;douban&#39;).doc(&#39;37e26adb5eb58c680056ecfe2bffa8e9&#39;)</span><br><span class="line">    .remove()</span><br><span class="line">    .then(res &#x3D;&gt; &#123;</span><br><span class="line">      console.log(&quot;res&quot;, res)</span><br><span class="line">    &#125;).catch(err &#x3D;&gt; &#123;</span><br><span class="line">      console.log(&quot;err&quot;, err)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></div>

<h5 id="3-更改数据："><a href="#3-更改数据：" class="headerlink" title="3)更改数据："></a>3)更改数据：</h5><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">update()&#123;</span><br><span class="line">  db.collection(&#39;douban&#39;).doc(&#39;e2297d935eb58fcf004aa0157a57a0f2&#39;)</span><br><span class="line"> &#x2F;&#x2F;.set(&#123;&#125;) 替换更新 </span><br><span class="line">    .update(&#123;  &#x2F;&#x2F;局部更新  </span><br><span class="line">      data: &#123;</span><br><span class="line">        &#x2F;&#x2F;price: _.inc(10) &#x2F;&#x2F;每次加10</span><br><span class="line">        amount: &#39;520&#39;,</span><br><span class="line">        content: &#39;更新内容&#39;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;).then(res&#x3D;&gt;console.log(res))</span><br><span class="line">    .catch(err&#x3D;&gt;console.log(err))</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></div>

<h5 id="4-查找数据："><a href="#4-查找数据：" class="headerlink" title="4)查找数据："></a>4)查找数据：</h5><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">find()&#123;</span><br><span class="line">  db.collection(&#39;douban&#39;)</span><br><span class="line">    .where(&#123;  &#x2F;&#x2F;查询条件</span><br><span class="line">      amount: _.gt(89) &#x2F;&#x2F;查询指令 价格大于2的</span><br><span class="line">    &#125;)</span><br><span class="line">    .field(&#123;  &#x2F;&#x2F;显示的字段</span><br><span class="line">      anthor: true,</span><br><span class="line">      amount: true,</span><br><span class="line">    &#125;)</span><br><span class="line">    .orderBy(&#39;amount&#39;, &#39;desc&#39;) &#x2F;&#x2F;按照price进行降序排列</span><br><span class="line">    &#x2F;&#x2F; .skip(1)</span><br><span class="line">    &#x2F;&#x2F; .limit(10)</span><br><span class="line">    .get()</span><br><span class="line">    .then(res&#x3D;&gt;console.log(res))</span><br><span class="line">    .catch(err&#x3D;&gt;console.log(err))</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></div>

<h4 id="②常见报错"><a href="#②常见报错" class="headerlink" title="②常见报错"></a>②常见报错</h4><ul>
<li>curd操作成功了，但是更新的数据为0条：张三更改的数据只能是张三添加的，也就是数据库中有openid的那些；或者最高权限的管理员直接改；</li>
<li>“_” is not defined，需要引入；另外db也需要引入</li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">const db &#x3D; wx.cloud.database();</span><br><span class="line">const _ &#x3D; db.command</span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>小程序</category>
      </categories>
  </entry>
  <entry>
    <title>微信小程云开发</title>
    <url>/jackhuang-haohua.github.io/2019/11/20/2020-05-%E5%BE%AE%E4%BF%A1%E4%BA%91%E5%BC%80%E5%8F%91/</url>
    <content><![CDATA[<h2 id="一、准备工作"><a href="#一、准备工作" class="headerlink" title="一、准备工作"></a>一、准备工作</h2><ol>
<li>点击开发工具上面的云开发，创建一个云开发服务；<ul>
<li>注意：只能创建两个环境，且无法删除</li>
</ul>
</li>
<li>新建项目，勾选”小程序-云开发”，会生成一个演示项目</li>
<li>app.js，添加自己的项目名称(云开发-&gt;设置)</li>
</ol>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">App(&#123;</span><br><span class="line">  onLaunch: function () &#123;</span><br><span class="line">    </span><br><span class="line">    if (!wx.cloud) &#123;</span><br><span class="line">      console.error(&#39;请使用 2.2.3 或以上的基础库以使用云能力&#39;)</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      wx.cloud.init(&#123;</span><br><span class="line">        env: &#39;hhhproject-zmtra&#39;,</span><br><span class="line">        traceUser: true,</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    this.globalData &#x3D; &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div>

<h2 id="二、功能介绍"><a href="#二、功能介绍" class="headerlink" title="二、功能介绍"></a>二、功能介绍</h2><p>点开云开发，会看到有四个模块：</p>
<ul>
<li>运营分析</li>
<li>数据库</li>
<li>存储</li>
<li>云函数</li>
</ul>
<h3 id="模块一：运营分析"><a href="#模块一：运营分析" class="headerlink" title="模块一：运营分析"></a>模块一：运营分析</h3><p>这个程序员一般不管，有人要就再把数据给他。</p>
<h3 id="模块二：数据库"><a href="#模块二：数据库" class="headerlink" title="模块二：数据库"></a>模块二：数据库</h3><p>腾讯云给你一个MongoDB，可以直接在这里curd数据；</p>
<h4 id="①mongodb数据库"><a href="#①mongodb数据库" class="headerlink" title="①mongodb数据库"></a>①mongodb数据库</h4><p>在下一篇文章</p>
<h4 id="②数据推送服务"><a href="#②数据推送服务" class="headerlink" title="②数据推送服务"></a>②数据推送服务</h4><p>​　A页面修改了集合，B页面事先监听了这个集合，就会收到更新后的数据，这个数据由后端推送（利用websocket）。<br>　一旦douban的集合数据发生变化了，onChange函数就会执行，在这里面我们可以实现自己的业务逻辑。<br>　如下代码，在onLoad里监视了数据库douban里的所有数据，当数据改变时，触发onChange；利用这个服务，可以制作聊天室，线上游戏等项目；</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">onLoad: function (options) &#123;</span><br><span class="line">  db.collection(&#39;douban&#39;).where(&#123;&#125;).watch(&#123;</span><br><span class="line">    onChange: (snapshot)&#x3D;&gt;&#123;</span><br><span class="line">      console.log(snapshot.docChanges)</span><br><span class="line">    &#125;,</span><br><span class="line">    onError:err&#x3D;&gt;&#123;</span><br><span class="line">      console.log(err)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></div>
<h4 id="③小程序自带的API"><a href="#③小程序自带的API" class="headerlink" title="③小程序自带的API"></a>③小程序自带的API</h4><p>　微信封装了很多API，比如获得位置，上传文件，创建画布等<br>　下面代码演示了上传图片到云存储，如果要上传其他类型文件<code>wx.chooseMessageFile</code>，或者看开发者文档，还有其他方法</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">doUpload: function () &#123;</span><br><span class="line">  &#x2F;&#x2F; 选择图片</span><br><span class="line">  wx.chooseImage(&#123;</span><br><span class="line">    count: 1,</span><br><span class="line">    sizeType: [&#39;compressed&#39;], &#x2F;&#x2F;压缩</span><br><span class="line">    sourceType: [&#39;album&#39;, &#39;camera&#39;],</span><br><span class="line">    success: function (res) &#123;</span><br><span class="line"></span><br><span class="line">      wx.showLoading(&#123;</span><br><span class="line">        title: &#39;上传中&#39;,</span><br><span class="line">      &#125;)</span><br><span class="line"></span><br><span class="line">      const filePath &#x3D; res.tempFilePaths[0]</span><br><span class="line">      </span><br><span class="line">      &#x2F;&#x2F; 上传图片</span><br><span class="line">      const cloudPath &#x3D; &#39;my-image&#39; + Date.now() + filePath.match(&#x2F;\.[^.]+?$&#x2F;)[0]</span><br><span class="line">      wx.cloud.uploadFile(&#123;</span><br><span class="line">        cloudPath,</span><br><span class="line">        filePath,</span><br><span class="line">        success: res &#x3D;&gt; &#123;</span><br><span class="line">          console.log(&#39;[上传文件] 成功：&#39;, res)</span><br><span class="line">        &#125;,</span><br><span class="line">        fail: e &#x3D;&gt; &#123;</span><br><span class="line">          console.error(&#39;[上传文件] 失败：&#39;, e)</span><br><span class="line">          wx.showToast(&#123;</span><br><span class="line">            icon: &#39;none&#39;,</span><br><span class="line">            title: &#39;上传失败&#39;,</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;,</span><br><span class="line">        complete: () &#x3D;&gt; &#123;</span><br><span class="line">          wx.hideLoading()</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    fail: e &#x3D;&gt; &#123;</span><br><span class="line">      console.error(e)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></div>

<h3 id="模块三：云函数"><a href="#模块三：云函数" class="headerlink" title="模块三：云函数"></a>模块三：云函数</h3><p>有点类似于npm包，就是包封装好的函数传到云，后面可以直接调用；<br>在cloudfunctions文件夹 -&gt; 右键新建node.js云函数；<br>比如创建一个sum函数；入口函数有两个参数：</p>
<ul>
<li>event用来接收传递的参数</li>
<li>context用来获取上下文的相关信息，比如<code>cloud.getWXContext</code>可以获取OPENID，UNIONID<br>cloudfunctions/sum/index.js中：<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 云函数入口文件</span><br><span class="line">const cloud &#x3D; require(&#39;wx-server-sdk&#39;)</span><br><span class="line">cloud.init()</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 云函数入口函数</span><br><span class="line">exports.main &#x3D; async (event, context) &#x3D;&gt; &#123;</span><br><span class="line">  return &#123;</span><br><span class="line">    sum:event.a+event.b,</span><br><span class="line">    reduce:event.a-event.b</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
pages/test/test.js中，调用：<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">sum()&#123;</span><br><span class="line">  wx.cloud.callFunction(&#123;</span><br><span class="line">    name:&#39;sum&#39;,</span><br><span class="line">    data:&#123;</span><br><span class="line">      a:1,</span><br><span class="line">      b:2,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;).then(res&#x3D;&gt;&#123;</span><br><span class="line">    console.log(res);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li>
</ul>
]]></content>
      <categories>
        <category>小程序</category>
      </categories>
  </entry>
  <entry>
    <title>了解微信小程序</title>
    <url>/jackhuang-haohua.github.io/2019/11/14/2020-05-%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h2 id="一、了解小程序"><a href="#一、了解小程序" class="headerlink" title="一、了解小程序"></a>一、了解小程序</h2><h3 id="是什么"><a href="#是什么" class="headerlink" title="是什么"></a>是什么</h3><blockquote>
<p>小程序是一种不需要下载安装即可使用的应用，它实现了应用“触手可及”的梦想，用户扫一扫或者搜一下即可打开应用。也体现了“用完即走”的理念，用户不用关心是否安装太多应用的问题。应用将无处不在，随时可用，但又无需安装卸载。</p>
</blockquote>
<p>　对于开发者而言，小程序开发门槛相对较低，难度不及APP，能够满足简单的基础应用，适合生活服务类线下商铺以及非刚需低频应用的转换。 对于用户来说，能够节约使用时间成本和手机内存空间；对于开发者来说也能节约开发和推广成本。</p>
<h3 id="发展史"><a href="#发展史" class="headerlink" title="发展史"></a>发展史</h3><table>
<thead>
<tr>
<th>符号</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>2016-11-03</td>
<td>微信小程序内测</td>
</tr>
<tr>
<td>2016-11-03</td>
<td>微信小程序公测</td>
</tr>
<tr>
<td>2017-01-09</td>
<td>微信小程序正式上线</td>
</tr>
<tr>
<td>2017-09-20</td>
<td>支付宝小程序公测</td>
</tr>
<tr>
<td>2017-12-28</td>
<td>微信小程序首页下拉入口以及微信小程序上线</td>
</tr>
<tr>
<td>2018-01</td>
<td>微信小游戏大量推广-跳一跳</td>
</tr>
<tr>
<td>2018-02</td>
<td>祝福类小程序以及小游戏</td>
</tr>
<tr>
<td>2018-03</td>
<td>小米、中兴、华为等十家手机厂商一起推出了快应用，本质上也是小程序</td>
</tr>
<tr>
<td>2018-07</td>
<td>百度小程序上线</td>
</tr>
<tr>
<td>2018-09-16</td>
<td>头条小程序上线</td>
</tr>
<tr>
<td>2019-06</td>
<td>QQ小程序上线</td>
</tr>
</tbody></table>
<h2 id="二、准备"><a href="#二、准备" class="headerlink" title="二、准备"></a>二、准备</h2><h3 id="申请小程序账号"><a href="#申请小程序账号" class="headerlink" title="申请小程序账号"></a>申请小程序账号</h3><p><a href="https://mp.weixin.qq.com/wxopen/waregister?action=step1" target="_blank">登录微信公众号平台，申请小程序账号</a></p>
<h3 id="AppID"><a href="#AppID" class="headerlink" title="AppID"></a>AppID</h3><p>登录小程序后台，设置 -&gt; 开发设置 -&gt; 记下AppID</p>
<h3 id="安装开发者工具稳定版"><a href="#安装开发者工具稳定版" class="headerlink" title="安装开发者工具稳定版"></a>安装开发者工具稳定版</h3><p><a href="https://developers.weixin.qq.com/miniprogram/dev/devtools/download.html" target="_blank">登录微信公众号平台，申请小程序账号</a></p>
<h2 id="三、开发者工具"><a href="#三、开发者工具" class="headerlink" title="三、开发者工具"></a>三、开发者工具</h2><h3 id="新建项目"><a href="#新建项目" class="headerlink" title="新建项目"></a>新建项目</h3><p>打开开发者工具，新建项目，选项主要有：</p>
<ul>
<li>【项目名称】如”douban”</li>
<li>【目录】即为自己的项目地址</li>
<li>【AppID】正确填写即可</li>
<li>【开发模式】选择“小程序”即可</li>
<li>【后端服务】选择“不使用云服务”</li>
<li>【语言】选择“javascript”。</li>
</ul>
<h3 id="界面"><a href="#界面" class="headerlink" title="界面"></a>界面</h3><p>　有很多功能，比如：【模拟器】、【编辑器】、【调试器】、【云开发】、【小程序模式】、【编译】、【真机调试】、【切后台】、【清缓存】、【上传】、【版本管理】、【社区】、【详情】。<br>　以后工作具体用到那个再记下来。<br><img src="https://s1.ax1x.com/2020/05/06/YEvV6U.png" alt="YEvV6U.png"></p>
<h3 id="添加编译模式"><a href="#添加编译模式" class="headerlink" title="添加编译模式"></a>添加编译模式</h3><p>　小程序每次重新编译时，都会从app.json中第一个pages开始，如果正在写三四级页面，每次点击会很麻烦；<br>　此时，可以点击上方的添加编译模式，将当前页添加，并携带当前页需要的参数，这样每次保存代码就会从当前页开始编译；</p>
<h2 id="四、文件介绍"><a href="#四、文件介绍" class="headerlink" title="四、文件介绍"></a>四、文件介绍</h2><p>刚创建的项目有以下文件</p>
<ul>
<li>pages -&gt; 页面文件夹<ul>
<li>borad -&gt; 页面/组件</li>
</ul>
<ul>
<li>board.js</li>
<li>board.json</li>
<li>board.wxml</li>
<li>board.wxss </li>
</ul>
</li>
<li>app.js -&gt; 全局函数</li>
<li>app.json -&gt; 全局配置(导航栏，路由)</li>
<li>app.wxss -&gt; 全局样式</li>
<li>project.config.json -&gt; 项目配置</li>
<li>sitemap.json</li>
</ul>
]]></content>
      <categories>
        <category>小程序</category>
      </categories>
  </entry>
  <entry>
    <title>微信小程序知识点</title>
    <url>/jackhuang-haohua.github.io/2019/11/16/2020-05-%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E9%A1%B9%E7%9B%AE/</url>
    <content><![CDATA[<h2 id="一、底部导航栏"><a href="#一、底部导航栏" class="headerlink" title="一、底部导航栏"></a>一、底部导航栏</h2><p>底部导航栏比较特殊，只能在app.json配置；<br><strong>第一步：</strong>右键pages，新建组件；比如我们新建一个组件”board”，会自动生成：</p>
<ul>
<li>borad<ul>
<li>board.js</li>
<li>board.json</li>
<li>board.wxml</li>
<li>board.wxss </li>
</ul>
</li>
</ul>
<p><strong>第二步：</strong>，新建组件后，app.json会自动生成路由，如下面代码的pages；接着我们需要配置window和tabBar，具体选项可以看开发者文档；</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;pages&quot;:[</span><br><span class="line">    &quot;pages&#x2F;board&#x2F;board&quot;,</span><br><span class="line">    &quot;pages&#x2F;search&#x2F;search&quot;,</span><br><span class="line">    &quot;pages&#x2F;mine&#x2F;mine&quot;,</span><br><span class="line">  ],</span><br><span class="line">  &quot;window&quot;:&#123;</span><br><span class="line">    &quot;backgroundTextStyle&quot;:&quot;light&quot;,</span><br><span class="line">    &quot;navigationBarBackgroundColor&quot;: &quot;#35495e&quot;, &#x2F;&#x2F;导航栏的背景</span><br><span class="line">    &quot;navigationBarTitleText&quot;: &quot;测试小程序&quot;, &#x2F;&#x2F;导航栏文字</span><br><span class="line">    &quot;navigationBarTextStyle&quot;:&quot;white&quot; &#x2F;&#x2F;文字的颜色</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;sitemapLocation&quot;: &quot;sitemap.json&quot;,</span><br><span class="line">  &quot;tabBar&quot;:&#123;</span><br><span class="line">    &quot;color&quot;:&quot;#ccc&quot;, </span><br><span class="line">    &quot;selectedColor&quot;:&quot;#35495e&quot;,</span><br><span class="line">    &quot;borderStyle&quot;:&quot;white&quot;,</span><br><span class="line">    &quot;backgroundColor&quot;:&quot;#f9f9f9&quot;,</span><br><span class="line">    &quot;list&quot;:[</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;text&quot;: &quot;榜单&quot;,</span><br><span class="line">        &quot;pagePath&quot;:&quot;pages&#x2F;board&#x2F;board&quot;,</span><br><span class="line">        &quot;iconPath&quot;:&quot;images&#x2F;board.png&quot;,</span><br><span class="line">        &quot;selectedIconPath&quot;:&quot;images&#x2F;board-actived.png&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;text&quot;: &quot;搜索&quot;,</span><br><span class="line">        &quot;pagePath&quot;: &quot;pages&#x2F;search&#x2F;search&quot;,</span><br><span class="line">        &quot;iconPath&quot;: &quot;images&#x2F;search.png&quot;,</span><br><span class="line">        &quot;selectedIconPath&quot;: &quot;images&#x2F;search-actived.png&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;text&quot;: &quot;我的&quot;,</span><br><span class="line">        &quot;pagePath&quot;: &quot;pages&#x2F;mine&#x2F;mine&quot;,</span><br><span class="line">        &quot;iconPath&quot;: &quot;images&#x2F;mine.png&quot;,</span><br><span class="line">        &quot;selectedIconPath&quot;: &quot;images&#x2F;mine-actived.png&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p><strong>结果：</strong>生成的导航栏如下图，自由度不大，只有一些固定的配置项<br><img src="https://s1.ax1x.com/2020/05/08/YKN6ds.png" alt="YKN6ds.png"></p>
<h2 id="二、发送请求"><a href="#二、发送请求" class="headerlink" title="二、发送请求"></a>二、发送请求</h2><p><strong>第一步：</strong>app.js中，定义一个全局数据：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">globalData: &#123;</span><br><span class="line">    baseUrl:&quot;https:&#x2F;&#x2F;douban.uieee.com&#x2F;v2&#x2F;movie&#x2F;&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">后续所有组件都可以通过如下方式获得这个数据：</span><br><span class="line">app &#x3D; getApp()  </span><br><span class="line">app.globalData.baseUrl</span><br></pre></td></tr></table></figure></div>
<p><strong>第二步：</strong>新建utils/douban.js，封装ajax请求：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">var app &#x3D; getApp(); </span><br><span class="line">export default (&#123;</span><br><span class="line">  &#x2F;&#x2F;下面几个是定义的数据，相当于var url &#x3D; &quot;&quot;</span><br><span class="line">  url,</span><br><span class="line">  data&#x3D;&#123;start:0,count:20&#125;,</span><br><span class="line">  method&#x3D;&#39;get&#39;,</span><br><span class="line">  loadingTop,</span><br><span class="line">  loadingCenter</span><br><span class="line"></span><br><span class="line">&#125;)&#x3D;&gt;&#123;</span><br><span class="line">  return new Promise((resolve,reject)&#x3D;&gt;&#123;</span><br><span class="line">    &#x2F;&#x2F;调用wx方法，在请求前显示加载中</span><br><span class="line">    if(loadingTop)&#123;</span><br><span class="line">      wx.showNavigationBarLoading() &#x2F;&#x2F;显示导航loading</span><br><span class="line">      wx.setNavigationBarTitle(&#123;    &#x2F;&#x2F;设置导航title</span><br><span class="line">        title: &#39;加载中...&#39;,</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    if(loadingCenter)&#123;</span><br><span class="line">      wx.showLoading(&#123;</span><br><span class="line">        title: &#39;加载中...&#39;,</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;调用微信的请求数据的方法</span><br><span class="line">    wx.request(&#123;</span><br><span class="line">      url:app.globalData.baseUrl+url,</span><br><span class="line">      data,</span><br><span class="line">      header: &#123;</span><br><span class="line">        &#39;content-type&#39;: &#39;json&#39; &#x2F;&#x2F;请求头的content-type可以更改</span><br><span class="line">      &#125;,</span><br><span class="line">      method,</span><br><span class="line">      success(res) &#123;</span><br><span class="line">        resolve(res)</span><br><span class="line">      &#125;,</span><br><span class="line">      fail(err)&#123;</span><br><span class="line">        reject(err)</span><br><span class="line">      &#125;,</span><br><span class="line"></span><br><span class="line">      &#x2F;&#x2F;不管请求成功还是请求失败，都会调用</span><br><span class="line">      complete()&#123;   </span><br><span class="line">        &#x2F;&#x2F;停止loading动画</span><br><span class="line">        if(loadingTop) wx.hideNavigationBarLoading()</span><br><span class="line">        if(loadingCenter) wx.hideLoading()</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p><strong>第三步：</strong>组件中调用，在组件的onLoad钩子函数中：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">import douban from &quot;..&#x2F;..&#x2F;utils&#x2F;</span><br><span class="line">Page(&#123;</span><br><span class="line">    onLoad: function (options) &#123;</span><br><span class="line">        douban(&#123;</span><br><span class="line">            url:&quot;in_theaters&quot;,</span><br><span class="line">            data:&#123;</span><br><span class="line">                count:3</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).then(res&#x3D;&gt;&#123;</span><br><span class="line">            &#x2F;&#x2F;得到请求的数据</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div>
<p><strong>第四步：</strong>设置合法域名<br>方法一：小程序网页=》开发设置=》服务器域名=》request合法域名（<a href="https://douban.uieee.com）" target="_blank" rel="noopener">https://douban.uieee.com）</a><br>方法二：详情=》本地设置=》不校验域名</p>
<h2 id="三、轮播图"><a href="#三、轮播图" class="headerlink" title="三、轮播图"></a>三、轮播图</h2><p>下面通过一个轮播图的案例，来讲解组件中4个文件的作用，以及一些方法；<br>知识点：</p>
<ul>
<li>指令：wx:for / wx:if / … ，和vue基本相同</li>
<li>组件：有很多自带组件，比如image，swiper，不用引入，直接用就行</li>
<li>数据：钩子函数中设置数据，不能直接复制，需要用this.setData；这里又和react相似了…</li>
<li>元素：没有div，ul这些元素了；一般用view，block当容器</li>
</ul>
<p><strong>第一步：</strong>首先改一下上面的，发送请求的代码；welcome.js中：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">import douban from &quot;..&#x2F;..&#x2F;utils&#x2F;douban.js&quot;</span><br><span class="line"></span><br><span class="line">data: &#123;</span><br><span class="line">	movies:[]</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">onLoad: function (options) &#123;</span><br><span class="line">    douban(&#123;</span><br><span class="line">      url:&quot;in_theaters&quot;,</span><br><span class="line">      data:&#123;</span><br><span class="line">        count:3</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;).then(res&#x3D;&gt;&#123;</span><br><span class="line">      console.log(&quot;res&quot;,res)</span><br><span class="line">      let result &#x3D; [];</span><br><span class="line">      res.data.subjects.map(item&#x3D;&gt;&#123;</span><br><span class="line">        result.push(&#123;</span><br><span class="line">          id:item.id,</span><br><span class="line">          image:item.images.large</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;)</span><br><span class="line">      &#x2F;&#x2F;进行数据的设置</span><br><span class="line">      this.setData(&#123;</span><br><span class="line">        movies:result</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>第二步：</strong>welcome，wxml中，实例化swiper，并设置小圆点indicator-dots：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">&lt;view class&#x3D;&quot;container&quot;&gt;</span><br><span class="line">  &lt;swiper class&#x3D;&quot;welcome&quot; indicator-dots indicator-color&#x3D;&quot;#ccc&quot;&gt;</span><br><span class="line">      &lt;block&gt;</span><br><span class="line">        &lt;swiper-item</span><br><span class="line">          class&#x3D;&quot;swiper-item&quot;</span><br><span class="line">          wx:for&#x3D;&quot;&#123;&#123;movies&#125;&#125;&quot;</span><br><span class="line">          wx:key&#x3D;&quot;id&quot;</span><br><span class="line">        &gt;</span><br><span class="line">          &lt;image class&#x3D;&quot;slide-image&quot; src&#x3D;&quot;&#123;&#123;item.image&#125;&#125;&quot;&#x2F;&gt;</span><br><span class="line">          &lt;button </span><br><span class="line">            wx:if&#x3D;&quot;&#123;&#123;movies.length-1 &#x3D;&#x3D;&#x3D; index&#125;&#125;&quot; </span><br><span class="line">            class&#x3D;&quot;start&quot;</span><br><span class="line">            bindtap&#x3D;&quot;clickHandler&quot;</span><br><span class="line">          &gt;立即体验&lt;&#x2F;button&gt;</span><br><span class="line">        &lt;&#x2F;swiper-item&gt;</span><br><span class="line">      &lt;&#x2F;block&gt;</span><br><span class="line">    &lt;&#x2F;swiper&gt;</span><br><span class="line">&lt;&#x2F;view&gt;</span><br></pre></td></tr></table></figure></div>

<p><strong>第三步：</strong>welcome.json中配置，使顶部消失变成全屏</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;navigationStyle&quot;:&quot;custom&quot;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>第四步：</strong>welcome.wxss中设置样式，轮播图就出来了<br><img src="https://s1.ax1x.com/2020/05/08/YKrdK0.png" alt="YKrdK0.png"></p>
<h2 id="四、绑定事件"><a href="#四、绑定事件" class="headerlink" title="四、绑定事件"></a>四、绑定事件</h2><p>小程序的事件绑定方式有两种：bind绑定（支持事件冒泡行为），catch绑定（非冒泡）；<br>事件参数传递通过data-形式传递；</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">&lt;text data-a&#x3D;&#39;10&#39; bindtap&#x3D;&quot;clickme&quot;&gt;pages&#x2F;board&#x2F;board.wxml&lt;&#x2F;text&gt;</span><br><span class="line"></span><br><span class="line">clickme(event)&#123;</span><br><span class="line">    console.log(event.target.dataset.a)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="五、自定义组件"><a href="#五、自定义组件" class="headerlink" title="五、自定义组件"></a>五、自定义组件</h2><p>利用自定义组件实现列表页；</p>
<h3 id="第一步创建"><a href="#第一步创建" class="headerlink" title="第一步创建"></a>第一步创建</h3><p>pages/components，右键新建products组件，<br>①products.js：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">Component(&#123;</span><br><span class="line">  &#x2F;&#x2F;这里接收父组件的参数，并指定为object类型</span><br><span class="line">  properties: &#123;</span><br><span class="line">    item:&#123;</span><br><span class="line">      type:Object</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F;点击跳转到详情页</span><br><span class="line">  methods: &#123;</span><br><span class="line">    clickHandler()&#123;</span><br><span class="line">      wx.navigateTo(&#123;</span><br><span class="line">        url: &#39;&#x2F;pages&#x2F;item&#x2F;item?id&#x3D;&#39;+this.properties.item.id,</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div>

<p>②products.json：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;component&quot;: true,</span><br><span class="line">  &quot;usingComponents&quot;: &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>③products.wxml写结构：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">&lt;view class&#x3D;&quot;item&quot; bindtap&#x3D;&quot;clickHandler&quot;&gt;</span><br><span class="line">  &lt;image class&#x3D;&quot;poster&quot; src&#x3D;&quot;&#123;&#123;item.image&#125;&#125;&quot;&gt;&lt;&#x2F;image&gt;</span><br><span class="line">  &lt;view class&#x3D;&quot;meta&quot;&gt;</span><br><span class="line">    &lt;text class&#x3D;&quot;title&quot;&gt;&#123;&#123;item.title&#125;&#125;&lt;&#x2F;text&gt;</span><br><span class="line">    &lt;text class&#x3D;&quot;sub-title&quot;&gt;&#123;&#123;item.original_title&#125;&#125; (&#123;&#123;item.year&#125;&#125;)&lt;&#x2F;text&gt;</span><br><span class="line">    &lt;view class&#x3D;&quot;directors&quot;&gt;导演：&lt;block wx:for&#x3D;&quot;&#123;&#123;item.directors&#125;&#125;&quot; wx:key&#x3D;&quot;id&quot;&gt;&#123;&#123;item.name&#125;&#125;&lt;&#x2F;block&gt;&lt;&#x2F;view&gt;</span><br><span class="line">  &lt;&#x2F;view&gt;</span><br><span class="line">  &lt;view class&#x3D;&quot;rating&quot;&gt;&#123;&#123;item.average&#125;&#125;&lt;&#x2F;view&gt;</span><br><span class="line">&lt;&#x2F;view&gt;</span><br></pre></td></tr></table></figure></div>

<p>④products.wxss写样式；</p>
<h3 id="第二步注册"><a href="#第二步注册" class="headerlink" title="第二步注册"></a>第二步注册</h3><p>list.json中注册组件：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;usingComponents&quot;: &#123;</span><br><span class="line">    &quot;products&quot;: &quot;.&#x2F;..&#x2F;components&#x2F;products&#x2F;products&quot;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F;下面代码指定顶部的样式</span><br><span class="line">  &quot;navigationBarTitleText&quot;: &quot;&quot;,</span><br><span class="line">  &quot;enablePullDownRefresh&quot;: true,</span><br><span class="line">  &quot;backgroundTextStyle&quot;: &quot;dark&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="第三步调用"><a href="#第三步调用" class="headerlink" title="第三步调用"></a>第三步调用</h3><p>list.wxml中使用组件：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">&lt;view class&#x3D;&quot;list&quot;&gt;</span><br><span class="line">  &lt;block wx:for&#x3D;&quot;&#123;&#123;list&#125;&#125;&quot; wx:key&#x3D;&quot;id&quot;&gt;</span><br><span class="line">    &lt;products item&#x3D;&#39;&#123;&#123;item&#125;&#125;&#39; &#x2F;&gt;</span><br><span class="line">  &lt;&#x2F;block&gt;</span><br><span class="line">&lt;&#x2F;view&gt;</span><br></pre></td></tr></table></figure></div>

<h2 id="六、路由跳转"><a href="#六、路由跳转" class="headerlink" title="六、路由跳转"></a>六、路由跳转</h2><p>详细见开发者文档；</p>
<p>1) wx.switchTab(Object object)<br>跳转到 tabBar 页面，并关闭其他所有非 tabBar 页面</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">wx.switchTab(&#123;</span><br><span class="line">	url: &#39;&#x2F;pages&#x2F;search&#x2F;search&#39;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div>

<p>2) wx.reLaunch(Object object)<br>关闭所有页面，打开应用内的某一个页面</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">wx.reLaunch(&#123;</span><br><span class="line">    url: &#39;&#x2F;pages&#x2F;list&#x2F;list?id&#x3D;1&amp;name&#x3D;zhangsan&#39;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">onLoad: function (options) &#123;</span><br><span class="line">	console.log(&quot;list-id&quot;,options)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>3）wx.redirectTo(Object object)<br>关闭当前页面，跳转到应用内的某个页面。但是不允许跳转到 tabbar 页面</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">wx.redirectTo(&#123;</span><br><span class="line">	url:&quot;&#x2F;pages&#x2F;list&#x2F;list?id&#x3D;1&quot;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div>

<p>4）wx.navigateTo(Object object)<br>保留当前页面，跳转到应用内的某个页面。但是不能跳到 tabbar 页面。使用<a href="https://developers.weixin.qq.com/miniprogram/dev/api/route/wx.navigateBack.html" target="_blank">wx.navigateTo</a>可以返回到原页面。小程序中页面栈最多十层</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">wx.navigateTo(&#123;</span><br><span class="line">	url: &#39;&#x2F;pages&#x2F;list&#x2F;list?id&#x3D;1&#39;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div>

<p>5）wx.navigateBack(Object object)<br>关闭当前页面，返回上一页面或多级页面。可通过<a href="https://developers.weixin.qq.com/miniprogram/dev/reference/api/getCurrentPages.html" target="_blank" rel="noopener">wx.navigateBack</a>获取当前的页面栈，决定需要返回几层</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 注意：调用 navigateTo 跳转时，调用该方法的页面会被加入堆栈，</span><br><span class="line">&#x2F;&#x2F; 而 redirectTo 方法则不会。见下方示例代码</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 此处是A页面</span><br><span class="line">wx.navigateTo(&#123;</span><br><span class="line">  url: &#39;B?id&#x3D;1&#39;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 此处是B页面</span><br><span class="line">wx.navigateTo(&#123;</span><br><span class="line">  url: &#39;C?id&#x3D;1&#39;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 在C页面内 navigateBack，将返回A页面</span><br><span class="line">wx.navigateBack(&#123;</span><br><span class="line">  delta: 2  &#x2F;&#x2F; A&#x3D;&gt;B&#x3D;&gt;C  现在从c直接到a，那么就写个2，默认是1，只能返回B</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div>

<h3 id="路由跳转实例"><a href="#路由跳转实例" class="headerlink" title="路由跳转实例"></a>路由跳转实例</h3><p>列表页到详情页，products.js：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">&lt;view class&#x3D;&quot;item&quot; bindtap&#x3D;&quot;clickHandler&quot;&gt;</span><br><span class="line">...</span><br><span class="line">&lt;&#x2F;view&gt;</span><br><span class="line"></span><br><span class="line">methods: &#123;</span><br><span class="line">    &#x2F;&#x2F;点击product的时候跳转方法</span><br><span class="line">    clickHandler()&#123;</span><br><span class="line">      wx.navigateTo(&#123;</span><br><span class="line">        url: &#39;&#x2F;pages&#x2F;item&#x2F;item?id&#x3D;&#39;+this.properties.item.id,</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>跳转到详情页item后，接收id并发起请求，<br><strong>item.js</strong>的onLoad中，options就是上面传过来的<code>this.properties.item.id</code>:</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">onLoad: function (options) &#123;</span><br><span class="line">  &#x2F;&#x2F; 请求数据</span><br><span class="line">  douban(&#123;</span><br><span class="line">    url: &quot;subject&#x2F;&quot; + options.id,</span><br><span class="line">    loadingTop:true, &#x2F;&#x2F;在导航栏上面显示loading</span><br><span class="line">  &#125;).then(res&#x3D;&gt;&#123;</span><br><span class="line">    let photos &#x3D; []</span><br><span class="line">    res.data.photos.map(item&#x3D;&gt;&#123;</span><br><span class="line">      photos.push(item.image)  </span><br><span class="line">    &#125;)</span><br><span class="line">    this.setData(&#123;</span><br><span class="line">      photos,</span><br><span class="line">      detail: res.data,</span><br><span class="line">      title:res.data.title</span><br><span class="line">    &#125;)</span><br><span class="line">    &#x2F;&#x2F;设置导航的标题</span><br><span class="line">    wx.setNavigationBarTitle(&#123;</span><br><span class="line">      title: this.data.title</span><br><span class="line">    &#125;)</span><br><span class="line">    &#x2F;&#x2F;设置导航栏颜色</span><br><span class="line">    wx.setNavigationBarColor(&#123;</span><br><span class="line">      frontColor: &#39;#ffffff&#39;,</span><br><span class="line">      backgroundColor: &#39;#f45332&#39;,</span><br><span class="line">      animation: &#123;</span><br><span class="line">        duration: 400,</span><br><span class="line">        timingFunc: &#39;easeIn&#39;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></div>
<p>最后<strong>item.wxml</strong>中渲染页面即可；</p>
<h2 id="七、单位"><a href="#七、单位" class="headerlink" title="七、单位"></a>七、单位</h2><p>小程序里木有rem和vw，可以用rpx适配；<br>例如iphone6，1css像素 -&gt; 2物理像素 -&gt; 2rpx</p>
<ul>
<li><strong>iPhone5：</strong>1rpx = 0.42px；1px = 2.34rpx</li>
<li><strong>iPhone6：</strong>1rpx = 0.5px；1px = 2rpx</li>
<li><strong>iPhone6 Plus：</strong>1rpx = 0.552px；1px = 1.81rpx</li>
</ul>
<h2 id="八、其他"><a href="#八、其他" class="headerlink" title="八、其他"></a>八、其他</h2><p>微信小程序还有很多钩子函数和方法，下面展示其中两个用法，其他的看开发者文档就行；</p>
<h3 id="下拉刷新"><a href="#下拉刷新" class="headerlink" title="下拉刷新"></a>下拉刷新</h3><p>list.json：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;navigationBarTitleText&quot;: &quot;&quot;,</span><br><span class="line">  &quot;enablePullDownRefresh&quot;:true,  &#x2F;&#x2F;开启当前list页面的下拉刷新</span><br><span class="line">  &quot;backgroundTextStyle&quot;:&quot;dark&quot;,  &#x2F;&#x2F;下拉刷新的loading  light or dark</span><br><span class="line">  &quot;usingComponents&quot;: &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>list.js:</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 页面相关事件处理函数--监听用户下拉动作</span><br><span class="line">onPullDownRefresh: function () &#123;</span><br><span class="line">  this.update()  &#x2F;&#x2F;下拉时重新请求数据</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></div>

<h3 id="图片预览"><a href="#图片预览" class="headerlink" title="图片预览"></a>图片预览</h3><p>点击时出现urls里的图片：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">clickImage()&#123;</span><br><span class="line">    wx.previewImage(&#123; &#x2F;&#x2F;实现图片的预览</span><br><span class="line">        urls: this.data.photos, </span><br><span class="line">    &#125;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></div>

<h2 id="九、上传发布"><a href="#九、上传发布" class="headerlink" title="九、上传发布"></a>九、上传发布</h2><ol>
<li>开发者工具，右上角上传</li>
<li>微信公众平台 -&gt; 版本管理查看测试版</li>
<li>点击审核，现在基本上是人工审核，所以预览图片和视频最好细心填上</li>
<li>审核完成后，直接微信搜索项目名称，就能使用了</li>
</ol>
<h2 id="十、微信支付"><a href="#十、微信支付" class="headerlink" title="十、微信支付"></a>十、微信支付</h2><p>比较简单…直接看别人的分享把…<br><a href="https://cloud.tencent.com/developer/article/1500955" target="_blank" rel="noopener">https://cloud.tencent.com/developer/article/1500955</a><br><a href="https://www.jianshu.com/p/bd96741287a8" target="_blank" rel="noopener">https://www.jianshu.com/p/bd96741287a8</a><br><a href="https://www.jianshu.com/p/bd96741287a8" target="_blank" rel="noopener">https://www.jianshu.com/p/bd96741287a8</a></p>
]]></content>
      <categories>
        <category>小程序</category>
      </categories>
  </entry>
  <entry>
    <title>理解函数的空间，以及闭包</title>
    <url>/jackhuang-haohua.github.io/2018/06/21/2020-05-%E5%87%BD%E6%95%B0%E8%BF%87%E7%A8%8B%E5%92%8C%E9%97%AD%E5%8C%85/</url>
    <content><![CDATA[<h2 id="函数空间"><a href="#函数空间" class="headerlink" title="函数空间"></a>函数空间</h2><p>　我们知道，简单数据类型存储在栈里，复杂数据类型存储了堆里，那么一个函数定义和执行阶段，栈和堆的空间是怎么变化的呢？</p>
<ul>
<li><p>函数定义阶段</p>
<ol>
<li>在内存中开辟一个存储空间</li>
<li>把函数体内的代码当作字符串一模一样的放在这个空间中，此时不解析变量</li>
<li>把这个空间地址赋值给函数名(变量名)</li>
</ol>
</li>
<li><p>函数调用阶段</p>
<ol>
<li>按照函数名(变量名)找到对应的存储空间</li>
<li>重新开辟一个函数<strong>执行空间</strong></li>
<li>在这个执行空间里面进行形参赋值</li>
<li>在这个执行空间里面进行预解析</li>
<li>把函数存储空间的代码复制一份到执行空间里面执行一遍</li>
<li>执行完毕之后, 这个开辟出来的执行<strong>空间销毁</strong></li>
</ol>
</li>
</ul>
<p>如下图所示，要记住执行空间知识临时的：<br><img src="https://s1.ax1x.com/2020/05/19/YI1J1K.png" alt="YI1J1K.png"></p>
<h2 id="了解闭包"><a href="#了解闭包" class="headerlink" title="了解闭包"></a>了解闭包</h2><p>　如果我们有函数A，函数里面定义了一个变量a，这个a是需要函数调用才会解析，并且作用域也在函数内部，那么我们在外部得到这个变量呢？<br>　这就涉及到闭包了。</p>
<h3 id="闭包的条件"><a href="#闭包的条件" class="headerlink" title="闭包的条件"></a>闭包的条件</h3><ul>
<li><p>闭包的生成有三个必要条件(缺一不可)</p>
<ol>
<li>在函数 A 内部直接或者间接返回一个函数 B</li>
<li>B 函数内部使用着 A 函数的私有变量(私有数据)</li>
<li>A 函数外部有一个变量接受着函数 B</li>
</ol>
</li>
<li><p>通过以上条件，会形成一个不会销毁的函数空间，也叫闭包空间</p>
<ul>
<li>我们管这个不会销毁的 a 函数的执行空间叫做 闭包空间</li>
<li>把函数 a 里面返回的 函数 b, 叫做函数a 的 闭包函数</li>
<li>官方给的定义有一句话: 闭包 =&gt; 函数内部的函数</li>
</ul>
</li>
</ul>
<p><strong>示例代码：</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// num 为函数 a 的私有变量</span></span><br><span class="line">  <span class="keyword">var</span> num = <span class="number">100</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(num)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> res = a()</span><br><span class="line"><span class="comment">// 调用 res 时即调用 b 打印num</span></span><br><span class="line">res()</span><br></pre></td></tr></table></figure></div>

<h3 id="闭包的特点"><a href="#闭包的特点" class="headerlink" title="闭包的特点"></a>闭包的特点</h3><ol>
<li><p>延长了变量的生命周期</p>
<ul>
<li>优点: 因为执行空间不销毁，变量也没有销毁</li>
<li>缺点: 因为执行空间不销毁，会一直存在在内存中</li>
</ul>
</li>
<li><p>可以访问函数内部的私有变量</p>
<ul>
<li>优点: 利用闭包函数可以访问函数内部的私有变量</li>
<li>缺点: 执行空间不会销毁，会一直存在在内存中</li>
</ul>
</li>
<li><p>保护私有变量(只要是函数，就有这个特点)</p>
<ul>
<li>优点: 保护私有变量不被外界访问</li>
<li>缺点: 如果向访问，必须要利用闭包函数</li>
</ul>
</li>
<li><p>闭包的函数的缺点</p>
</li>
</ol>
<ul>
<li>因为当一段内存空间中有一个不会被销毁的东西一直存在；</li>
<li>那么就会出现内存占用，如果过多，就会导致内存溢出；</li>
<li>那么结果就是<strong>内存泄漏</strong>，这是一个很致命的缺点。</li>
</ul>
<p><em>因为会有内存泄漏的问题，所以闭包要谨慎使用；</em></p>
<h2 id="闭包的应用"><a href="#闭包的应用" class="headerlink" title="闭包的应用"></a>闭包的应用</h2><h3 id="访问多个私有数据"><a href="#访问多个私有数据" class="headerlink" title="访问多个私有数据"></a>访问多个私有数据</h3><p>return一个对象出来：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> num = <span class="number">100</span></span><br><span class="line">  <span class="keyword">var</span> num2 = <span class="number">200</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123; <span class="comment">// 对象的名称语义化比数组的索引要强一些</span></span><br><span class="line">    getNum: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(num)</span><br><span class="line">    &#125;,</span><br><span class="line">    getNum2: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(num2)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> res = fn()</span><br><span class="line"></span><br><span class="line">res.getNum()</span><br><span class="line">res.getNum2()</span><br></pre></td></tr></table></figure></div>

<h3 id="循环绑定"><a href="#循环绑定" class="headerlink" title="循环绑定"></a>循环绑定</h3><p>假如有这么一个需求：获取所有按钮，循环绑定事件，点击按钮时打印出对应的索引</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 闭包解决问题</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loop</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 这个函数第一次执行的时候 i === 0</span></span><br><span class="line">  <span class="comment">// 这个函数第而次执行的时候 i === 1</span></span><br><span class="line">  btns[num].onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(num)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// btns 就是外部的一个变量</span></span><br><span class="line">  <span class="comment">// btns[0] 就是外部的内容</span></span><br><span class="line">  <span class="comment">// btns[0].onclick 成员就是外部的数据</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; btns.length; i++) &#123;</span><br><span class="line">  loop(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p><img src="https://s1.ax1x.com/2020/05/19/YIGHjf.png" alt="YIGHjf.png"></p>
<p>这里的逻辑是这样的：</p>
<ol>
<li>定义函数loop，在栈里生成变量loop，在堆里开辟一个存储空间，把函数体放进去；</li>
<li>执行for循环，栈里生成btns伪数组，堆里开辟一个伪数组空间，存储几个按钮；</li>
<li>点击每一个按钮时，都会开辟一个loop的执行空间，<strong>并且这些执行空间都不会消失</strong>，用来执行btns里的函数体；</li>
<li>如果不使用闭包的话，每一次点击都会重新开辟loop执行空间，然后销毁，数据都会初始化，无法进行后续操作；</li>
</ol>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>混合开发</title>
    <url>/jackhuang-haohua.github.io/2019/10/12/2020-05-%E6%B7%B7%E5%90%88%E5%BC%80%E5%8F%91/</url>
    <content><![CDATA[<h2 id="一、原生语言"><a href="#一、原生语言" class="headerlink" title="一、原生语言"></a>一、原生语言</h2><p>　苹果手机：ios系统，由swift和c++/object-c语言编写，后缀名为ipa（ios开发的安装包的后缀名），swift语言是一种开源的语言；<br>　安卓手机：android系统，由java（android）语言编写，后缀名为apk<br>　wp手机：windowphone系统，由c#语言编写， 一般说到混合开发不考虑这个版本<br><img src="https://s1.ax1x.com/2020/05/06/YE6Vsg.png" alt="YE6Vsg.png"></p>
<h2 id="二、混合开发"><a href="#二、混合开发" class="headerlink" title="二、混合开发"></a>二、混合开发</h2><p>　即原生语言开发+js的开发；<br>　js无法调动系统的原生功能（拍照、短信、打电话、通讯录），但是原生（android、ios、wp）可以<br>原生有很大的适配问题（特别是android），且更新麻烦（比如频繁更新活动，原生不好做），而js可以很好的解决这个问题；</p>
<p><strong>三种App</strong><br>　hybridapp：js+android/ios，可以安装至手机应用；<br>　webapp/m站：js完成，touch端项目，浏览器上访问的手机网站；<br>　nativeapp：android/ios，可以安装至手机应用；</p>
<h2 id="三、Android-js开发"><a href="#三、Android-js开发" class="headerlink" title="三、Android+js开发"></a>三、Android+js开发</h2><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p><strong>安装java jdk</strong><br>　下载的是<code>jdk-8u91-windows-x64.exe</code>，<br>　然后按照这个来配置path：<a href="https://jingyan.baidu.com/article/6dad5075d1dc40a123e36ea3.html" target="_blank">jdk配置文档</a>，<br>　在cmd输入<code>java -version</code>，如果现实java版本则表示安装成功；</p>
<p><strong>安装android-studio</strong><br>　由intellij编辑器插件扩展而来；<a href="https://www.runoob.com/android/android-studio-install.html" target="_blank">安装教程</a>；<br>　如果安装是遇到sdk报错：<a href="https://www.jianshu.com/p/ab4a46c05f7c" target="_blank">解决办法</a></p>
<h2 id="四、新建项目"><a href="#四、新建项目" class="headerlink" title="四、新建项目"></a>四、新建项目</h2><p>　会遇到一些选项；</p>
<ul>
<li>Application name：应用名称</li>
<li>Company domain：公司标识</li>
<li>Package name：应用包名，唯一标识；提示应用更新，数据统计等会用到</li>
<li>Minimum SDK：指定手机系统，基于API X开发</li>
<li>Phone and Tablet / wear / TV ：开发的应用在什么设备运行</li>
</ul>
<p>在这里提示sdk错误，我搞了一晚上都没解决，后来直接让朋友帮我配置好了；</p>
<p><strong>界面如下：</strong><br><img src="https://s1.ax1x.com/2020/05/08/YmXRZF.png" alt="YmXRZF.png"></p>
<ul>
<li>/java/com.xxx/MainActivity.java：相当于总入口文件，写业务逻辑</li>
<li>/res/layout/activity_main.xml：结构文件，写样式和结构</li>
<li>左下的Design/Text，对应 设计界面/代码界面</li>
</ul>
<p><strong>layout原生代码是这样的：</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">&lt;android.support.constraint.ConstraintLayout xmlns:android&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res&#x2F;android&quot;</span><br><span class="line">    xmlns:app&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res-auto&quot;</span><br><span class="line">    xmlns:tools&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;tools&quot;</span><br><span class="line">    android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class="line">    android:layout_height&#x3D;&quot;match_parent&quot;</span><br><span class="line">    android:orientation&#x3D;&quot;vertical&quot; &#x2F;&#x2F;让元素垂直布局</span><br><span class="line">    tools:context&#x3D;&quot;com.example.pc.myapplication.MainActivity&quot;&gt;</span><br><span class="line"></span><br><span class="line">    此时页面只有一个 Hello World!，就是下面这个元素</span><br><span class="line">    &lt;TextView</span><br><span class="line">        android:layout_width&#x3D;&quot;wrap_content&quot;</span><br><span class="line">        android:layout_height&#x3D;&quot;wrap_content&quot;</span><br><span class="line">        android:text&#x3D;&quot;Hello World!&quot;</span><br><span class="line">        app:layout_constraintBottom_toBottomOf&#x3D;&quot;parent&quot;</span><br><span class="line">        app:layout_constraintLeft_toLeftOf&#x3D;&quot;parent&quot;</span><br><span class="line">        app:layout_constraintRight_toRightOf&#x3D;&quot;parent&quot;</span><br><span class="line">        app:layout_constraintTop_toTopOf&#x3D;&quot;parent&quot; &#x2F;&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;android.support.constraint.ConstraintLayout&gt;</span><br></pre></td></tr></table></figure></div>
<p><img src="https://s1.ax1x.com/2020/05/08/YmjYWR.png" alt="YmjYWR.png"><br>　如果要新建元素，可以直接在设计页面把Button拖到画布上，然后右边的<code>Properties</code>可以直接选择按钮的属性；<br>　如下代码，<code>MainActivity.java</code>中定义了一个按钮，点击后弹出内容：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">public class MainActivity extends AppCompatActivity &#123;</span><br><span class="line">    private Button btn; &#x2F;&#x2F;定义变量btn</span><br><span class="line">    private View.OnClickListener btnonClickHandler &#x3D; new View.OnClickListener()&#123;</span><br><span class="line">        @Override</span><br><span class="line">        public void onClick(View view) &#123;</span><br><span class="line">            &#x2F;&#x2F;点击的业务逻辑</span><br><span class="line">            Toast.makeText(MainActivity.this,&quot;我是弹出的内容&quot;,Toast.LENGTH_SHORT).show();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">        super.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        initView(); &#x2F;&#x2F;定义一个方法</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void initView() &#123;</span><br><span class="line">        btn &#x3D; (Button) findViewById(R.id.btn1); &#x2F;&#x2F;获取btn</span><br><span class="line">        btn.setOnClickListener(btnonClickHandler); &#x2F;&#x2F;给btn绑定点击事件</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>　<strong>对于Android的代码认识就到这里了…后端会建一个webview控件，然后在这个组件里加载一个url地址，这个url地址就是内嵌的前端界面</strong></p>
<h2 id="内嵌外部页面"><a href="#内嵌外部页面" class="headerlink" title="内嵌外部页面"></a>内嵌外部页面</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">private void initView() &#123;</span><br><span class="line">    btn &#x3D; (Button) findViewById(R.id.btn1);</span><br><span class="line">    btn.setOnClickListener(btnonClickHandler);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;加载京东的页面</span><br><span class="line">    wv.loadUrl(&quot;https:&#x2F;&#x2F;m.jd.com&quot;);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;加载本地页面</span><br><span class="line">    wv.loadUrl(&quot;file:&#x2F;&#x2F;&#x2F;android_asset&#x2F;index.html&quot;);</span><br><span class="line">    &#x2F;&#x2F; 添加JS调用Android(Java)的方法接口</span><br><span class="line">    wv.addJavascriptInterface(new MJavascriptInterface(getApplicationContext()), &quot;ToastFunc&quot;);</span><br><span class="line">    wv.addJavascriptInterface(new PhotoJavascriptInterface(getApplicationContext()), &quot;PhotoFunc&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>　此时页面有了，但是JS交互都不行，需要安卓工程师做一些设置</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">private void initView() &#123;</span><br><span class="line">    btn &#x3D; (Button) findViewById(R.id.btn1);</span><br><span class="line">    btn.setOnClickListener(btnonClickHandler);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 默认的Webview是需要进行配置才能达到我们想要的一些浏览器的特性</span><br><span class="line">    wvSetting();</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;加载京东的页面</span><br><span class="line">    wv.loadUrl(&quot;https:&#x2F;&#x2F;m.jd.com&quot;);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;加载本地页面</span><br><span class="line">    wv.loadUrl(&quot;file:&#x2F;&#x2F;&#x2F;android_asset&#x2F;index.html&quot;);</span><br><span class="line">    &#x2F;&#x2F; 添加JS调用Android(Java)的方法接口</span><br><span class="line">    wv.addJavascriptInterface(new MJavascriptInterface(getApplicationContext()), &quot;ToastFunc&quot;);</span><br><span class="line">    wv.addJavascriptInterface(new PhotoJavascriptInterface(getApplicationContext()), &quot;PhotoFunc&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private void wvSetting() &#123;</span><br><span class="line">    &#x2F;&#x2F;声明WebSettings子类</span><br><span class="line">    WebSettings webSettings &#x3D; wv.getSettings();</span><br><span class="line">    &#x2F;&#x2F;如果访问的页面中要与Javascript交互，则webview必须设置支持Javascript</span><br><span class="line">    webSettings.setJavaScriptEnabled(true);</span><br><span class="line">    &#x2F;&#x2F; 若加载的 html 里有JS 在执行动画等操作，会造成资源浪费（CPU、电量）</span><br><span class="line">    &#x2F;&#x2F; 在 onStop 和 onResume 里分别把 setJavaScriptEnabled() 给设置成 false 和 true 即可</span><br><span class="line">    &#x2F;&#x2F;设置自适应屏幕，两者合用</span><br><span class="line">    webSettings.setUseWideViewPort(true); &#x2F;&#x2F;将图片调整到适合webview的大小</span><br><span class="line">    webSettings.setLoadWithOverviewMode(true); &#x2F;&#x2F; 缩放至屏幕的大小</span><br><span class="line">    &#x2F;&#x2F;缩放操作</span><br><span class="line">    webSettings.setSupportZoom(true); &#x2F;&#x2F;支持缩放，默认为true。是下面那个的前提。</span><br><span class="line">    webSettings.setBuiltInZoomControls(true); &#x2F;&#x2F;设置内置的缩放控件。若为false，则该WebView不可缩放</span><br><span class="line">    webSettings.setDisplayZoomControls(false); &#x2F;&#x2F;隐藏原生的缩放控件</span><br><span class="line">    &#x2F;&#x2F;其他细节操作</span><br><span class="line">    webSettings.setCacheMode(WebSettings.LOAD_CACHE_ELSE_NETWORK); &#x2F;&#x2F;关闭webview中缓存</span><br><span class="line">    webSettings.setAllowFileAccess(true); &#x2F;&#x2F;设置可以访问文件</span><br><span class="line">    webSettings.setJavaScriptCanOpenWindowsAutomatically(true); &#x2F;&#x2F;支持通过JS打开新窗口</span><br><span class="line">    webSettings.setLoadsImagesAutomatically(true); &#x2F;&#x2F;支持自动加载图片</span><br><span class="line">    webSettings.setDefaultTextEncodingName(&quot;utf-8&quot;);&#x2F;&#x2F;设置编码格式</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="内嵌本地页面，JS调用原生安卓方法"><a href="#内嵌本地页面，JS调用原生安卓方法" class="headerlink" title="内嵌本地页面，JS调用原生安卓方法"></a>内嵌本地页面，JS调用原生安卓方法</h2><p>　下面代码展示了内嵌本地页面，给页面绑定原生安卓上的一些方法</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">private void initView() &#123;</span><br><span class="line">    ......</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;加载本地页面</span><br><span class="line">    wv.loadUrl(&quot;file:&#x2F;&#x2F;&#x2F;android_asset&#x2F;index.html&quot;);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 添加JS调用Android(Java)的方法接口</span><br><span class="line">    wv.addJavascriptInterface(new MJavascriptInterface(getApplicationContext()), &quot;ToastFunc&quot;);</span><br><span class="line">    wv.addJavascriptInterface(new PhotoJavascriptInterface(getApplicationContext()), &quot;PhotoFunc&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>　然后我们就可以在JS里使用原生的方法了：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 这些方法都是后端给的，前端只需要在JS中用就行</span></span></span><br><span class="line"><span class="javascript">    $(<span class="string">'#btn'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="actionscript">        alert(<span class="string">'我是js按钮，想要调用android的Toast功能'</span>)</span></span><br><span class="line"><span class="javascript">        <span class="built_in">window</span>.ToastFunc.showToastParams(<span class="string">'弹出信息'</span>)</span></span><br><span class="line">    &#125;)</span><br><span class="line"><span class="javascript">    $(<span class="string">'#takePhoto'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line">        PhotoFunc.takePhoto()</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="javascript">    $(<span class="string">'#getPhoto'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line">        PhotoFunc.getPhoto()</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">getData</span> <span class="params">(str)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">        $(<span class="string">'#msg'</span>).html(str)</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
<p>　前端只需要按照项目需求编写页面，假设你的一个按钮需要调用系统的功能（部分功能需要添加权限、摄像头、存储照片至sd卡权限）;<br>　在你的按钮事件中调用由android工程师提供的相对应的对象和其方法即可;<br>　同时前端也会定义一些方法，但是前端自己不去调用，android会根据webview的loadUrl方法进行调用，并且传参，进一步调用前端的代码（具体如何做根据需求去看）；<br>　比如前端给后端传一个方法A -&gt; 后端调用A并传参ID -&gt; 前端收到ID -&gt; 根据这个ID来请求详情页;</p>
<blockquote>
<p>H5主导的开发模式：如果把这些对象封装起来（plus），结合特定的环境（hbuilder），前端可以直接调用原生设备，那么前端人员也就可以自己做混合开发的项目了；比如<a href="https://www.baidu.com/link?url=YNrntUq2n31E2RjvCgpQIWgnvZ22eW55pS9yMC_u4K_&wd=&eqid=9127cbb900009618000000065eb44b2e" target="_blank">Dcloud</a></p>
</blockquote>
]]></content>
      <categories>
        <category>App</category>
      </categories>
  </entry>
  <entry>
    <title>对于异步的研究</title>
    <url>/jackhuang-haohua.github.io/2018/06/23/2020-05-%E5%9B%9E%E8%B0%83%E4%B8%8Epromise/</url>
    <content><![CDATA[<h2 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h2><p>　回调函数是一种函数的应用方式：<br>　当在调用a函数的时候，把b函数当作参数传递进去，在a函数里面使用形参的方式调用b函数，这个行为就叫做回调函数<br>　为什么要使用回调函数？为了在<strong>异步</strong>请求的末尾做某些事情的时候使用，如果代码全都是同步代码, 那么不需要回调函数；</p>
<h2 id="回调地狱"><a href="#回调地狱" class="headerlink" title="回调地狱"></a>回调地狱</h2><p>　当回调函数嵌套过多的时候出现的一个现象，代码没有语法错误，只是不好进行后期维护；<br>　比如有这么一个连续计算需求:</p>
<ol>
<li>发送一个请求到a.php，<br>-&gt; 得到res为两个数字</li>
<li>在第一个请求结束以后，发送第二个请求到 b.php<br>-&gt; 需要携带第一个请求返回来的结果<br>-&gt; 接着得到一个结果，结果就是两个数字的和，和另外一个数字</li>
<li>在第二个请求结束以后, 发送第三个请求到 c.php<br>-&gt; 需要携带第二个请求返回来的结果<br>-&gt; 能得到一个结果, 结果就是两个数字的乘积</li>
</ol>
<p>按照这个需求，代码是这样的：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line">getSend(<span class="string">'./cb1/a.php'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> result = <span class="built_in">JSON</span>.parse(res)</span><br><span class="line"></span><br><span class="line">    getSend(<span class="string">`./cb1/b.php?n1=<span class="subst">$&#123;result.n1&#125;</span>&amp;n2=<span class="subst">$&#123;result.n2&#125;</span>`</span>, <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> result = <span class="built_in">JSON</span>.parse(res)</span><br><span class="line"></span><br><span class="line">        getSend(<span class="string">`./cb1/c.php?and=<span class="subst">$&#123;result.and&#125;</span>&amp;n3=<span class="subst">$&#123;result.n3&#125;</span>`</span>, <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> result = <span class="built_in">JSON</span>.parse(res)</span><br><span class="line">            <span class="built_in">console</span>.log(result);</span><br><span class="line"></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div>
<p>可以看到在得到结果后再次调用函数，不断重复，最后可维护性很差；</p>
<h2 id="promise"><a href="#promise" class="headerlink" title="promise"></a>promise</h2><p>　Promise是异步编程的一种解决方案，可以替代传统的回调函数。ES6统一了用法，并原生提供了Promise对象。<br>　作为对象，Promise有一下两个特点：</p>
<ul>
<li>（1）对象的状态不受外界影响。</li>
<li>（2）一旦状态改变了就不会在变，也就是说任何时候Promise都只有一种状态。</li>
</ul>
<h3 id="promise的状态"><a href="#promise的状态" class="headerlink" title="promise的状态"></a>promise的状态</h3><p>　Promise有三种状态：</p>
<ul>
<li>Pending (进行中)</li>
<li>Resolved (已完成)</li>
<li>Rejected (已失败)</li>
</ul>
<p>　Promise从Pending状态开始，如果成功就转到成功态，并执行resolve回调函数；如果失败就转到失败状态并执行reject回调函数<br>　以下部分参考<a href="https://www.cnblogs.com/Mrfanl/p/10563542.html" target="_blank">博客园Mrfanl的文章</a></p>
<h3 id="resolve"><a href="#resolve" class="headerlink" title="resolve"></a>resolve</h3><p>可以调用resolve并将操作结果作为其参数传递出去：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">greet</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> greet = <span class="string">"hello world"</span>;</span><br><span class="line">        resolve(greet);</span><br><span class="line">    &#125;);</span><br><span class="line">        <span class="keyword">return</span> promise;</span><br><span class="line">  &#125;</span><br><span class="line">    greet().then(<span class="function"><span class="params">v</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(v); <span class="comment">// hello world</span></span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure></div>

<h3 id="reject"><a href="#reject" class="headerlink" title="reject"></a>reject</h3><p>reject的作用就是把Promise的状态从pending置为rejected，这样在then中就能捕捉到reject的回调函数；<br>下面代码中，<code>.then</code>后包含有两个方法，前一个执行resolve回调的参数，后一个执行reject回调的参数：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">judgeNumber</span>(<span class="params">num</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> promise1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</span><br><span class="line">        num =<span class="number">5</span>;</span><br><span class="line">        <span class="keyword">if</span>(num&lt;<span class="number">5</span>)&#123;</span><br><span class="line">            resolve(<span class="string">"num小于5，值为："</span>+num);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            reject(<span class="string">"num不小于5，值为："</span>+num);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> promise1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">judgeNumber().then(</span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params">message</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(message);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params">message</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(message);</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure></div>

<h3 id="catch"><a href="#catch" class="headerlink" title="catch"></a>catch</h3><p>类似于java，用来捕捉错误：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">judgeNumber</span>(<span class="params">num</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> promise1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</span><br><span class="line">        num =<span class="number">5</span>;</span><br><span class="line">        <span class="keyword">if</span>(num&lt;<span class="number">5</span>)&#123;</span><br><span class="line">            resolve(<span class="string">"num小于5，值为："</span>+num);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            reject(<span class="string">"num不小于5，值为："</span>+num);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> promise1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">judgeNumber().then(</span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params">message</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(message);</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br><span class="line">.catch(<span class="function"><span class="keyword">function</span>(<span class="params">message</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(message);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div>

<h3 id="all和race"><a href="#all和race" class="headerlink" title="all和race"></a>all和race</h3><p>all：所有异步操作结束后才执行回调；<br>race：等到第一个Promise改变状态就开始执行回调函数。</p>
<h3 id="then"><a href="#then" class="headerlink" title="then"></a>then</h3><p>通过then的状态传递可以实现链式操作，利用这一点解决回调地狱：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pGetSend</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> p1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line">        xhr.open(<span class="string">'GET'</span>, url)</span><br><span class="line">        xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (xhr.status === <span class="number">200</span> &amp;&amp; xhr.readyState === <span class="number">40</span>) &#123;</span><br><span class="line">                resolve(xhr.responseText)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (xhr.status === <span class="number">404</span>) &#123;</span><br><span class="line">                reject(<span class="string">'请求地址不对'</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        xhr.send()</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> p1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pGetSend(<span class="string">'./cb1/a.php'</span>) <span class="comment">//调用这个函数会得到p1</span></span><br><span class="line">    .then(<span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123; <span class="comment">//res = a.php的responseText</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> result = <span class="built_in">JSON</span>.parse(res)</span><br><span class="line"></span><br><span class="line">        <span class="comment">//下面的调用还是会得到p1，但是url不同上面</span></span><br><span class="line">        <span class="keyword">return</span> pGetSend(<span class="string">`./cb1/b.php?n1=<span class="subst">$&#123;result.n1&#125;</span>&amp;n2=<span class="subst">$&#123;result.n2&#125;</span>`</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// p1是一个promise方法，后面可以接then</span></span><br><span class="line">    &#125;).then(<span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> result = <span class="built_in">JSON</span>.parse(res)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> pGetSend(<span class="string">`./cb1/c.php?and=<span class="subst">$&#123;result.and&#125;</span>&amp;n3=<span class="subst">$&#123;result.n3&#125;</span>`</span>)</span><br><span class="line"></span><br><span class="line">    &#125;).then(<span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> result = <span class="built_in">JSON</span>.parse(res)</span><br><span class="line"></span><br><span class="line">        <span class="built_in">console</span>.log(result);</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pGetSend</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> p1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest</span><br><span class="line">        xhr.open(<span class="string">'GET'</span>, url)</span><br><span class="line">        xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (xhr.status === <span class="number">200</span> &amp;&amp; xhr.readyState === <span class="number">40</span>) &#123;</span><br><span class="line">                resolve(xhr.responseText)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (xhr.status === <span class="number">404</span>) &#123;</span><br><span class="line">                reject(<span class="string">'请求地址不对'</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        xhr.send()</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="async和await"><a href="#async和await" class="headerlink" title="async和await"></a>async和await</h2><p>　<a href="https://www.cnblogs.com/SamWeb/p/8417940.html" target="_blank">这篇文章</a>讲的很通俗易懂，评论区的案例也值得一看；<br>　async的调用会返回一个promise对象，既然是promise对象，catch和then等方法都可以用；不过这里最重要的是await；<br>　<strong><code>await</code>后面可以放各种表达式或者promise对象；遇到await后表示等待，代码就暂停到这里，不再向下执行了，它等待后面的promise对象执行完毕，然后拿到promise resolve的值并进行返回，返回值拿到之后，才会继续向下执行；</strong><br>　直接修改代码，从视觉上看，<em>就是把所有的then换成了await：</em></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pGetSend</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> p1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line">        xhr.open(<span class="string">'GET'</span>, url)</span><br><span class="line">        xhr.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            resolve(xhr.responseText)</span><br><span class="line">        &#125;</span><br><span class="line">        xhr.send()</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> p1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// pGetSend调用后是p1，一个promise对象，await可以是then里接收到的res提前</span></span><br><span class="line">    <span class="keyword">var</span> res = <span class="keyword">await</span> pGetSend(<span class="string">'./cb1/a.php'</span>)</span><br><span class="line">    <span class="keyword">var</span> result1 = <span class="built_in">JSON</span>.parse(res)</span><br><span class="line">    <span class="built_in">console</span>.log(result1);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> res = <span class="keyword">await</span> pGetSend(<span class="string">`./cb1/b.php?n1=<span class="subst">$&#123;result1.n1&#125;</span>&amp;n2=<span class="subst">$&#123;result1.n2&#125;</span>`</span>)</span><br><span class="line">    <span class="keyword">var</span> result2 = <span class="built_in">JSON</span>.parse(res)</span><br><span class="line">    <span class="built_in">console</span>.log(result2);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> res = <span class="keyword">await</span> pGetSend(<span class="string">`./cb1/c.php?and=<span class="subst">$&#123;result2.and&#125;</span>&amp;n3=<span class="subst">$&#123;result2.n3&#125;</span>`</span>)</span><br><span class="line">    <span class="keyword">var</span> result3 = <span class="built_in">JSON</span>.parse(res)</span><br><span class="line">    <span class="built_in">console</span>.log(result3);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fn()</span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>redux应用</title>
    <url>/jackhuang-haohua.github.io/2019/09/01/2020-05-react-redux3/</url>
    <content><![CDATA[<p>下面是这个测试项目的文件结构，与redux相关的有：</p>
<ol>
<li>actions文件夹：包含actionType和actionCreators</li>
<li>reducer文件件：notifications.js是分组件的reducer，index.js聚合所有reducer</li>
<li>store.js创建仓库</li>
<li>还应该有一个state文件夹，用来存放数据，在reducer里引入<br><img src="https://s1.ax1x.com/2020/05/06/YE6Miq.png" alt="YE6Miq.png"></li>
</ol>
<h2 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h2><h3 id="一、安装"><a href="#一、安装" class="headerlink" title="一、安装"></a>一、安装</h3><p>　直接一步到位：<code>yarn add redux react-redux redux-thunk</code></p>
<h3 id="二、src-store-js"><a href="#二、src-store-js" class="headerlink" title="二、src/store.js"></a>二、src/store.js</h3><p>　创建仓库，并导出仓库</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;createStore,applyMiddleware&#125; <span class="keyword">from</span> <span class="string">"redux"</span></span><br><span class="line"><span class="keyword">import</span> reducer <span class="keyword">from</span> <span class="string">"./reducer"</span>   <span class="comment">//合并后的reducer</span></span><br><span class="line"><span class="keyword">import</span> thunk <span class="keyword">from</span> <span class="string">"redux-thunk"</span>   <span class="comment">//redux的中间件 </span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> createStore(reducer,applyMiddleware(thunk))</span><br></pre></td></tr></table></figure></div>

<h3 id="三、src-reducer-index-js"><a href="#三、src-reducer-index-js" class="headerlink" title="三、src/reducer/index.js"></a>三、src/reducer/index.js</h3><p>　合并子仓库</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;combineReducers&#125; <span class="keyword">from</span> <span class="string">"redux"</span></span><br><span class="line"><span class="keyword">import</span> notifications <span class="keyword">from</span> <span class="string">"./notifications"</span></span><br><span class="line"><span class="comment">//这里就是进行reducer的拆分</span></span><br><span class="line"><span class="comment">//后续要找redux的状态需要从拆分的reducer中获取得到</span></span><br><span class="line"><span class="keyword">const</span> reducer = combineReducers(&#123;</span><br><span class="line">    notifications</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> reducer</span><br></pre></td></tr></table></figure></div>

<h3 id="四、src-index-js"><a href="#四、src-index-js" class="headerlink" title="四、src/index.js"></a>四、src/index.js</h3><p>　把仓库传给组件</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;Provider&#125; <span class="keyword">from</span> <span class="string">"react-redux"</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">"./store"</span></span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">  &lt;Provider store=&#123;store&#125;&gt;</span><br><span class="line">    &lt;ConfigProvider locale=&#123;zhCN&#125;&gt;</span><br><span class="line">      &lt;Router&gt;</span><br><span class="line">        &lt;Switch&gt;</span><br><span class="line"></span><br><span class="line">        &lt;<span class="regexp">/Switch&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>Router&gt;</span><br><span class="line">    &lt;<span class="regexp">/ConfigProvider&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>Provider&gt;</span><br><span class="line">  ,</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">'root'</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure></div>

<h3 id="五、组件中使用仓库"><a href="#五、组件中使用仓库" class="headerlink" title="五、组件中使用仓库"></a>五、组件中使用仓库</h3><p>通过connect获取，</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;connect&#125; <span class="keyword">from</span> <span class="string">"react-redux"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// mapState相当于计算属性</span></span><br><span class="line"><span class="keyword">const</span> mapState = <span class="function"><span class="params">state</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        list:state.notifications.list,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@connect(mapState)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">index</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.props.list) -&gt; 仓库的list -&gt; 前面mapState返回的list</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="操作仓库"><a href="#操作仓库" class="headerlink" title="操作仓库"></a>操作仓库</h2><p>现在state中有这些数据，我想在组件中改变其中的hasRead</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> initState = &#123;</span><br><span class="line">    list:[</span><br><span class="line">        &#123;<span class="attr">id</span>:<span class="number">1</span>,<span class="attr">title</span>:<span class="string">"111"</span>,<span class="attr">desc</span>:<span class="string">"11111111"</span>,<span class="attr">hasRead</span>:<span class="literal">false</span>&#125;,</span><br><span class="line">        &#123;<span class="attr">id</span>:<span class="number">2</span>,<span class="attr">title</span>:<span class="string">"222"</span>,<span class="attr">desc</span>:<span class="string">"22222222"</span>,<span class="attr">hasRead</span>:<span class="literal">true</span>&#125;,</span><br><span class="line">        &#123;<span class="attr">id</span>:<span class="number">3</span>,<span class="attr">title</span>:<span class="string">"333"</span>,<span class="attr">desc</span>:<span class="string">"33333333"</span>,<span class="attr">hasRead</span>:<span class="literal">false</span>&#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>按照redux的逻辑：</strong></p>
<ul>
<li>-&gt; 点击组件里的按钮 </li>
<li>-&gt; 调用对应仓库的action中的方法 </li>
<li>-&gt; 通过dispatch(派发)，把action标识符、参数给到reducer文件夹下的notifications.js </li>
<li>-&gt; 根据标识符选择执行哪个逻辑，生成新数据(一定要和之前的不同地址) </li>
<li>-&gt; 把新数据派发给组件</li>
</ul>
<h3 id="第一步：组件中调用action，发给对应notifications-js"><a href="#第一步：组件中调用action，发给对应notifications-js" class="headerlink" title="第一步：组件中调用action，发给对应notifications.js"></a>第一步：组件中调用action，发给对应notifications.js</h3><p>notification.js组件中：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> &#123;Card,Button,List,Badge,Spin&#125; <span class="keyword">from</span> <span class="string">"antd"</span></span><br><span class="line"><span class="keyword">import</span> &#123;connect&#125; <span class="keyword">from</span> <span class="string">"react-redux"</span></span><br><span class="line"><span class="keyword">import</span> &#123;markNotificationsById,markNotificationsAll&#125; <span class="keyword">from</span> <span class="string">"../../actions/notifications"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mapState = <span class="function"><span class="params">state</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        list:state.notifications.list,</span><br><span class="line">        isLoading:state.notifications.isLoading</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@connect(mapState,&#123;markNotificationsById,markNotificationsAll&#125;)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">index</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.props) -&gt; 有state和action</span><br><span class="line">        <span class="keyword">return</span> ()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> index</span><br></pre></td></tr></table></figure></div>

<h3 id="第二步：notifications-js中，手动发给reduer"><a href="#第二步：notifications-js中，手动发给reduer" class="headerlink" title="第二步：notifications.js中，手动发给reduer"></a>第二步：notifications.js中，手动发给reduer</h3><p>这个reducer实际上是src/reducer/notifications.js；</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">    MARK_NOTIFICATIONS_BY_ID,</span><br><span class="line">    MARK_NOTIFICATIONS_ALL,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">"./actionTypes"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//根据传入的id将对应的redux项状态进行变化</span></span><br><span class="line"><span class="comment">//内部因为要做异步操作，所以引入了redux-thunk中间件，并且内部我们返回了一个函数，所以可以在</span></span><br><span class="line"><span class="comment">//函数里面进行异步操作了。后续可以手动的调用dispatch去派发action给reducer了。</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> markNotificationsById = <span class="function"><span class="params">id</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="params">dispatch</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="comment">// 模拟异步操作</span></span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            dispatch(&#123;</span><br><span class="line">                type:MARK_NOTIFICATIONS_BY_ID,</span><br><span class="line">                payload:&#123;</span><br><span class="line">                    id</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">            <span class="comment">//异步请求完毕数据后</span></span><br><span class="line">            dispatch(endNotifiactions())</span><br><span class="line">        &#125;, <span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> markNotificationsAll = <span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="params">dispatch</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="comment">// 使用dispatch手动派发</span></span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            dispatch(&#123;<span class="attr">type</span>:MARK_NOTIFICATIONS_ALL&#125;)</span><br><span class="line">            dispatch(endNotifiactions())</span><br><span class="line">        &#125;, <span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="第三步：reducer中更新数据"><a href="#第三步：reducer中更新数据" class="headerlink" title="第三步：reducer中更新数据"></a>第三步：reducer中更新数据</h3><p>src/reducer/notification.js中：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;MARK_NOTIFICATIONS_BY_ID,MARK_NOTIFICATIONS_ALL&#125; <span class="keyword">from</span> <span class="string">"../actions/actionTypes"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里的数据实际上是要放在state里的，为了方便观察就拿到reducer里了</span></span><br><span class="line"><span class="keyword">const</span> initState = &#123;</span><br><span class="line">    list:[</span><br><span class="line">        &#123;<span class="attr">id</span>:<span class="number">1</span>,<span class="attr">title</span>:<span class="string">"111"</span>,<span class="attr">desc</span>:<span class="string">"11111111"</span>,<span class="attr">hasRead</span>:<span class="literal">false</span>&#125;,</span><br><span class="line">        &#123;<span class="attr">id</span>:<span class="number">2</span>,<span class="attr">title</span>:<span class="string">"222"</span>,<span class="attr">desc</span>:<span class="string">"22222222"</span>,<span class="attr">hasRead</span>:<span class="literal">true</span>&#125;,</span><br><span class="line">        &#123;<span class="attr">id</span>:<span class="number">3</span>,<span class="attr">title</span>:<span class="string">"333"</span>,<span class="attr">desc</span>:<span class="string">"33333333"</span>,<span class="attr">hasRead</span>:<span class="literal">false</span>&#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//纯函数  之前的状态，具有标志性信息的action ==&gt; 派发一个新的状态</span></span><br><span class="line"><span class="comment">//通过调用map方法，会返回一个全新的内存地址不一样的list新的数组，这个新的数组的地址与之前状态的list地址不一样，所以的话，就会有新的状态生成，从而更改UI视图。</span></span><br><span class="line"><span class="keyword">const</span> reducer = <span class="function">(<span class="params">state=initState,action</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">switch</span>(action.type)&#123;</span><br><span class="line">        <span class="keyword">case</span> MARK_NOTIFICATIONS_BY_ID:</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                <span class="comment">// 展开运算符相当于拷贝地址</span></span><br><span class="line">                ...state,</span><br><span class="line">                <span class="comment">// 把id符合的那一项hasRead改为true，即变为已读</span></span><br><span class="line">                list:state.list.map(<span class="function"><span class="params">item</span>=&gt;</span>&#123;</span><br><span class="line">                    <span class="keyword">if</span>(item.id === action.payload.id)&#123;</span><br><span class="line">                        item.hasRead = <span class="literal">true</span></span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">return</span> item</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">case</span> MARK_NOTIFICATIONS_ALL:</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                ...state,</span><br><span class="line">                <span class="comment">// 把所有项hasRead改为true，即变为全部已读</span></span><br><span class="line">                list:state.list.map(<span class="function"><span class="params">item</span>=&gt;</span>&#123;</span><br><span class="line">                    item.hasRead = <span class="literal">true</span> </span><br><span class="line">                    <span class="keyword">return</span> item</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> state</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> reducerault:</span><br></pre></td></tr></table></figure></div>

<p><strong>假如要给标记已读加一个isloading动画，也是一样的步骤</strong><br>①reducer里定义一个isloading：true<br>②action里定义一个方法A和标识符<br>③reducer里引入标识符，通过标识符判断执行的逻辑，在内部的方法B改变isloading<br>④组件里引入action，并调用方法A</p>
]]></content>
      <categories>
        <category>react</category>
      </categories>
  </entry>
  <entry>
    <title>了解继承</title>
    <url>/jackhuang-haohua.github.io/2018/06/27/2020-05-%E7%BB%A7%E6%89%BF/</url>
    <content><![CDATA[<h2 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h2><p>　一个构造函数可以使用 new关键字来创造出若干的实例，每一个实例都可以使用这个构造函数的属性和方法；<br>　构造函数的意义：构造函数的意义就是为了创建一个对象；当函数和new 键字连用的时候，就拥有了创造对象的能力，那么我们管这个函数叫做构造函数；记住首字母要大写；<br>　new关键字：new就是创造对象的过程，new也叫做实例化对象的过程，new创造出来的对象叫做构造函数的实例对象。<br>　如下代码，<code>Preson()</code>就是一个构造函数：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = <span class="string">'Jack'</span></span><br><span class="line">  <span class="keyword">this</span>.age = <span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person.prototype = &#123;</span><br><span class="line">  a: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;,</span><br><span class="line">  b: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> Person()</span><br><span class="line"><span class="keyword">var</span> p2 = <span class="keyword">new</span> Person()</span><br></pre></td></tr></table></figure></div>

<h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><h3 id="是什么"><a href="#是什么" class="headerlink" title="是什么"></a>是什么</h3><p>　继承是出现在两个构造函数之间的关系，当A构造函数的属性和方法被B构造函数的实例使用了，那么我们就说B继承自A构造函数；<br>　当p1使用了<code>Person()</code>构造函数的属性和prototype方法的时候，我们就说Student继承自Person构造函数，我们管 Student 叫做 Person 的子类，管 Perosn 叫做 Student 的父类</p>
<h3 id="原型继承"><a href="#原型继承" class="headerlink" title="原型继承"></a>原型继承</h3><p>　就是通过改变原型链的方式来达到继承，<code>子类.prototype = 父类的实例</code><br>　原型继承的缺点：继承下来的属性不在自己身上，而是在<code>__proto__</code>里面，访问的时候就要去<code>__proto__</code>里面找，所以属性的值要在两个地方传递，对于代码的书写和代码的维护和阅读都不是很好；<br>　示例代码：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 父类</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype.sayHi = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'hello world'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 子类</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params">age</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.age = age</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 实现 Student 继承 Person</span></span><br><span class="line">Student.prototype = <span class="keyword">new</span> Person(<span class="string">'Jack'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> s1 = <span class="keyword">new</span> Student(<span class="number">18</span>)</span><br></pre></td></tr></table></figure></div>

<h3 id="call继承"><a href="#call继承" class="headerlink" title="call继承"></a>call继承</h3><p>　call是改变this指向的一个方法；</p>
<p>　<strong>对于this的简单总结：</strong></p>
<ul>
<li><p>this 是一个使用在作用域里面的关键字</p>
</li>
<li><p>当你使用在函数里面的时候，this指向不管函数的定义方式，不管函数定义在哪里，只看函数的调用方式(箭头函数除外)</p>
<ol>
<li>全局调用<br>-&gt; 函数名(): this -&gt; window</li>
<li>对象调用<br>-&gt; 对象名.函数名(): this -&gt; 点前面是谁就是谁</li>
<li>定时器处理函数<br>-&gt; setTimeout(function () {}): this -&gt; window<br>-&gt; setInterval(function () {}): this -&gt; window</li>
<li>事件处理函数<br>-&gt; xxx.onclick = function () {}<br>-&gt; xxx.addEventListaner(‘click’, function () {})<br>-&gt; 以上两种函数里面, this -&gt; 事件源(绑定谁身上的事件)</li>
<li>自调用函数<br>-&gt; (function () {})()<br>-&gt; !function () {}()<br>-&gt; ~function () {}()<br>-&gt; 上面三种函数里面的 this -&gt; window</li>
<li>构造函数<br>-&gt; new 函数名(): this -&gt; 当前实例</li>
<li>箭头函数<br>-&gt; 箭头函数没有 this<br>-&gt; this -&gt; context 上下文</li>
</ol>
</li>
<li><p>箭头函数里面的 this 指向</p>
<ul>
<li>官方解释：函数外部作用域的 this 就是箭头函数内部的 this</li>
<li>个人理解：你书写箭头函数的上一行的 this 是谁，箭头函数里面的 this 就是谁</li>
</ul>
</li>
</ul>
<p>　<strong>使用call</strong><br>使用call改变this指向，来完成继承</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 一个父类</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, gender</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name</span><br><span class="line">  <span class="keyword">this</span>.gender = gender</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype.sayHi = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'hello world'</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 2. 一个子类</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params">age, name, gender</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.age = age</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 令 Person 的 this 指向 Student 的 this ，此时为 s1</span></span><br><span class="line">  Person.call(<span class="keyword">this</span>, name, gender)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> s1 = <span class="keyword">new</span> Student(<span class="number">18</span>, <span class="string">'Rose'</span>, <span class="string">'男'</span>)</span><br></pre></td></tr></table></figure></div>

<p>　<strong>借用继承的优缺点</strong></p>
<ul>
<li>优点:<ol>
<li>继承来的属性写在了自己的身上，就不需要去<code>__proto__</code>上找了</li>
<li>自己需要用到的两个属性的值, 在一个构造函数的时候传递，不像原型继承需要在两个地方传递参数</li>
</ol>
</li>
<li>缺点:<ol>
<li>只能继承父类的属性，不能继承父类原型(prototype)上的方法，但是写在构造函数体内的都可以继承下来</li>
</ol>
</li>
</ul>
<p>　<strong>为什么说方法卸载函数体内是缺点呢？</strong></p>
<ul>
<li>一般来讲，属性写在构造函数体内，方法写在构造函数的原型上</li>
<li>如果把方法写在构造函数体内，每次new的时候会创建一个函数空间，之后就会有若干个一摸一样的函数空间出现，平白浪费空间</li>
</ul>
<h3 id="组合继承"><a href="#组合继承" class="headerlink" title="组合继承"></a>组合继承</h3><p>　综合前面两种方法：</p>
<ul>
<li>利用借用构造函数继承,，把属性继承在自己身上；</li>
<li>利用原型继承把父类 prototype 上的方法继承下来；</li>
<li>缺点：子类的原型上面本来的方法就没有了，必须要继承以后再添加。</li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 父类构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name</span><br><span class="line">  <span class="keyword">this</span>.age = age</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype.sayHi = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'hello world'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 子类构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params">gender, name, age</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.gender = gender</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 借用继承</span></span><br><span class="line">  <span class="comment">// call 方法，第一个参数改变的this 指向，从第二个开始依次给函数传递参数</span></span><br><span class="line">  Person.call(<span class="keyword">this</span>, name, age) </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 原型继承，能继承属性和方法的</span></span><br><span class="line"><span class="comment">// s1 的 sayHi 方法是依靠这个 原型继承 继承下来的</span></span><br><span class="line">Student.prototype = <span class="keyword">new</span> Person()</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> s1 = <span class="keyword">new</span> Student(<span class="string">'男'</span>, <span class="string">'Jack'</span>, <span class="number">18</span>)</span><br></pre></td></tr></table></figure></div>

<h3 id="es6的继承"><a href="#es6的继承" class="headerlink" title="es6的继承"></a>es6的继承</h3><p>　<code>class Student extends Person {}</code>，创建一个继承自Person的子类Student<br>　在子类的constructor里面书写super()来完成继承，就相当于在借用父类构造函数</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 准备一个父类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span> (name) &#123;</span><br><span class="line">    <span class="comment">// 等价于我们的构造函数体</span></span><br><span class="line">    <span class="keyword">this</span>.name = name</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 原型上的方法</span></span><br><span class="line">  sayHi () &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'我是 父类的方法'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 准备一个子类</span></span><br><span class="line"><span class="comment">//    一个继承自 Person 的 Student 子类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span> (age, name) &#123;</span><br><span class="line">    <span class="comment">// super(name) 就相当于我们 es5 的借用构造函数继承</span></span><br><span class="line">    <span class="comment">// 只不过不需要我们写 call 去改变 this 指向了</span></span><br><span class="line">    <span class="comment">// 直接帮我们改变好 this 指向了, 我们只需要传递参数就可以了</span></span><br><span class="line">    <span class="keyword">super</span>(name)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">this</span>.age = age</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  son () &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'我是 子类的方法'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> s1 = <span class="keyword">new</span> Student(<span class="number">18</span>, <span class="string">'Jack'</span>)</span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>了解设计模式</title>
    <url>/jackhuang-haohua.github.io/2020/04/25/2020-05-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="是什么"><a href="#是什么" class="headerlink" title="是什么"></a>是什么</h2><p>　针对特定问题，给出的简洁而优化的处理方案；<br>　例如一个设计模式A只能解决A类型的问题，针对B类型的问题，设计模式A解决不了，同一个问题，不一定能用同一种方案解决；<br>　设计模式只在特定的情况，特定的时期，针对特定的问题定制；<br>　市场上常用的设计模式：</p>
<ul>
<li>单例模式</li>
<li>组合模式</li>
<li>观察者模式</li>
<li>适配器模式</li>
<li>代理模式</li>
<li>工厂模式</li>
<li>构建模式</li>
</ul>
<h2 id="常见设计模式"><a href="#常见设计模式" class="headerlink" title="常见设计模式"></a>常见设计模式</h2><p>只列举几个。</p>
<h3 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h3><p>　让一个构造函数只能有一个实例对象，当你需要一个构造函数只能new出一个对象的时候，就可以使用单例模式；<br>　例如，弹出层alert比较丑，用户体验极度不好，有些网站会使用一个自己写的div盒子，当作弹出层；这个弹出层不可能只弹出一次；但是也不能每次弹出就创建一个div，每次弹出的都是之前创造好的那个div，只是文字改变了；<br>　如果不用单例模式，每次new就是创造一个div，如果用了单例模式，每次new都是用的第一次的div, 只是改变文字内容；<br>　核心代码为定义一个flag，只有第一次会new；第二次以后，虽然写了new，但时并没有创建新的实例，只是为了保留原先的内容；以下代码为简单实现：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> Person = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 真实的构造函数体</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">Abc</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = <span class="string">'Jack'</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Abc.prototype.sayHi = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 实现单例模式的核心代码</span></span><br><span class="line">  <span class="keyword">var</span> instance = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 如果修改为箭头函数, 那么使用的时候就不能 new</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> !instance ? (instance = <span class="keyword">new</span> Abc()) : instance</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)()  <span class="comment">// 自执行函数为了延长 instance 的生命周期</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 假装在 new 但是实际没有新建，为了保留原先的内容，因为单例模式是保持了构造函数, 只不过只有一个实例</span></span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> Person()</span><br><span class="line"><span class="keyword">var</span> p2 = <span class="keyword">new</span> Person()</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(p1) <span class="comment">// 是 Person 的一个实例, 是个对象</span></span><br><span class="line"><span class="built_in">console</span>.log(p2) <span class="comment">// 是 Person 的一个实例, 是个对象</span></span><br><span class="line"><span class="built_in">console</span>.log(p1 === p2) <span class="comment">// true</span></span><br></pre></td></tr></table></figure></div>

<h3 id="组合模式"><a href="#组合模式" class="headerlink" title="组合模式"></a>组合模式</h3><p>　将若干这启动方式一样的构造函数放在一起，并准备一个总开关，总开关一启动，所有构造函数都会启动；<br>　就像是你一离开家，所有电器都自动关闭；一回到家，灯亮起来，电视打开，空调打开等等；</p>
<p>　<strong>应用场景比如轮播图，手动搭建的轮播图会有这么一个bug：</strong><br>　基础版本的轮播图依靠定时器再左右移动，一旦切换页面以后，DOM不动，定时器保持在动，再切换回来页面的时候，就会发现轮播图的小圆点，左右切换和图片对不上；<br>　所以，当前页面的时候，应该关闭定时器；当再次回到当前页面的时候，应该再重新启动定时器<br>　一个页面多个轮播图的时候，就可以用到<strong>单例模式</strong>：做一个总开关，离开页面的时候，所有的轮播图都停止定时器；再来一个总开关，回到页面的时候，所有的轮播图再次启动；</p>
<p>　实现组合模式：需要一个承载所有构造函数实例的数组；需要一个方法；向数组里面添加内容；需要一个方法；能把数组里面的所有内容启动；<br>　简单实现如下：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 组合模式的代码</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Compose</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span> () &#123;</span><br><span class="line">    <span class="comment">// 用来承载每一个实例（内容/方法）的数组</span></span><br><span class="line">    <span class="keyword">this</span>.composeArr = []</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 向数组里面添加内容/方法</span></span><br><span class="line">  add (instance) &#123;</span><br><span class="line">    <span class="keyword">this</span>.composeArr.push(instance)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 启动数组里所有的方法</span></span><br><span class="line">  init () &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'总开关启动了'</span>)</span><br><span class="line">    <span class="keyword">this</span>.composeArr.forEach(<span class="function"><span class="params">item</span> =&gt;</span> item.init())</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// c 就是一个总开关</span></span><br><span class="line"><span class="keyword">var</span> c = <span class="keyword">new</span> Compose()</span><br><span class="line"><span class="comment">// 每一次执行 add 方法就是向总开关上添加内容</span></span><br><span class="line">c.add(<span class="keyword">new</span> Play())</span><br><span class="line">c.add(<span class="keyword">new</span> Eat())</span><br><span class="line">c.add(<span class="keyword">new</span> Sleep())</span><br><span class="line"></span><br><span class="line"><span class="comment">// 只要我的总开关一启动，里面的每一个构造函数就同时都启动了</span></span><br><span class="line">c.init()</span><br><span class="line"><span class="built_in">console</span>.log(c)</span><br></pre></td></tr></table></figure></div>

<h3 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h3><p>　又称发布/订阅模式，观察者模式又分为两派；</p>
<h4 id="一派认为，发布-订阅是一个设计模式"><a href="#一派认为，发布-订阅是一个设计模式" class="headerlink" title="一派认为，发布/订阅是一个设计模式"></a>一派认为，发布/订阅是一个设计模式</h4><p>　从观察者的角度出发，让“观察者”看着“被观察者”，只要数据/状态改变了，就让“观察者”做一些事情；<br>　简单实现：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 有两个构造函数</span></span><br><span class="line"><span class="comment">// 1. 被观察者(学生, 小明, 小红, ...)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="comment">// 一个学生本身的状态, 就应该是好好学习</span></span><br><span class="line">    <span class="keyword">this</span>.state = <span class="string">'好好学习'</span></span><br><span class="line">    <span class="comment">// 准备一个数组，谁在检时者这个学生, 就放在数组里面</span></span><br><span class="line">    <span class="comment">// 将来一旦状态从 好好学习 变成 玩手机的时候, 应该让这个 [] 里面的所有老师触发技能</span></span><br><span class="line">    <span class="keyword">this</span>.observers = []</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 方法</span></span><br><span class="line">  <span class="comment">// 1. 可以改变状态的方法</span></span><br><span class="line">  setState(value) &#123;</span><br><span class="line">    <span class="comment">// 可以把自己的状态改变</span></span><br><span class="line">    <span class="keyword">this</span>.state = value</span><br><span class="line">    <span class="comment">// 状态一旦改变, 就要通知看着你的人</span></span><br><span class="line">    <span class="keyword">this</span>.notify()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 2. 获取自己的状态</span></span><br><span class="line">  getState() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.state</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 3. 添加观察着</span></span><br><span class="line">  <span class="comment">// 向 this.observers 里面追加一个看着这个同学的人</span></span><br><span class="line">  attach(observer) &#123;</span><br><span class="line">    <span class="keyword">this</span>.observers.push(observer)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 4. 通知 this.observers 数组里面的每一个人, 状态改变了</span></span><br><span class="line">  notify() &#123;</span><br><span class="line">    <span class="keyword">this</span>.observers.forEach(<span class="function"><span class="params">item</span> =&gt;</span> item.qingjiazhang(<span class="keyword">this</span>.state))</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 观察着(老师, 班主任, 教学主任, 年级主任, ...)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line">  <span class="comment">// constructor 就相当于 es5 的构造函数体 =&gt; 构造器</span></span><br><span class="line">  <span class="keyword">constructor</span>(name) &#123;</span><br><span class="line">    <span class="comment">// 用它来标明一下我是班主任还是年级主任还是教务主任</span></span><br><span class="line">    <span class="keyword">this</span>.name = name</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 方法, 就是这些老师能触发的技能</span></span><br><span class="line">  qingjiazhang(state) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`我是 <span class="subst">$&#123; <span class="keyword">this</span>.name &#125;</span>, 因为你 <span class="subst">$&#123; state &#125;</span> 了, 我要请你家长来!`</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> xiaoming = <span class="keyword">new</span> Student() <span class="comment">// 被观察者</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> banzhuren = <span class="keyword">new</span> Observer(<span class="string">'班主任'</span>) <span class="comment">// 观察者</span></span><br><span class="line"><span class="keyword">var</span> jiaowuzhuren = <span class="keyword">new</span> Observer(<span class="string">'教务主任'</span>) <span class="comment">// 观察者</span></span><br><span class="line"><span class="keyword">var</span> nianjizhuren = <span class="keyword">new</span> Observer(<span class="string">'年级主任'</span>) <span class="comment">// 观察者</span></span><br><span class="line"><span class="comment">// 让班主任看着小明</span></span><br><span class="line">xiaoming.attach(banzhuren)</span><br><span class="line"><span class="comment">// 让教务主任看着小明</span></span><br><span class="line">xiaoming.attach(jiaowuzhuren)</span><br><span class="line"><span class="comment">// 让年级主任看着小明</span></span><br><span class="line">xiaoming.attach(nianjizhuren)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当小明状态改变的时候</span></span><br><span class="line"><span class="comment">//   xiaoming.setState() 就能改变 小明 现在的状态</span></span><br><span class="line"><span class="comment">//   就会触发 xiaoming.notify()</span></span><br><span class="line"><span class="comment">//   就会把 xiaoming.observers 这个数里里面的每一个对象的 请家长技能调用</span></span><br><span class="line">xiaoming.setState(<span class="string">'玩手机'</span>) <span class="comment">// 对象调用方式, this -&gt; 点前面是谁就是谁</span></span><br></pre></td></tr></table></figure></div>

<h4 id="一派认为，发布-订阅是两回事"><a href="#一派认为，发布-订阅是两回事" class="headerlink" title="一派认为，发布/订阅是两回事"></a>一派认为，发布/订阅是两回事</h4><p>　比如我要买书，我当书店里和老板说，如果某书到了就通知我一下，后来我买到书了，就告诉老板某书到了不用再通知我；<br>　在这个例子中，我是订阅者，老板是发布者，他有一个订阅的方法；很明显我和老板是两个不同的人，只不过订阅把我们联系了起来；</p>
<p>　实际上就是手动实现 <code>addEventListener(&#39;click&#39;, fn)</code> ；<br>　实现这种模式需要几样必备的东西：</p>
<ol>
<li>消息盒子 {}<br>=&gt; click: [fn1, fn2, fn3]<br>=&gt; mouseover: [fn4, fn5, fn6]</li>
<li>订阅的方法<br>=&gt; 向消息盒子里面添加内容</li>
<li>取消订阅的方法<br>=&gt; 把已经订阅的方法从消息盒子内部拿走</li>
<li>发布事件的方法<br>=&gt; 把消息盒子里面的对应的处理函数执行了</li>
</ol>
<p>　简单实现如下：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span> () &#123;</span><br><span class="line">    <span class="comment">// 准备的消息盒子</span></span><br><span class="line">    <span class="keyword">this</span>.message = &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 订阅的方法</span></span><br><span class="line">  on (type, fn) &#123;</span><br><span class="line">    <span class="comment">// 向消息盒子里面添加成员</span></span><br><span class="line">    <span class="comment">// type 事件类型, 你要订阅的类型</span></span><br><span class="line">    <span class="comment">// fn 事件处理函数, 你要给这个类型订阅一个什么行为</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 假设现在的 type === 'click'</span></span><br><span class="line">    <span class="comment">// 消息盒子里面就应该是 &#123; click: [handerA] &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果消息盒子里面没有 click 这个成员, 那么就创建一个这个成员是一个空数组</span></span><br><span class="line">    <span class="comment">//   然后添加进去</span></span><br><span class="line">    <span class="comment">// 如果消息盒子里面由这个 click 成员, 那么直接 push 就可以了</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.message[type]) &#123;</span><br><span class="line">      <span class="keyword">this</span>.message[type] = []</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.message[type].push(fn)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 取消订阅的方法</span></span><br><span class="line">  off (type, fn) &#123;</span><br><span class="line">    <span class="comment">// 删除消息盒子里面的某一个成员</span></span><br><span class="line">    <span class="comment">// type 是要取消的事件类型</span></span><br><span class="line">    <span class="comment">// fn 是要取消的事件处理函数</span></span><br><span class="line">    <span class="comment">// 先看看有没有这个事件类型, 如果没有, 不需要取消</span></span><br><span class="line">    <span class="comment">// 如果由才需要取消</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.message[type]) <span class="keyword">return</span></span><br><span class="line">    <span class="comment">// 能执行到这里, 表示 this.message[type] 是一个数组</span></span><br><span class="line">    <span class="comment">// 取消这个数组里面和 fn 一样的那个事件处理函数</span></span><br><span class="line">    <span class="comment">//   使用一个 filter 方法</span></span><br><span class="line">    <span class="keyword">this</span>.message[type] = <span class="keyword">this</span>.message[type].filter(<span class="function"><span class="params">item</span> =&gt;</span> item !== fn)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 发布的方法</span></span><br><span class="line">  emit (type, ...arg) &#123;</span><br><span class="line">    <span class="comment">// 执行消息盒子里面的某一个对应的处理函数</span></span><br><span class="line">    <span class="comment">// type 就是要触发的事件类型</span></span><br><span class="line">    <span class="comment">// 判断有没有订阅过, 如果没有订阅过, 直接return</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.message[type]) <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// a,b,c 后面的所有数据都是传递给事件处理函数里面使用的内容</span></span><br><span class="line">    <span class="comment">// arg =&gt; arguments</span></span><br><span class="line">    <span class="comment">// console.log(arg)</span></span><br><span class="line">    <span class="comment">// 自己组装一个事件对象</span></span><br><span class="line">    <span class="keyword">var</span> event = &#123;</span><br><span class="line">      type: type,</span><br><span class="line">      <span class="comment">// 参数</span></span><br><span class="line">      data: arg</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果订阅过, 那么就执行一下</span></span><br><span class="line">    <span class="comment">// 调用每一个事件处理函数的时候, 都带上一个事件对象</span></span><br><span class="line">    <span class="keyword">this</span>.message[type].forEach(<span class="function"><span class="params">item</span> =&gt;</span> item(event))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将来使用的时候</span></span><br><span class="line"><span class="keyword">var</span> o = <span class="keyword">new</span> Observer()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 订阅事件</span></span><br><span class="line">o.on(<span class="string">'click'</span>, handlerA)</span><br><span class="line">o.on(<span class="string">'click'</span>, handlerB)</span><br><span class="line"></span><br><span class="line">o.emit(<span class="string">'click'</span>, <span class="string">'hello world'</span>, <span class="number">100</span>, <span class="literal">true</span>, &#123; <span class="attr">name</span>: <span class="string">'Jack'</span> &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 准备几个事件处理函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handlerA</span>(<span class="params">e</span>) </span>&#123; <span class="built_in">console</span>.log(<span class="string">'我是事件处理函数 handlerA'</span>, e) &#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handlerB</span>(<span class="params">e</span>) </span>&#123; <span class="built_in">console</span>.log(<span class="string">'我是事件处理函数 handlerB'</span>, e) &#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handlerC</span>(<span class="params">e</span>) </span>&#123; <span class="built_in">console</span>.log(<span class="string">'我是事件处理函数 handlerC'</span>, e) &#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handlerD</span>(<span class="params">e</span>) </span>&#123; <span class="built_in">console</span>.log(<span class="string">'我是事件处理函数 handlerD'</span>, e) &#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handlerE</span>(<span class="params">e</span>) </span>&#123; <span class="built_in">console</span>.log(<span class="string">'我是事件处理函数 handlerE'</span>, e) &#125;</span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>其他</category>
      </categories>
  </entry>
  <entry>
    <title>移动端开发注意事项</title>
    <url>/jackhuang-haohua.github.io/2019/11/12/2020-05-%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%BC%80%E5%8F%91%E6%B3%A8%E6%84%8F/</url>
    <content><![CDATA[<h2 id="一、web移动端是什么"><a href="#一、web移动端是什么" class="headerlink" title="一、web移动端是什么"></a>一、web移动端是什么</h2><p>　我们现在关注的点还在移动M站上，或者我们可以叫做webapp，其实就是运行在移动端浏览器中的web网站。<br>　相对于PC端，主要有以下新知识：</p>
<ol>
<li>移动端布局适配</li>
<li>移动端事件</li>
<li>移动端交互效果</li>
<li>移动端前端框架</li>
<li>移动端调试</li>
</ol>
<h2 id="二、响应式布局"><a href="#二、响应式布局" class="headerlink" title="二、响应式布局"></a>二、响应式布局</h2><h3 id="viewport"><a href="#viewport" class="headerlink" title="viewport"></a>viewport</h3><p>做移动端时，加入下面一行代码，就可以做到自适应：<br><code>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0&quot;&gt;</code></p>
<p><strong>什么是viewport</strong></p>
<ul>
<li>网页不是直接放入浏览器中的，而是先放入到viewport中，然后viewport在等比缩放到浏览器的宽度，放入浏览器，viewport在缩放的过程中，网页内容也被缩小了</li>
<li>document.documentElement.clientWidth 就是viewport的宽度</li>
<li>当移动端宽度小于980的时候，viewport宽度就是980，当浏览器尺寸宽度大于980的时候，宽度和浏览器宽度一致</li>
<li>加入那一行代码后，移动端的 viewport 宽度会从默认的 980px 变成各个设备的 device-width</li>
</ul>
<p><strong>通过mata设置viewport</strong><br>　<code>&lt;meta&gt;</code>标签提供关于 HTML 文档的元数据。它不会显示在页面上，但是对于机器是可读的。可用于浏览器（如何显示内容或重新加载页面），搜索引擎（关键词），或其他 web 服务。</p>
<table>
<thead>
<tr>
<th>属性</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>width</td>
<td>设置layout viewport 的宽度，为一个正整数，或字符串”width-device”</td>
</tr>
<tr>
<td>initial-scale</td>
<td>设置页面的初始缩放值，为一个数字，可以带小数</td>
</tr>
<tr>
<td>minimum-scale</td>
<td>设置页面的最小缩放值，为一个数字，可以带小数</td>
</tr>
<tr>
<td>maximum-scale</td>
<td>允许用户的最大缩放值，为一个数字，可以带小数</td>
</tr>
<tr>
<td>height</td>
<td>设置layout viewport 的高度，这个属性并不重要，很少使用</td>
</tr>
<tr>
<td>user-scalable</td>
<td>是否允许用户进行缩放，值为”no”或”yes”, no 代表不允许，yes代表允许</td>
</tr>
</tbody></table>
<h3 id="媒体查询"><a href="#媒体查询" class="headerlink" title="媒体查询"></a>媒体查询</h3><p>针对不同的屏幕尺寸调整为不同的样式，</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSS"><figure class="iseeu highlight /css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width:</span><span class="number">800px</span>) &#123;</span><br><span class="line">    <span class="selector-tag">body</span>&#123;</span><br><span class="line">        <span class="attribute">background</span>: orange;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width:</span><span class="number">400px</span>) &#123;</span><br><span class="line">    <span class="selector-tag">body</span>&#123;</span><br><span class="line">        <span class="attribute">background</span>: red;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="利用UI框架布局"><a href="#利用UI框架布局" class="headerlink" title="利用UI框架布局"></a>利用UI框架布局</h3><p>各种UI框架的布局都有做移动端的自适应，比如bootstrap的栅格系统：<br><img src="https://s1.ax1x.com/2020/05/07/Ym6UfA.png" alt="Ym6UfA.png"></p>
<h3 id="vw-rem-推荐"><a href="#vw-rem-推荐" class="headerlink" title="vw/rem (推荐)"></a>vw/rem (推荐)</h3><p>首先来了解一下dpr；<br><strong>dpr</strong></p>
<ul>
<li>dpr（设备像素缩放比） = 物理像素/逻辑像素<ul>
<li>物理像素：手机屏幕的分辨率</li>
<li>逻辑像素：css / js 中的像素</li>
</ul>
</li>
<li>很久以前dpr都是1:1，后来苹果的屏幕越来越好，分辨率也就越来越高，即物理像素变高了，dpr就更大了</li>
<li>现在有一张 ihpne6 为标准的设计图，大小为 1334 x 750，在PS里量出300px，则css中对应150px</li>
</ul>
<h3 id="布局单位"><a href="#布局单位" class="headerlink" title="布局单位"></a>布局单位</h3><ol>
<li>%：百分比布局<ul>
<li>优点：简单，无需设置，兼容性好</li>
<li>缺点：基于父元素的属性来设置，如果父元素没有宽高，设置无效</li>
</ul>
</li>
<li>vwvh：一个vw等于viewport宽度的百分之一，一个vh等于viewport高度的百分之一<ul>
<li>优点：简单，无需设置</li>
<li>缺点：兼容性不好</li>
</ul>
</li>
<li>rem：一个rem等于根元素（html）的字体大小，兼容性很好 (em是相对于父元素)<ul>
<li>优点：兼容好，使用简单</li>
<li>缺点：需要设置</li>
</ul>
</li>
</ol>
<p><strong>rem的计算</strong></p>
<ol>
<li>假设设计稿为1334 x 750，设置 html 的 font-size 为100px ，则1rem = 100px，原本逻辑单位为300px，css中就要就要改成3rem ；</li>
<li>但并不是所有手机都是iphone6，所以需要以下js代码，一般会把这段JS直接引入全局：<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.documentElement.style.fontSize =</span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.documentElement.clientWidth / <span class="number">3.75</span> + <span class="string">"px"</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.onresize = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.documentElement.style.fontSize =</span></span><br><span class="line"><span class="javascript">            <span class="built_in">document</span>.documentElement.clientWidth / <span class="number">3.75</span> + <span class="string">"px"</span></span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
此时，设计稿为1334 x 750，量出300px，则逻辑像素为150px，css中就是1.5rem</li>
</ol>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.documentElement.style.fontSize =</span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.documentElement.clientWidth / <span class="number">7.5</span> + <span class="string">"px"</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.onresize = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.documentElement.style.fontSize =</span></span><br><span class="line"><span class="javascript">            <span class="built_in">document</span>.documentElement.clientWidth / <span class="number">7.5</span> + <span class="string">"px"</span></span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
<p>此时，设计稿为1334 x 750，量出300px，css中就是3rem</p>
<ol start="3">
<li>rem其他使用方法：<br>　我们可以将1rem设置成屏幕的某一个比例，比如将1rem设置成屏幕的十分之一；<br>　假设我们的设计图是640宽的，我们拿到之后量了一下a的宽度为480px，得到比例a所占屏幕3/4，根据rem与屏幕的关系，最后设置成7.5rem；<br>　就是说在设置元素的宽度是时候，会根据设定好的比例关系去进行换算：<br>　<code>&lt;script&gt; document.documentElement.style.fontSize = document.documentElement.clientWidth/10 + &#39;px&#39; &lt;/script&gt;</code></li>
</ol>
<h2 id="三、移动端常见问题"><a href="#三、移动端常见问题" class="headerlink" title="三、移动端常见问题"></a>三、移动端常见问题</h2><h3 id="1px边框"><a href="#1px边框" class="headerlink" title="1px边框"></a>1px边框</h3><p>由于dpr的影响，移动端里最少是2px，可以为伪类元素+transform；<br>以下转至<a href="https://www.jianshu.com/p/5ff121936666" target="_blank">简书-luichooy</a><br><strong>第一步：媒体查询</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSS"><figure class="iseeu highlight /css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@media</span> (<span class="attribute">-webkit-min-device-pixel-ratio:</span> <span class="number">1.5</span>),(<span class="attribute">min-device-aspect-ratio:</span> <span class="number">1.5</span>) &#123;</span><br><span class="line">    <span class="selector-class">.border-1px</span>&#123;</span><br><span class="line">        &amp;::after&#123;</span><br><span class="line">            transform:scaleY(0.7);    //1.5 * 0.7接近1</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;   </span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">-webkit-min-device-pixel-ratio:</span> <span class="number">2</span>),(<span class="attribute">min-device-aspect-ratio:</span> <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="selector-class">.border-1px</span>&#123;</span><br><span class="line">        &amp;::after&#123;</span><br><span class="line">            transform:scaleY(0.5);    //2 * 0.5 = 1</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">-webkit-min-device-pixel-ratio:</span> <span class="number">2.5</span>),(<span class="attribute">min-device-aspect-ratio:</span> <span class="number">2.5</span>) &#123;</span><br><span class="line">    <span class="selector-class">.border-1px</span>&#123;</span><br><span class="line">        &amp;::after&#123;</span><br><span class="line">            transform:scaleY(0.4);    //2.5 * 0.4 = 1</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">-webkit-min-device-pixel-ratio:</span> <span class="number">3</span>),(<span class="attribute">min-device-aspect-ratio:</span> <span class="number">3</span>) &#123;</span><br><span class="line">    <span class="selector-class">.border-1px</span>&#123;</span><br><span class="line">        &amp;::after&#123;</span><br><span class="line">            transform:scaleY(0.333);    //3 * 0.333 接近 1</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">-webkit-min-device-pixel-ratio:</span> <span class="number">3.5</span>),(<span class="attribute">min-device-aspect-ratio:</span> <span class="number">3.5</span>) &#123;</span><br><span class="line">    <span class="selector-class">.border-1px</span>&#123;</span><br><span class="line">        &amp;::after&#123;</span><br><span class="line">            transform:scaleY(0.2857);    //3.5 * 0.2857 接近 1</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>定义mixin border-bottom</strong><br>利用sass的混入，自定义伪类：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SCSS"><figure class="iseeu highlight /scss"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@mixin</span> border-bottom(<span class="variable">$height</span>,<span class="variable">$color</span>) &#123;</span><br><span class="line">  <span class="attribute">position</span>:relative;</span><br><span class="line"></span><br><span class="line">  &amp;<span class="selector-pseudo">::after</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">border-top</span>: <span class="variable">$height</span> solid <span class="variable">$color</span>;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">''</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">@mixin</span> border-top(<span class="variable">$height</span>,<span class="variable">$color</span>) &#123;</span><br><span class="line">    <span class="attribute">position</span>:relative;</span><br><span class="line"></span><br><span class="line">    &amp;<span class="selector-pseudo">::after</span>&#123;</span><br><span class="line">      <span class="attribute">position</span>: absolute;</span><br><span class="line">      <span class="attribute">display</span>: block;</span><br><span class="line">      <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">      <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">      <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">      <span class="attribute">border-top</span>: <span class="variable">$height</span> solid <span class="variable">$color</span>;</span><br><span class="line">      <span class="attribute">content</span>: <span class="string">''</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>使用</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"navbar"</span> <span class="attr">class</span>=<span class="string">"border-1px"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 样式 --&gt;</span></span><br><span class="line">#navbar&#123;</span><br><span class="line">    @include border-bottom(1px, #ccc);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="12px字体"><a href="#12px字体" class="headerlink" title="12px字体"></a>12px字体</h3><p>谷歌浏览器支持的最小字体为12px，如果需要设置小于12px的字体，也是用到transform；移动端浏览器内核基本上都是webkit，同样也是这么缩小；</p>
<ul>
<li>transform: scale(0.7);</li>
</ul>
<h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h3><p>　在移动端中，图片的处理应该是很谨慎的，假设有一张图片本身的尺寸是X宽，设置和包裹它的div一样宽，如果是div宽度小于图片宽度没有问题，但是如果div宽度大于图片的宽度，图片会被拉伸失真；<br>　解决方法：让图片最大只能是自己的宽度；</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSS"><figure class="iseeu highlight /css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">img</span>&#123;</span><br><span class="line">    <span class="attribute">max-width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>或者用UI框架的图片组件，一般都做了适配；</p>
<h2 id="四、移动端事件"><a href="#四、移动端事件" class="headerlink" title="四、移动端事件"></a>四、移动端事件</h2><h3 id="点击事件"><a href="#点击事件" class="headerlink" title="点击事件"></a>点击事件</h3><ol>
<li>基础事件：<ul>
<li>touchstart 手指按下事件，类似mousedown</li>
<li>touchmove 手指移动事件，类似mousemove</li>
<li>touchend 手指抬起事件，类似mouseup</li>
</ul>
</li>
</ol>
<ol start="2">
<li><p>事件细节：</p>
<ul>
<li>touchstart是只要手指触碰到元素，就会触发</li>
<li>touchmove 按下时，必须在被添加该事件的元素上，但是按下后，即使不在该元素上，也能触发。</li>
<li>touchend 即使不在被添加该事件的元素上，抬起时，也能触发。</li>
<li>触发顺序：touchstart -&gt; touchend -&gt; mousedown -&gt; click -&gt; mouseup</li>
<li>注意：移动端事件最好还是使用addEventListener来添加。</li>
</ul>
</li>
<li><p>事件对象：</p>
<ul>
<li>touch事件对象里面的属性和mouse的略有不同，例如在mouse事件里可以直接从事件对象里取出pageX,clientX，screenX</li>
<li>touch事件对象里有touches,changedTouches,targetTouches三个属性，上面保存着关键的位置信息。它们里面保存的是触发事件的手指的信息，要注意，虽然三个里面保存的信息看似都一样，但是在touchend事件里，只能使用changedTouches</li>
</ul>
</li>
</ol>
<h3 id="其他事件"><a href="#其他事件" class="headerlink" title="其他事件"></a>其他事件</h3><ol>
<li>横竖屏：</li>
</ol>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'orientationchange'</span>,()=&gt;&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">window</span>.orientation==<span class="number">90</span> || <span class="built_in">window</span>.orientation==<span class="number">-90</span>)&#123;</span><br><span class="line">        alert(<span class="string">'横屏'</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">window</span>.orientation==<span class="number">0</span> || <span class="built_in">window</span>.orientation==<span class="number">180</span>)&#123;</span><br><span class="line">        alert(<span class="string">'竖屏'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div>
<ol>
<li>②devicemotion重力加速度事件</li>
<li>③deviceorientation方向变化事件</li>
</ol>
<h3 id="两个事件bug"><a href="#两个事件bug" class="headerlink" title="两个事件bug"></a>两个事件bug</h3><p><strong>click 300s延迟</strong><br>移动端为了区分单击和双击，给点击事件设置了300s延迟，要解决这个问题，往往需要引入外部库；<br>例如：</p>
<ul>
<li>zepto类库，Touch模块</li>
<li>百度的touch.js</li>
<li>hammer.js，一个手势事件库文档</li>
</ul>
<p>下面代码演示了fastclick的使用，在使用fastclick之后，两次点击的时间差减少了；</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- handleClick会延迟300ms --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">ontouchstart</span>=<span class="string">"handleStart()"</span> <span class="attr">onclick</span>=<span class="string">"handleClick()"</span>&gt;</span>点我<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--引入fastCLick库--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/fastclick/1.0.6/fastclick.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (<span class="string">'addEventListener'</span> <span class="keyword">in</span> <span class="built_in">document</span>) &#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">document</span>.addEventListener(<span class="string">'DOMContentLoaded'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                FastClick.attach(<span class="built_in">document</span>.body); <span class="comment">//内部做了事件代理</span></span></span><br><span class="line"><span class="actionscript">            &#125;, <span class="literal">false</span>);</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">        <span class="function"><span class="keyword">function</span> <span class="title">handleStart</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">"handleStart"</span>, <span class="built_in">Date</span>.now())</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="function"><span class="keyword">function</span> <span class="title">handleClick</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">"handleClick"</span>, <span class="built_in">Date</span>.now())</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p><strong>点透bug</strong><br>点透bug有一个特定的产生情况：<br>当上层元素是touch事件，且上层元素点击后display:none，下层元素是click事件。这个时候，touch上层元素的时候就会触发下层元素的click事件<br>解决方式：</p>
<ol>
<li>上下层都是touch事件，缺点：a标签等元素本身就是自带的click事件，更改为touch比较困难</li>
<li>缓动动画，让上层元素消失的时候不要瞬间消失，而是以动画的形式消失，事件超过300ms就可以了</li>
<li>使用中间层,添加一个透明的中间元素，给它添加click事件并消失，这个时候接收点透的是透明的中间层</li>
<li>使用fastclick</li>
<li>在上层元素的事件中通过 event.preventDefault() 取消事件的默认动作</li>
</ol>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p><strong>移动端测试：</strong></p>
<ol>
<li>使用chrome浏览器有移动设备模拟功能，在这里可以做一些模拟测试，但毕竟不是真机，会有一些测试不到的问题</li>
<li>手机连接上电脑的无线，总之使其在同一个网络里，然后就可以通过ip访问</li>
</ol>
<p><strong>需要测试的浏览器：</strong><br>chrome，firefox，UC,百度，QQ，微信，Android，safari</p>
<p><strong>移动端交互：</strong><br>动画效果全部使用css3</p>
<p><strong>JQ生成二维码</strong><br>可以使用jquery.qrcode.js插件，可以快速的生成基于canvas绘制的二维码兼容查阅网站</p>
<p><strong><a href="https://caniuse.com/" target="_blank">can i use </a></strong><br>在这里可以查看很多属性、api的兼容性</p>
]]></content>
      <categories>
        <category>App</category>
      </categories>
  </entry>
  <entry>
    <title>解决跨域</title>
    <url>/jackhuang-haohua.github.io/2018/06/21/2020-05-%E8%B7%A8%E5%9F%9F/</url>
    <content><![CDATA[<h2 id="跨域是什么"><a href="#跨域是什么" class="headerlink" title="跨域是什么"></a>跨域是什么</h2><blockquote>
<p>当一个请求url的协议、域名、端口三者之间任意一个与当前页面url不同即为跨域<br>跨域是由同源策略引起的，<strong>同源策略：</strong></p>
</blockquote>
<ul>
<li><strong>浏览器</strong> 给发送请求的限制。为了安全起见，你只能向自己家的 <strong>服务器</strong> 发送请求，不能向”别人家”的服务器发送请求</li>
<li>怎样才算”别人家”的服务器<br>=&gt; 当“传输协议”或者“域名”或者“端口号”，有任意一个不一样的时候，浏览器就会认为你在请求别人家的服务器，然后不让你请求，告诉你触发了 <strong>同源策略</strong></li>
</ul>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>跨域的解决方案主要有3种：</p>
<ol>
<li>jsonp<br>-&gt; 十年前火爆前端的跨域解决方案，至今用的越来越少，<strong>和 ajax 没有关系</strong></li>
<li>cors<br>-&gt; 五年前火爆前端的跨域解决方案，目前占市场份额大概 45%，<strong>和 前端 没有关系, 是后端来操作的</strong></li>
<li>代理(服务器代理)<br>-&gt; 三年前火爆前端的跨域解决方案，目前占市场份额大概 50%，使用 nginx 服务器来代理发送请求</li>
</ol>
<h3 id="jsonp"><a href="#jsonp" class="headerlink" title="jsonp"></a>jsonp</h3><p>　利用script标签的src属性；script的src属性不受浏览器同源策略的影响，我们可以使用 script 标签的 src 属性去请求服务器，只要返回一个正确的js语法的代码，那么就可以执行</p>
<p><strong>src:</strong><br>　script标签默认有一个 type 属性，值是 text/javascript，不管 src 请求什么文件，都是把文件里面的所有内容都当作字符串读取出来，把读取出来的字符串当作 js 代码来执行；<br>　但是但你引用其他类型的文件，也不会报错，比如请求一个php文件：<br>　<code>&lt;script src=&quot;http://127.0.0.1/server/jsonp.php&quot;&gt;&lt;/script&gt;</code><br>　<code>&lt;script src=&quot;./abc/a.js&quot;&gt;&lt;/script&gt;</code><br>　<code>&lt;script src=&quot;./abc/a.css&quot;&gt;&lt;/script&gt;</code><br>　<code>&lt;script src=&quot;./abc/a.text&quot;&gt;&lt;/script&gt;</code></p>
<p>这样一来，我们就可以在src中发起请求，携带数据，并在后面的script标签中获取值：</p>
<h4 id="原生jsonp"><a href="#原生jsonp" class="headerlink" title="原生jsonp"></a>原生jsonp</h4><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://www.baidu.com/sugrec?callback=fn&amp;wd=篮球"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="function"><span class="keyword">function</span> <span class="title">dosomething</span><span class="params">(res)</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 处理获得的数据</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(res.data)</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h4 id="jquery的jsonp"><a href="#jquery的jsonp" class="headerlink" title="jquery的jsonp"></a>jquery的jsonp</h4><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">    url: <span class="string">'https://www.baidu.com/sugrec?callback=fn&amp;wd=篮球'</span>,</span><br><span class="line">    type: <span class="string">'get'</span>,</span><br><span class="line">    dataType: <span class="string">'jsonp'</span>, <span class="comment">// 请求方式为jsonp</span></span><br><span class="line">    jsonpCallback: <span class="string">"handleCallback"</span>, <span class="comment">// 自定义回调函数名</span></span><br><span class="line">    data: &#123;&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></div>

<h4 id="vue的jsonp"><a href="#vue的jsonp" class="headerlink" title="vue的jsonp"></a>vue的jsonp</h4><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.$http.jsonp(<span class="string">'https://www.baidu.com/sugrec?callback=fn&amp;wd=篮球'</span>, &#123;</span><br><span class="line">  params: &#123;&#125;,</span><br><span class="line">  jsonp: <span class="string">'handleCallback'</span></span><br><span class="line">&#125;).then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(res); </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div>

<h3 id="cors"><a href="#cors" class="headerlink" title="cors"></a>cors</h3><p>由服务端设置，允许某个域名请求这个服务器；<br>这一段来自<a href="https://blog.csdn.net/qq_38128179/article/details/84956552" target="_blank">CSDN的Demi</a></p>
<h4 id="node中设置-Access-Control-Allow-Origin"><a href="#node中设置-Access-Control-Allow-Origin" class="headerlink" title="node中设置 Access-Control-Allow-Origin"></a>node中设置 Access-Control-Allow-Origin</h4><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"><span class="keyword">var</span> server = http.createServer();</span><br><span class="line"><span class="keyword">var</span> qs = <span class="built_in">require</span>(<span class="string">'querystring'</span>);</span><br><span class="line"> </span><br><span class="line">server.on(<span class="string">'request'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> postData = <span class="string">''</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 数据块接收中</span></span><br><span class="line">    req.addListener(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">chunk</span>) </span>&#123;</span><br><span class="line">        postData += chunk;</span><br><span class="line">    &#125;);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 数据接收完毕</span></span><br><span class="line">    req.addListener(<span class="string">'end'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        postData = qs.parse(postData);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 跨域后台设置</span></span><br><span class="line">        res.writeHead(<span class="number">200</span>, &#123;</span><br><span class="line">            <span class="string">'Access-Control-Allow-Credentials'</span>: <span class="string">'true'</span>,     <span class="comment">// 后端允许发送Cookie</span></span><br><span class="line">            <span class="string">'Access-Control-Allow-Origin'</span>: <span class="string">'http://www.domain1.com'</span>,    <span class="comment">// 允许访问的域（协议+域名+端口）</span></span><br><span class="line">            <span class="comment">/* </span></span><br><span class="line"><span class="comment">             * 此处设置的cookie还是domain2的而非domain1，因为后端也不能跨域写cookie(nginx反向代理可以实现)，</span></span><br><span class="line"><span class="comment">             * 但只要domain2中写入一次cookie认证，后面的跨域接口都能从domain2中获取cookie，从而实现所有的接口都能跨域访问</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="string">'Set-Cookie'</span>: <span class="string">'l=a123456;Path=/;Domain=www.domain2.com;HttpOnly'</span>  <span class="comment">// HttpOnly的作用是让js无法读取cookie</span></span><br><span class="line">        &#125;);</span><br><span class="line"> </span><br><span class="line">        res.write(<span class="built_in">JSON</span>.stringify(postData));</span><br><span class="line">        res.end();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line">server.listen(<span class="string">'8080'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'Server is running at port 8080...'</span>);</span><br></pre></td></tr></table></figure></div>

<h4 id="前端方面"><a href="#前端方面" class="headerlink" title="前端方面"></a>前端方面</h4><p>前端需要根据<code>withCredentials</code>字段判断是否带有cookie；</p>
<h3 id="proxy代理服务器"><a href="#proxy代理服务器" class="headerlink" title="proxy代理服务器"></a>proxy代理服务器</h3><p><strong>代理跨域(服务器正向代理跨域)</strong></p>
<ul>
<li>因为 <strong>浏览器不允许</strong> 你请求一个 <strong>非同源</strong> 的地址<br>=&gt; 在浏览器同源设置一个 代理服务器<br>=&gt; 把本该发送给目标服务器的请求发送给 代理服务器<br>=&gt; 由 代理服务器 转发请求给 目标服务器<br>=&gt; 目标服务器把响应返回给 代理服务器<br>=&gt; 代理服务器 在把响应给到 浏览器</li>
</ul>
<p><strong>怎么进行代理配置</strong></p>
<ul>
<li>只要是服务器就能做代理<br>=&gt; apache 代理：http 的不需要花钱(以前的传输协议, 不加密传输)，https 是需要花钱的(现在多用的传输协议, 加密传输)；<br>=&gt; nginx 代理：在server里面配置，http 和 https 都是免费的</li>
</ul>
<p><strong>例如在phpstud中配合nginx</strong></p>
<ol>
<li>打开 phpstudy 窗口，点击切换版本， php5.4.xxx + nginx</li>
<li>打开 phpstudy 窗口，点击其他选项菜单，点击打开配置文件<code>nginx-conf(config)</code>，找到server的闭合大括号，在这个闭合大括号的上面一行书写代理配置</li>
<li>代理配置<ul>
<li><code>/gx</code>是代理标识符，斜线必须要有</li>
<li><code>{}</code>里面的那个地址，就是要跨域请求的地址(目标服务器的地址)</li>
<li>最后的分号必须有</li>
</ul>
</li>
<li>修改完毕以后, 一定要重启服务器</li>
<li>当你在 ningx 服务器上发送请求，只要请求你自己写的代理标识符，那么就会由nginx服务器来帮你转发请求到 proxy_pass 地址</li>
<li>当你切换到 nginx 服务器以后，不管是html文件还是php文件，都不能用中文</li>
</ol>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">location &#x3D; &#x2F;gx &#123;</span><br><span class="line">    proxy_pass http:&#x2F;&#x2F;127.0.0.1&#x2F;server&#x2F;proxy.php;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>其他</category>
      </categories>
  </entry>
  <entry>
    <title>各种题目</title>
    <url>/jackhuang-haohua.github.io/2020/04/20/2020-05-%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
    <content><![CDATA[<h2 id="对象赋值"><a href="#对象赋值" class="headerlink" title="对象赋值"></a>对象赋值</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 面试题</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="string">'name'</span></span><br><span class="line"><span class="keyword">var</span> b = <span class="string">'age'</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// a 是一个变量</span></span><br><span class="line">obj[a] === obj[<span class="string">'name'</span>]</span><br><span class="line"><span class="comment">// 就是在添加 obj 的 name 属性</span></span><br><span class="line">obj[a] = <span class="string">'Jack'</span></span><br><span class="line"><span class="comment">// b 是一个变量</span></span><br><span class="line">obj[b] === obj[<span class="string">'age'</span>]</span><br><span class="line"><span class="comment">// 就是在添加 obj 的 age 属性</span></span><br><span class="line">obj[b] = <span class="number">18</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(obj.name) <span class="comment">// Jack</span></span><br><span class="line"><span class="built_in">console</span>.log(obj.age) <span class="comment">// 18</span></span><br><span class="line"><span class="built_in">console</span>.log(obj[a]) <span class="comment">// Jack</span></span><br><span class="line"><span class="built_in">console</span>.log(obj[b]) <span class="comment">// 18</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    对象是一个键值对的集合</span></span><br><span class="line"><span class="comment">    + key 只能是 string 数据类型</span></span><br><span class="line"><span class="comment">        -&gt; 如果你给的不是 string 数据类型</span></span><br><span class="line"><span class="comment">        -&gt; 他也会给你变成 string 数据类型</span></span><br><span class="line"><span class="comment">    对象数据类型变成 string 的时候</span></span><br><span class="line"><span class="comment">    + 结果就是 '[object Object]'</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">var</span> a = &#123; <span class="attr">name</span>: <span class="string">'Jack'</span> &#125;</span><br><span class="line"><span class="keyword">var</span> b = &#123; <span class="attr">name</span>: <span class="string">'Rose'</span> &#125;</span><br><span class="line"><span class="built_in">console</span>.log(a.toString()) <span class="comment">// =&gt; 把对象转换成字符串 [object Object]</span></span><br><span class="line"><span class="built_in">console</span>.log(b.toString()) <span class="comment">// =&gt; 把对象转换成字符串 [object Object]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// a 是一个变量</span></span><br><span class="line">obj[a] === obj[<span class="string">'[object Object]'</span>]</span><br><span class="line">obj[a] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// b 是一个变量</span></span><br><span class="line">obj[b] === obj[<span class="string">'[object Object]'</span>]</span><br><span class="line">obj[b] = <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 两次设置的对象成员</span></span><br><span class="line"><span class="comment">//   key 都是 [object Object]</span></span><br><span class="line"><span class="comment">//   第二次设置就相当于修改</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(obj)</span><br><span class="line"></span><br><span class="line"><span class="comment">// obj 对象里面有几个成员 ? // =&gt; 1 2 4             1</span></span><br><span class="line"><span class="built_in">console</span>.log(obj[a]) <span class="comment">// =&gt; &#123; name: 'Jack' &#125;  1      2</span></span><br><span class="line"><span class="built_in">console</span>.log(obj[b]) <span class="comment">// =&gt; &#123; name: 'Rose' &#125;  2      2</span></span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>面试</category>
      </categories>
  </entry>
  <entry>
    <title>认识高阶组件以及简单实现</title>
    <url>/jackhuang-haohua.github.io/2019/09/05/2020-05-%E9%AB%98%E9%98%B6%E7%BB%84%E4%BB%B6/</url>
    <content><![CDATA[<h2 id="是什么"><a href="#是什么" class="headerlink" title="是什么"></a>是什么</h2><blockquote>
<p>如果一个函数操作其他函数，即将其他函数作为参数并且将函数作为返回值，将其称为高阶函数(Higher-Order-Component)。高阶组件让代码更具有复用性、逻辑性与抽象特征。</p>
</blockquote>
<p><strong>比如下面这个闭包方法，add()就是一个高阶函数：</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> add = <span class="function">(<span class="params">x, y</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="params">z</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> x + y + z</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(add(<span class="number">1</span>, <span class="number">2</span>)(<span class="number">3</span>)); =&gt; <span class="number">6</span></span><br></pre></td></tr></table></figure></div>

<h2 id="connect"><a href="#connect" class="headerlink" title="connect"></a>connect</h2><p>在react中，路由有一个connect方法，能传递redux仓库的数据；使用方法之前介绍过了，现在再来复习一下</p>
<p><strong>在react中使用connect：</strong><br>①安装：yarn add react-redux -S<br>②在总入口文件，index.js中，</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">'react-dom'</span>;</span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App'</span>;</span><br><span class="line"><span class="comment">// 1.引入仓库store</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">"./store"</span></span><br><span class="line"><span class="comment">// 2.引入插件，并取出Provider</span></span><br><span class="line"><span class="keyword">import</span> &#123;Provider&#125; <span class="keyword">from</span> <span class="string">"react-redux"</span></span><br><span class="line">ReactDOM.render(</span><br><span class="line">  <span class="comment">// 3.将根元素用Provider包裹起来，同时传值仓库</span></span><br><span class="line">  <span class="comment">// &lt;App/&gt;就是provider，并且所有子元素都可以获得仓库里的数据，底层原理是context</span></span><br><span class="line">  &lt;Provider store=&#123;store&#125;&gt;</span><br><span class="line">    &lt;App /&gt; </span><br><span class="line">  &lt;<span class="regexp">/Provider&gt;</span></span><br><span class="line"><span class="regexp">  ,</span></span><br><span class="line"><span class="regexp">  document.getElementById('root')</span></span><br><span class="line"><span class="regexp">);</span></span><br></pre></td></tr></table></figure></div>

<p>③在组件中使用connect，并配置两个参数<br>connect() 是一个HOC高阶组件，本质上就是一个函数，可以修改一个组件，最终返回一个新的组件，connect(参数)(UI组件)=&gt;返回一个容器组件，再把这个容器组件导出去渲染，</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// connect有两个参数</span></span><br><span class="line"><span class="comment">// 1.第一个参数即取得todolist里的state，这个todolist是由总仓库reducer里决定的</span></span><br><span class="line"><span class="keyword">const</span> mapStateToProps=<span class="function"><span class="params">state</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> state.todolist</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.第二个参数即取得todolist里的actions</span></span><br><span class="line"><span class="keyword">const</span> mapDispatch = actionCreators</span><br><span class="line"><span class="comment">// 取得单个action</span></span><br><span class="line"><span class="keyword">const</span> mapDispatchToprops = <span class="function"><span class="params">dispatch</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        addNewTodo:<span class="function"><span class="params">title</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> action = actionCreators.addNewTodo(title)</span><br><span class="line">            dispatch(action)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.把两个参数挂载在props上，props上就有了state和actions</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> connect(mapStateToProps,mapDispatchToprops)(TodoContext)</span><br></pre></td></tr></table></figure></div>

<h2 id="React-memo"><a href="#React-memo" class="headerlink" title="React.memo"></a>React.memo</h2><p>③React.memo<br>一种高阶组件，可以接受2个参数，第一个为函数式组件，第二个用于对比props控制是否刷新，类似<code>shouldComponentUpdate</code>：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child</span>(<span class="params">&#123;seconds&#125;</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;I am update every &#123;seconds&#125; seconds&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  )</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">function areEqual(prevProps, nextProps) &#123;</span></span><br><span class="line"><span class="regexp">  if(prevProps.seconds===nextProps.seconds)&#123;</span></span><br><span class="line"><span class="regexp">    return true</span></span><br><span class="line"><span class="regexp">  &#125; else &#123;</span></span><br><span class="line"><span class="regexp">    return false</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default React.memo(Child,areEqual)</span></span><br></pre></td></tr></table></figure></div>

<h2 id="自定义高阶组件"><a href="#自定义高阶组件" class="headerlink" title="自定义高阶组件"></a>自定义高阶组件</h2><h3 id="①定义一个高阶组件"><a href="#①定义一个高阶组件" class="headerlink" title="①定义一个高阶组件"></a>①定义一个高阶组件</h3><p>src/withCopy.js中：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">const</span> withCopy = <span class="function"><span class="params">Comp</span> =&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="class"><span class="keyword">class</span> <span class="title">withCopyRight</span> <span class="keyword">extends</span> <span class="title">Component</span></span>&#123;</span><br><span class="line">        render()&#123;</span><br><span class="line">            <span class="keyword">return</span> (</span><br><span class="line">                &lt;div&gt;</span><br><span class="line">                    &amp;copy;版权信息</span><br><span class="line">                &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">            )</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">export default withCopy</span></span><br></pre></td></tr></table></figure></div>

<h3 id="②使用高阶组件，src-About-js中"><a href="#②使用高阶组件，src-About-js中" class="headerlink" title="②使用高阶组件，src/About.js中"></a>②使用高阶组件，src/About.js中</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> withCopy <span class="keyword">from</span> <span class="string">'./withCopy'</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">About</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                About页面</span><br><span class="line">            &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        )</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 调用withCopy()会返回withCopy.js里的内容，传过去了参数，再那边调用Comp即是调用About</span></span><br><span class="line"><span class="regexp">export default withCopy(About)</span></span><br></pre></td></tr></table></figure></div>

<h3 id="③引入"><a href="#③引入" class="headerlink" title="③引入"></a>③引入</h3><p>在App.js中引入<code>&lt;About/&gt;</code></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React,&#123;Component&#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> About <span class="keyword">from</span> <span class="string">'./About'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  render()&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;About&gt;<span class="xml"><span class="tag">&lt;/<span class="name">About</span>&gt;</span></span></span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure></div>

<h3 id="④渲染"><a href="#④渲染" class="headerlink" title="④渲染"></a>④渲染</h3><p>index.js中渲染App，此时，页面中只有“版权信息”，没有“About页面”。<br>因为”About.js”中导出withCopy(About)，相当于渲染了withCopy里return的内容，<br>我们可以在withCopy.js里调用Comp参数，即About组件。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">const</span> withCopy = <span class="function"><span class="params">Comp</span> =&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="class"><span class="keyword">class</span> <span class="title">withCopyRight</span> <span class="keyword">extends</span> <span class="title">Component</span></span>&#123;</span><br><span class="line">        render()&#123;</span><br><span class="line">            <span class="keyword">return</span> (</span><br><span class="line">                &lt;div&gt;</span><br><span class="line">                    &lt;Comp/&gt;</span><br><span class="line">                    &amp;copy;版权信息</span><br><span class="line">                &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">            )</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">export default withCopy</span></span><br></pre></td></tr></table></figure></div>

<h3 id="⑤使用"><a href="#⑤使用" class="headerlink" title="⑤使用"></a>⑤使用</h3><p>这样一来，页面就出现了“版权信息”，和“About页面”;此后只要调用withCopy(UI组件)，就会加上withCopy.js里的内容.</p>
<h3 id="⑥传参"><a href="#⑥传参" class="headerlink" title="⑥传参"></a>⑥传参</h3><p>如果我们要给About组件传参。About组件是在App.js引入的，我们传一个info，App.js中：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React,&#123;Component&#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> About <span class="keyword">from</span> <span class="string">'./About'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  render()&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;About info=<span class="string">"App传给About"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">About</span>&gt;</span></span></span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure></div>

<p>在About中，渲染这个info，</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> withCopy <span class="keyword">from</span> <span class="string">'./withCopy'</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">About</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                About &#123;<span class="keyword">this</span>.props.info&#125;</span><br><span class="line">            &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        )</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">export default withCopy(About)</span></span><br></pre></td></tr></table></figure></div>

<p>发现并没有出现“App传给About”字样，因为About是在withCopy.js才会真正调用，我们应该withCopy.js里接收参数，</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">const</span> withCopy = <span class="function"><span class="params">Comp</span> =&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="class"><span class="keyword">class</span> <span class="title">withCopyRight</span> <span class="keyword">extends</span> <span class="title">Component</span></span>&#123;</span><br><span class="line">        render()&#123;</span><br><span class="line">            <span class="keyword">return</span> (</span><br><span class="line">                &lt;div&gt;</span><br><span class="line">                    &#123;<span class="comment">/* 调用Comp即是调用About，或者其他传过来的参数 */</span>&#125;</span><br><span class="line">                    &lt;Comp info=&#123;<span class="keyword">this</span>.props.info&#125;/&gt;</span><br><span class="line">                    &amp;copy;版权信息</span><br><span class="line">                &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">            )</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">export default withCopy</span></span><br></pre></td></tr></table></figure></div>

<p>由此可见，高阶组件的调用/渲染顺序为：<br>　App.js=&gt;withCopy的return=&gt;About组件；<br>数据传递顺序：<br>　App.js=&gt;withCopy的Comp=&gt;About组件；</p>
<h2 id="CRA定制"><a href="#CRA定制" class="headerlink" title="CRA定制"></a>CRA定制</h2><p>现在想改成下面这种@withCopy的写法</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> withCopy <span class="keyword">from</span> <span class="string">'./withCopy'</span></span><br><span class="line"></span><br><span class="line">@withCopy</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">About</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                About &#123;<span class="keyword">this</span>.props.info&#125;</span><br><span class="line">            &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        )</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default About</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ export default withCopy(About)</span></span><br></pre></td></tr></table></figure></div>

<p>①yarn add react-app-rewired  &amp;&amp;  yarn add customize-cra<br>②对脚手架轻微调整，package.json：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">    <span class="string">"start"</span>: <span class="string">"react-app-rewired start"</span>,</span><br><span class="line">    <span class="string">"build"</span>: <span class="string">"react-app-rewired build"</span>,</span><br><span class="line">    <span class="string">"test"</span>: <span class="string">"react-app-rewired test"</span>,</span><br><span class="line">    <span class="string">"eject"</span>: <span class="string">"react-scripts eject"</span></span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure></div>
<p>yarn start报错：缺少decorators支持</p>
<p>③根目录创建 config-overrides.js 配置文件<br>如果要自己配置的话，很麻烦：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> <span class="title">override</span>(<span class="params">config, env</span>) </span>&#123;</span><br><span class="line">    这里要很多的配置代码</span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>我们可以用 customize-cra 帮助完成：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// module.exports = function override(config, env) &#123;</span></span><br><span class="line"><span class="comment">//     return config;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123;</span><br><span class="line">    addDecoratorsLegacy,</span><br><span class="line">    override</span><br><span class="line">&#125; = <span class="built_in">require</span>(<span class="string">"customize-cra"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导出，使当前cra支持decorators</span></span><br><span class="line"><span class="built_in">module</span>.exports = override(</span><br><span class="line">    addDecoratorsLegacy()   </span><br><span class="line">)</span><br></pre></td></tr></table></figure></div>

<p>④现在高阶函数就可以更优雅地使用了</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> withCopy <span class="keyword">from</span> <span class="string">'./withCopy'</span></span><br><span class="line">@withCopy</span><br><span class="line">@withCopy2</span><br><span class="line">@withCopy3</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">About</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                About &#123;<span class="keyword">this</span>.props.info&#125;</span><br><span class="line">            &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        )</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">export default About</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ export default withCopy(About)</span></span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>react</category>
      </categories>
  </entry>
</search>
